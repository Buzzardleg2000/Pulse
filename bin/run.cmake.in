# Scripts to assist developers
# Mostly these are calling the test suite driver and validator classes in Java

set(JAVA_CLASSPATH Pulse.jar
        "@CMAKE_SOURCE_DIR@/src/java/jar/commons-collections4-4.4.jar"
        "@CMAKE_SOURCE_DIR@/src/java/jar/commons-compress-1.21.jar"
        "@CMAKE_SOURCE_DIR@/src/java/jar/commons-io-2.11.0.jar"
        "@CMAKE_SOURCE_DIR@/src/java/jar/commons-math3-3.6.1.jar"
        "@CMAKE_SOURCE_DIR@/src/java/jar/error_prone_annotations-2.11.0.jar"
        "@CMAKE_SOURCE_DIR@/src/java/jar/gson-2.10.1.jar"
        "@CMAKE_SOURCE_DIR@/src/java/jar/guava-31.1-jre.jar"
        "@CMAKE_SOURCE_DIR@/src/java/jar/j2objc-annotations-1.3.jar"
        "@CMAKE_SOURCE_DIR@/src/java/jar/java-ordered-properties-1.0.4.jar"
        "@CMAKE_SOURCE_DIR@/src/java/jar/javassist-3.28.0-GA.jar"
        "@CMAKE_SOURCE_DIR@/src/java/jar/jfreechart-1.5.4.jar"
        "@CMAKE_SOURCE_DIR@/src/java/jar/jsr305-3.0.2.jar"
        "@CMAKE_SOURCE_DIR@/src/java/jar/log4j-api-2.20.0.jar"
        "@CMAKE_SOURCE_DIR@/src/java/jar/log4j-core-2.20.0.jar"
        "@CMAKE_SOURCE_DIR@/src/java/jar/logback-core-1.4.6.jar"
        "@CMAKE_SOURCE_DIR@/src/java/jar/poi-5.2.3.jar"
        "@CMAKE_SOURCE_DIR@/src/java/jar/poi-ooxml-5.2.3.jar"
        "@CMAKE_SOURCE_DIR@/src/java/jar/poi-ooxml-lite-5.2.3.jar"
        "@CMAKE_SOURCE_DIR@/src/java/jar/reflections-0.10.2.jar"
        "@CMAKE_SOURCE_DIR@/src/java/jar/slf4j-api-2.0.7.jar"
        "@CMAKE_SOURCE_DIR@/src/java/jar/slf4j-simple-2.0.7.jar"
        "@CMAKE_SOURCE_DIR@/src/java/jar/xmlbeans-5.1.1.jar"
        )
set(separator ";")
if(NOT WIN32)
  set(separator ":")
  string(REPLACE ";" ":" JAVA_CLASSPATH "${JAVA_CLASSPATH}")
endif()
set(ENV{PYTHONPATH} "@CMAKE_INSTALL_PREFIX@/bin${separator}@CMAKE_INSTALL_PREFIX@/python")

string( TOLOWER "${TYPE}" cmd )
string( TOLOWER "${ARG1}" arg1 )
string( TOLOWER "${ARG2}" arg2 )
#message(STATUS "${cmd} ${arg1} ${arg2}")

if(cmd STREQUAL "tests" OR cmd STREQUAL "patientvalidation")
  if(cmd STREQUAL "tests")
    execute_process(COMMAND "@Java_CMD@" -classpath "${JAVA_CLASSPATH}" com.kitware.pulse.cdm.testing.SETestDriver CDMUnitTests.config)
    execute_process(COMMAND "@Java_CMD@" -classpath "${JAVA_CLASSPATH}" com.kitware.pulse.cdm.testing.SETestDriver EngineUnitTests.config)
    execute_process(COMMAND "@Java_CMD@" -classpath "${JAVA_CLASSPATH}" com.kitware.pulse.cdm.testing.SETestDriver ScenarioVerification.config)
  endif()
  if(cmd STREQUAL "patientvalidation" OR cmd STREQUAL "tests")
    execute_process(COMMAND "@Java_CMD@" -classpath "${JAVA_CLASSPATH}" com.kitware.pulse.cdm.testing.SETestDriver PatientVerification.config)
    execute_process(COMMAND "@Python_CMD@" "../python/pulse/engine/validation/patient_validation.py" test_results RESULT_VARIABLE py_result)
  endif()
elseif(cmd STREQUAL "gendata")
  execute_process(COMMAND "@Java_CMD@" -classpath "${JAVA_CLASSPATH}" com.kitware.pulse.dataset.DataSetReader)
  execute_process(COMMAND "@Python_CMD@" "../python/pulse/dataset/generate_data.py" BASELINE RESULT_VARIABLE py_result)
elseif(cmd STREQUAL "genstates")
  execute_process(COMMAND "@Java_CMD@" -classpath "${JAVA_CLASSPATH}" com.kitware.pulse.cdm.testing.SETestDriver InitialPatientStates.config)
elseif(cmd STREQUAL "doxygen" OR cmd STREQUAL "validate")
  function(clean_docs DELETE_OLD)
    file(MAKE_DIRECTORY  "./docs/html")
    file(MAKE_DIRECTORY  "./docs/markdown")
    file(GLOB_RECURSE DOCS "./docs/html/*.*" "./docs/markdown/*.*")
    if(DOCS AND DELETE_OLD)
      file(REMOVE ${DOCS})
    endif()
    file(COPY @CMAKE_SOURCE_DIR@/docs/Doxygen/bootstrap DESTINATION ./docs/html)
    file(COPY @CMAKE_SOURCE_DIR@/docs/Doxygen/font-awesome-4.3.0 DESTINATION ./docs/html)
    file(COPY @CMAKE_SOURCE_DIR@/docs/Images DESTINATION ./docs/html)
    # Create the header and footer with panels for doxygen to use
    file(READ @CMAKE_SOURCE_DIR@/docs/Doxygen/header_panel.html HEADER_PANEL)
    file(READ @CMAKE_SOURCE_DIR@/docs/Doxygen/footer_panel.html FOOTER_PANEL)
    file(WRITE  ./docs/panel_header.html "${HEADER}")
    file(APPEND ./docs/panel_header.html "${HEADER_PANEL}")
    file(WRITE  ./docs/panel_footer.html "${FOOTER_PANEL}")
    file(APPEND ./docs/panel_footer.html "${FOOTER}")
  endfunction()
  if(cmd STREQUAL "doxygen")
    file(READ @CMAKE_SOURCE_DIR@/docs/Doxygen/header.html HEADER)
    file(READ @CMAKE_SOURCE_DIR@/docs/Doxygen/footer.html FOOTER)
    clean_docs(TRUE)
    file(COPY @CMAKE_SOURCE_DIR@/docs/Sources.bib DESTINATION @CMAKE_INSTALL_PREFIX@/bin/docs/)
    # These are run above
    execute_process(COMMAND "@Python_CMD@" "../python/pulse/engine/validation/patient_validation.py" verification RESULT_VARIABLE py_result)
    execute_process(COMMAND "@Python_CMD@" "../python/pulse/dataset/segment_validation_pipeline.py" -m RESULT_VARIABLE py_result)
    execute_process(COMMAND "@Python_CMD@" "../python/pulse/engine/validation/mechanical_ventilator_validation.py" RESULT_VARIABLE py_result)
    execute_process(COMMAND "@Python_CMD@" "../python/pulse/cdm/utils/markdown.py" ./validation/markdown ./docs/markdown RESULT_VARIABLE py_result)
    execute_process(COMMAND "@Python_CMD@" "../python/pulse/cdm/utils/markdown.py" "@CMAKE_SOURCE_DIR@/docs/Markdown" ./docs/markdown RESULT_VARIABLE py_result)
    execute_process(COMMAND "@Python_CMD@" "../python/pulse/cdm/utils/markdown.py" "@CMAKE_SOURCE_DIR@/docs/Methodology" ./docs/markdown ./test_results/tables RESULT_VARIABLE py_result)
    execute_process(COMMAND "@Java_CMD@" -classpath "${JAVA_CLASSPATH}" com.kitware.pulse.cdm.doxygen.Proto2Doxygen "@CMAKE_SOURCE_DIR@/src/schema" ./docs/markdown)
    execute_process(COMMAND "@Java_CMD@" -classpath "${JAVA_CLASSPATH}" com.kitware.pulse.cdm.doxygen.CDM2MD ./docs/markdown)
    execute_process(COMMAND "@Python_CMD@" "../python/pulse/cdm/utils/plotter.py" PlotRun.json RESULT_VARIABLE py_result)
    execute_process(COMMAND doxygen ./docs/full.doxy)
    # Build our landing files
    function(setup_landing_page CONTENT_FILE)
      file(READ @CMAKE_SOURCE_DIR@/docs/Doxygen/${CONTENT_FILE} CONTENT)
      file(WRITE  ./docs/html/${CONTENT_FILE} "${HEADER}")
      file(APPEND ./docs/html/${CONTENT_FILE} "${CONTENT}")
      file(APPEND ./docs/html/${CONTENT_FILE} "${FOOTER}")
    endfunction()
    setup_landing_page(index.html)
    setup_landing_page(pulse-in-action.html)
    setup_landing_page(news.html)
    setup_landing_page(focus.html)
    setup_landing_page(support.html)
  elseif(cmd STREQUAL "validate")
    file(READ @CMAKE_SOURCE_DIR@/docs/Doxygen/header_minimum.html HEADER)
    file(READ @CMAKE_SOURCE_DIR@/docs/Doxygen/footer_minimum.html FOOTER)
    # Assumption: always use the test results when explicitly runnning validation on a xlsx
    clean_docs(FALSE)
    file(COPY @CMAKE_SOURCE_DIR@/docs/Sources.bib DESTINATION @CMAKE_INSTALL_PREFIX@/bin/docs/)
    set(exec_opt "-tf")
    if(arg2 STREQUAL "gen")
      set(exec_opt "-g")
    elseif(arg2 STREQUAL "skip")
      set(exec_opt "-ts")
    elseif(arg2 STREQUAL "report")
      set(exec_opt "-tm")
    endif()
    #message(STATUS "Running ${ARG1} ${exec_opt}")
    execute_process(COMMAND "@Python_CMD@" "../python/pulse/dataset/segment_validation_pipeline.py" ${exec_opt} ${ARG1} RESULT_VARIABLE py_result)
    execute_process(COMMAND "@Python_CMD@" "../python/pulse/cdm/utils/markdown.py" ./validation/markdown ./docs/markdown RESULT_VARIABLE py_result)
    execute_process(COMMAND doxygen ./docs/report.doxy)
  endif()
elseif(cmd STREQUAL "protoc")
  file(REMOVE @CMAKE_SOURCE_DIR@/src/schema/schema_last_built)
  execute_process(COMMAND ${CMAKE_COMMAND} -DSRC_ROOT:PATH=@CMAKE_SOURCE_DIR@/src
                                           -DDST_ROOT:PATH=@CMAKE_BINARY_DIR@/src
                                           -Dprotobuf_SRC:PATH=@protobuf_SRC@
                                           -DProtobuf_PROTOC_EXECUTABLE:PATH=@Protobuf_PROTOC_EXECUTABLE@
                                           -DPulse_JAVA_API:BOOL=@Pulse_JAVA_API@
                                           -DPulse_CSHARP_API:BOOL=@Pulse_CSHARP_API@
                                           -DPulse_PYTHON_API:BOOL=@Pulse_PYTHON_API@
                                           -DFORCE:BOOL=ON
                                           -P "@CMAKE_SOURCE_DIR@/src/schema/GenerateBindings.cmake")
elseif(cmd STREQUAL "updatebaselines")
  execute_process(COMMAND ${CMAKE_COMMAND} --build "@CMAKE_CURRENT_BINARY_DIR@" --target UpdateVerification)
elseif(cmd STREQUAL "jar")
  execute_process(COMMAND ${CMAKE_COMMAND} --build "@CMAKE_CURRENT_BINARY_DIR@/src/java" --target PulseJava)
elseif(cmd MATCHES "setup.py")
  file(REMOVE_RECURSE  @CMAKE_INSTALL_PREFIX@/python)
  file(COPY @CMAKE_BINARY_DIR@/src/python/pulse DESTINATION @CMAKE_INSTALL_PREFIX@/python)
  file(COPY @CMAKE_BINARY_DIR@/src/python/google DESTINATION @CMAKE_INSTALL_PREFIX@/python)
  file(COPY @CMAKE_SOURCE_DIR@/src/python/pulse DESTINATION @CMAKE_INSTALL_PREFIX@/python)
elseif(cmd STREQUAL "rebase")
  # find Git and if available set GIT_HASH variable
  find_package(Git QUIET)
  if(GIT_FOUND)
    execute_process(
      COMMAND ${GIT_EXECUTABLE} log -1 --pretty=format:%h
      OUTPUT_VARIABLE GIT_HASH
      OUTPUT_STRIP_TRAILING_WHITESPACE
      ERROR_QUIET
      WORKING_DIRECTORY
        @CMAKE_SOURCE_DIR@
      )
  endif()
  execute_process(COMMAND "@Java_CMD@" -classpath "${JAVA_CLASSPATH}" com.kitware.pulse.cdm.testing.Rebase ${GIT_HASH})
elseif(cmd STREQUAL "fullreport")
  execute_process(COMMAND "@Java_CMD@" -classpath "${JAVA_CLASSPATH}" com.kitware.pulse.cdm.testing.SEReportResults)
elseif(cmd STREQUAL "plotter")
  execute_process(COMMAND "@Python_CMD@" "../python/pulse/cdm/utils/plotter.py" ${ARG1} RESULT_VARIABLE py_result)
elseif(cmd MATCHES "compare")
  # If ARG2 is empty, assume ARG1 is a directory with 2 csv files
  if(NOT ARG2)
    file(GLOB _csv_files "${ARG1}/*.csv")
    list(LENGTH _csv_files _num_csv_files)
    if(_num_csv_files EQUAL 2)
      list(GET _csv_files 0 _csv_0)
      list(GET _csv_files 1 _csv_1)
      message(STATUS "CSV 0 : ${_csv_0}")
      message(STATUS "CSV 1 : ${_csv_1}")
      execute_process(COMMAND "@Python_CMD@" "../python/pulse/cdm/utils/csv_compare.py" ${_csv_0} ${_csv_1} RESULT_VARIABLE py_result)
    else()
      message(FATAL_ERROR "Could not find 2 csv files in provided directory ${ARG1}")
    endif()
  else()
    execute_process(COMMAND "@Python_CMD@" "../python/pulse/cdm/utils/csv_compare.py" ${ARG1} ${ARG2} RESULT_VARIABLE py_result)
  endif()
elseif(cmd MATCHES "plot")
  execute_process(COMMAND "@Python_CMD@" "../python/pulse/cdm/utils/plotter.py" ${TYPE}.json RESULT_VARIABLE py_result)
else()
  execute_process(COMMAND "@Java_CMD@" -classpath "${JAVA_CLASSPATH}" com.kitware.pulse.cdm.testing.SETestDriver ${TYPE}.config)
endif()
