// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/Actions.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fActions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fActions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "pulse/cdm/bind/Properties.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fActions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pulse_2fcdm_2fbind_2fActions_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fActions_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class ActionData;
class ActionDataDefaultTypeInternal;
extern ActionDataDefaultTypeInternal _ActionData_default_instance_;
class AdvanceTimeData;
class AdvanceTimeDataDefaultTypeInternal;
extern AdvanceTimeDataDefaultTypeInternal _AdvanceTimeData_default_instance_;
class SerializeStateData;
class SerializeStateDataDefaultTypeInternal;
extern SerializeStateDataDefaultTypeInternal _SerializeStateData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> ::pulse::cdm::bind::ActionData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ActionData>(Arena*);
template<> ::pulse::cdm::bind::AdvanceTimeData* Arena::CreateMaybeMessage<::pulse::cdm::bind::AdvanceTimeData>(Arena*);
template<> ::pulse::cdm::bind::SerializeStateData* Arena::CreateMaybeMessage<::pulse::cdm::bind::SerializeStateData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pulse {
namespace cdm {
namespace bind {

enum SerializeStateData_eType : int {
  SerializeStateData_eType_Save = 0,
  SerializeStateData_eType_Load = 1,
  SerializeStateData_eType_SerializeStateData_eType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SerializeStateData_eType_SerializeStateData_eType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SerializeStateData_eType_IsValid(int value);
constexpr SerializeStateData_eType SerializeStateData_eType_eType_MIN = SerializeStateData_eType_Save;
constexpr SerializeStateData_eType SerializeStateData_eType_eType_MAX = SerializeStateData_eType_Load;
constexpr int SerializeStateData_eType_eType_ARRAYSIZE = SerializeStateData_eType_eType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SerializeStateData_eType_descriptor();
template<typename T>
inline const std::string& SerializeStateData_eType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SerializeStateData_eType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SerializeStateData_eType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SerializeStateData_eType_descriptor(), enum_t_value);
}
inline bool SerializeStateData_eType_Parse(
    const std::string& name, SerializeStateData_eType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SerializeStateData_eType>(
    SerializeStateData_eType_descriptor(), name, value);
}
// ===================================================================

class ActionData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ActionData) */ {
 public:
  ActionData();
  virtual ~ActionData();

  ActionData(const ActionData& from);
  ActionData(ActionData&& from) noexcept
    : ActionData() {
    *this = ::std::move(from);
  }

  inline ActionData& operator=(const ActionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActionData& operator=(ActionData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActionData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActionData* internal_default_instance() {
    return reinterpret_cast<const ActionData*>(
               &_ActionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ActionData& a, ActionData& b) {
    a.Swap(&b);
  }
  inline void Swap(ActionData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActionData* New() const final {
    return CreateMaybeMessage<ActionData>(nullptr);
  }

  ActionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActionData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActionData& from);
  void MergeFrom(const ActionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActionData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ActionData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommentFieldNumber = 1,
  };
  // string Comment = 1;
  void clear_comment();
  const std::string& comment() const;
  void set_comment(const std::string& value);
  void set_comment(std::string&& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  std::string* mutable_comment();
  std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  private:
  const std::string& _internal_comment() const;
  void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ActionData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fActions_2eproto;
};
// -------------------------------------------------------------------

class AdvanceTimeData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.AdvanceTimeData) */ {
 public:
  AdvanceTimeData();
  virtual ~AdvanceTimeData();

  AdvanceTimeData(const AdvanceTimeData& from);
  AdvanceTimeData(AdvanceTimeData&& from) noexcept
    : AdvanceTimeData() {
    *this = ::std::move(from);
  }

  inline AdvanceTimeData& operator=(const AdvanceTimeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdvanceTimeData& operator=(AdvanceTimeData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AdvanceTimeData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdvanceTimeData* internal_default_instance() {
    return reinterpret_cast<const AdvanceTimeData*>(
               &_AdvanceTimeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AdvanceTimeData& a, AdvanceTimeData& b) {
    a.Swap(&b);
  }
  inline void Swap(AdvanceTimeData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AdvanceTimeData* New() const final {
    return CreateMaybeMessage<AdvanceTimeData>(nullptr);
  }

  AdvanceTimeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AdvanceTimeData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AdvanceTimeData& from);
  void MergeFrom(const AdvanceTimeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdvanceTimeData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.AdvanceTimeData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kTimeFieldNumber = 2,
  };
  // .pulse.cdm.bind.ActionData Action = 1;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  const ::pulse::cdm::bind::ActionData& action() const;
  ::pulse::cdm::bind::ActionData* release_action();
  ::pulse::cdm::bind::ActionData* mutable_action();
  void set_allocated_action(::pulse::cdm::bind::ActionData* action);
  private:
  const ::pulse::cdm::bind::ActionData& _internal_action() const;
  ::pulse::cdm::bind::ActionData* _internal_mutable_action();
  public:

  // .pulse.cdm.bind.ScalarTimeData Time = 2;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const ::pulse::cdm::bind::ScalarTimeData& time() const;
  ::pulse::cdm::bind::ScalarTimeData* release_time();
  ::pulse::cdm::bind::ScalarTimeData* mutable_time();
  void set_allocated_time(::pulse::cdm::bind::ScalarTimeData* time);
  private:
  const ::pulse::cdm::bind::ScalarTimeData& _internal_time() const;
  ::pulse::cdm::bind::ScalarTimeData* _internal_mutable_time();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.AdvanceTimeData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ActionData* action_;
  ::pulse::cdm::bind::ScalarTimeData* time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fActions_2eproto;
};
// -------------------------------------------------------------------

class SerializeStateData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.SerializeStateData) */ {
 public:
  SerializeStateData();
  virtual ~SerializeStateData();

  SerializeStateData(const SerializeStateData& from);
  SerializeStateData(SerializeStateData&& from) noexcept
    : SerializeStateData() {
    *this = ::std::move(from);
  }

  inline SerializeStateData& operator=(const SerializeStateData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializeStateData& operator=(SerializeStateData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SerializeStateData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SerializeStateData* internal_default_instance() {
    return reinterpret_cast<const SerializeStateData*>(
               &_SerializeStateData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SerializeStateData& a, SerializeStateData& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializeStateData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SerializeStateData* New() const final {
    return CreateMaybeMessage<SerializeStateData>(nullptr);
  }

  SerializeStateData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SerializeStateData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SerializeStateData& from);
  void MergeFrom(const SerializeStateData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializeStateData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.SerializeStateData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SerializeStateData_eType eType;
  static constexpr eType Save =
    SerializeStateData_eType_Save;
  static constexpr eType Load =
    SerializeStateData_eType_Load;
  static inline bool eType_IsValid(int value) {
    return SerializeStateData_eType_IsValid(value);
  }
  static constexpr eType eType_MIN =
    SerializeStateData_eType_eType_MIN;
  static constexpr eType eType_MAX =
    SerializeStateData_eType_eType_MAX;
  static constexpr int eType_ARRAYSIZE =
    SerializeStateData_eType_eType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  eType_descriptor() {
    return SerializeStateData_eType_descriptor();
  }
  template<typename T>
  static inline const std::string& eType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, eType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function eType_Name.");
    return SerializeStateData_eType_Name(enum_t_value);
  }
  static inline bool eType_Parse(const std::string& name,
      eType* value) {
    return SerializeStateData_eType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 3,
    kActionFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string Filename = 3;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // .pulse.cdm.bind.ActionData Action = 1;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  const ::pulse::cdm::bind::ActionData& action() const;
  ::pulse::cdm::bind::ActionData* release_action();
  ::pulse::cdm::bind::ActionData* mutable_action();
  void set_allocated_action(::pulse::cdm::bind::ActionData* action);
  private:
  const ::pulse::cdm::bind::ActionData& _internal_action() const;
  ::pulse::cdm::bind::ActionData* _internal_mutable_action();
  public:

  // .pulse.cdm.bind.SerializeStateData.eType Type = 2;
  void clear_type();
  ::pulse::cdm::bind::SerializeStateData_eType type() const;
  void set_type(::pulse::cdm::bind::SerializeStateData_eType value);
  private:
  ::pulse::cdm::bind::SerializeStateData_eType _internal_type() const;
  void _internal_set_type(::pulse::cdm::bind::SerializeStateData_eType value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.SerializeStateData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::pulse::cdm::bind::ActionData* action_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fActions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ActionData

// string Comment = 1;
inline void ActionData::clear_comment() {
  comment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ActionData::comment() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ActionData.Comment)
  return _internal_comment();
}
inline void ActionData::set_comment(const std::string& value) {
  _internal_set_comment(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ActionData.Comment)
}
inline std::string* ActionData::mutable_comment() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ActionData.Comment)
  return _internal_mutable_comment();
}
inline const std::string& ActionData::_internal_comment() const {
  return comment_.GetNoArena();
}
inline void ActionData::_internal_set_comment(const std::string& value) {
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ActionData::set_comment(std::string&& value) {
  
  comment_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.ActionData.Comment)
}
inline void ActionData::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.ActionData.Comment)
}
inline void ActionData::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.ActionData.Comment)
}
inline std::string* ActionData::_internal_mutable_comment() {
  
  return comment_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActionData::release_comment() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ActionData.Comment)
  
  return comment_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActionData::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ActionData.Comment)
}

// -------------------------------------------------------------------

// AdvanceTimeData

// .pulse.cdm.bind.ActionData Action = 1;
inline bool AdvanceTimeData::_internal_has_action() const {
  return this != internal_default_instance() && action_ != nullptr;
}
inline bool AdvanceTimeData::has_action() const {
  return _internal_has_action();
}
inline void AdvanceTimeData::clear_action() {
  if (GetArenaNoVirtual() == nullptr && action_ != nullptr) {
    delete action_;
  }
  action_ = nullptr;
}
inline const ::pulse::cdm::bind::ActionData& AdvanceTimeData::_internal_action() const {
  const ::pulse::cdm::bind::ActionData* p = action_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ActionData*>(
      &::pulse::cdm::bind::_ActionData_default_instance_);
}
inline const ::pulse::cdm::bind::ActionData& AdvanceTimeData::action() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AdvanceTimeData.Action)
  return _internal_action();
}
inline ::pulse::cdm::bind::ActionData* AdvanceTimeData::release_action() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AdvanceTimeData.Action)
  
  ::pulse::cdm::bind::ActionData* temp = action_;
  action_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ActionData* AdvanceTimeData::_internal_mutable_action() {
  
  if (action_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ActionData>(GetArenaNoVirtual());
    action_ = p;
  }
  return action_;
}
inline ::pulse::cdm::bind::ActionData* AdvanceTimeData::mutable_action() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AdvanceTimeData.Action)
  return _internal_mutable_action();
}
inline void AdvanceTimeData::set_allocated_action(::pulse::cdm::bind::ActionData* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete action_;
  }
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    
  } else {
    
  }
  action_ = action;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AdvanceTimeData.Action)
}

// .pulse.cdm.bind.ScalarTimeData Time = 2;
inline bool AdvanceTimeData::_internal_has_time() const {
  return this != internal_default_instance() && time_ != nullptr;
}
inline bool AdvanceTimeData::has_time() const {
  return _internal_has_time();
}
inline const ::pulse::cdm::bind::ScalarTimeData& AdvanceTimeData::_internal_time() const {
  const ::pulse::cdm::bind::ScalarTimeData* p = time_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarTimeData*>(
      &::pulse::cdm::bind::_ScalarTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarTimeData& AdvanceTimeData::time() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AdvanceTimeData.Time)
  return _internal_time();
}
inline ::pulse::cdm::bind::ScalarTimeData* AdvanceTimeData::release_time() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AdvanceTimeData.Time)
  
  ::pulse::cdm::bind::ScalarTimeData* temp = time_;
  time_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* AdvanceTimeData::_internal_mutable_time() {
  
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarTimeData>(GetArenaNoVirtual());
    time_ = p;
  }
  return time_;
}
inline ::pulse::cdm::bind::ScalarTimeData* AdvanceTimeData::mutable_time() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AdvanceTimeData.Time)
  return _internal_mutable_time();
}
inline void AdvanceTimeData::set_allocated_time(::pulse::cdm::bind::ScalarTimeData* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AdvanceTimeData.Time)
}

// -------------------------------------------------------------------

// SerializeStateData

// .pulse.cdm.bind.ActionData Action = 1;
inline bool SerializeStateData::_internal_has_action() const {
  return this != internal_default_instance() && action_ != nullptr;
}
inline bool SerializeStateData::has_action() const {
  return _internal_has_action();
}
inline void SerializeStateData::clear_action() {
  if (GetArenaNoVirtual() == nullptr && action_ != nullptr) {
    delete action_;
  }
  action_ = nullptr;
}
inline const ::pulse::cdm::bind::ActionData& SerializeStateData::_internal_action() const {
  const ::pulse::cdm::bind::ActionData* p = action_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ActionData*>(
      &::pulse::cdm::bind::_ActionData_default_instance_);
}
inline const ::pulse::cdm::bind::ActionData& SerializeStateData::action() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SerializeStateData.Action)
  return _internal_action();
}
inline ::pulse::cdm::bind::ActionData* SerializeStateData::release_action() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SerializeStateData.Action)
  
  ::pulse::cdm::bind::ActionData* temp = action_;
  action_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ActionData* SerializeStateData::_internal_mutable_action() {
  
  if (action_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ActionData>(GetArenaNoVirtual());
    action_ = p;
  }
  return action_;
}
inline ::pulse::cdm::bind::ActionData* SerializeStateData::mutable_action() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SerializeStateData.Action)
  return _internal_mutable_action();
}
inline void SerializeStateData::set_allocated_action(::pulse::cdm::bind::ActionData* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete action_;
  }
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    
  } else {
    
  }
  action_ = action;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SerializeStateData.Action)
}

// .pulse.cdm.bind.SerializeStateData.eType Type = 2;
inline void SerializeStateData::clear_type() {
  type_ = 0;
}
inline ::pulse::cdm::bind::SerializeStateData_eType SerializeStateData::_internal_type() const {
  return static_cast< ::pulse::cdm::bind::SerializeStateData_eType >(type_);
}
inline ::pulse::cdm::bind::SerializeStateData_eType SerializeStateData::type() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SerializeStateData.Type)
  return _internal_type();
}
inline void SerializeStateData::_internal_set_type(::pulse::cdm::bind::SerializeStateData_eType value) {
  
  type_ = value;
}
inline void SerializeStateData::set_type(::pulse::cdm::bind::SerializeStateData_eType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.SerializeStateData.Type)
}

// string Filename = 3;
inline void SerializeStateData::clear_filename() {
  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SerializeStateData::filename() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SerializeStateData.Filename)
  return _internal_filename();
}
inline void SerializeStateData::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.SerializeStateData.Filename)
}
inline std::string* SerializeStateData::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SerializeStateData.Filename)
  return _internal_mutable_filename();
}
inline const std::string& SerializeStateData::_internal_filename() const {
  return filename_.GetNoArena();
}
inline void SerializeStateData::_internal_set_filename(const std::string& value) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SerializeStateData::set_filename(std::string&& value) {
  
  filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.SerializeStateData.Filename)
}
inline void SerializeStateData::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.SerializeStateData.Filename)
}
inline void SerializeStateData::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.SerializeStateData.Filename)
}
inline std::string* SerializeStateData::_internal_mutable_filename() {
  
  return filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SerializeStateData::release_filename() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SerializeStateData.Filename)
  
  return filename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SerializeStateData::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SerializeStateData.Filename)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bind
}  // namespace cdm
}  // namespace pulse

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pulse::cdm::bind::SerializeStateData_eType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pulse::cdm::bind::SerializeStateData_eType>() {
  return ::pulse::cdm::bind::SerializeStateData_eType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fActions_2eproto
