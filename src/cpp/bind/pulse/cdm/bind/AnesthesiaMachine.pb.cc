// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/AnesthesiaMachine.proto

#include "pulse/cdm/bind/AnesthesiaMachine.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AnesthesiaMachineChamberData_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AnesthesiaMachineOxygenBottleData_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarFrequencyData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarPressureData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarVolumePerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class AnesthesiaMachineChamberDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnesthesiaMachineChamberData> _instance;
} _AnesthesiaMachineChamberData_default_instance_;
class AnesthesiaMachineOxygenBottleDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnesthesiaMachineOxygenBottleData> _instance;
} _AnesthesiaMachineOxygenBottleData_default_instance_;
class AnesthesiaMachineDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnesthesiaMachineData> _instance;
} _AnesthesiaMachineData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
static void InitDefaultsscc_info_AnesthesiaMachineChamberData_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_AnesthesiaMachineChamberData_default_instance_;
    new (ptr) ::pulse::cdm::bind::AnesthesiaMachineChamberData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pulse::cdm::bind::AnesthesiaMachineChamberData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AnesthesiaMachineChamberData_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AnesthesiaMachineChamberData_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto}, {
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_AnesthesiaMachineData_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_AnesthesiaMachineData_default_instance_;
    new (ptr) ::pulse::cdm::bind::AnesthesiaMachineData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pulse::cdm::bind::AnesthesiaMachineData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_AnesthesiaMachineData_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_AnesthesiaMachineData_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto}, {
      &scc_info_ScalarVolumePerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarPressureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarFrequencyData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_AnesthesiaMachineChamberData_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto.base,
      &scc_info_AnesthesiaMachineOxygenBottleData_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto.base,}};

static void InitDefaultsscc_info_AnesthesiaMachineOxygenBottleData_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_AnesthesiaMachineOxygenBottleData_default_instance_;
    new (ptr) ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AnesthesiaMachineOxygenBottleData_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AnesthesiaMachineOxygenBottleData_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto}, {
      &scc_info_ScalarVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineChamberData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineChamberData, state_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineChamberData, substancefraction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineChamberData, substance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData, volume_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineData, connection_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineData, inletflow_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineData, inspiratoryexpiratoryratio_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineData, oxygenfraction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineData, oxygensource_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineData, positiveendexpiredpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineData, primarygas_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineData, reliefvalvepressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineData, respiratoryrate_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineData, ventilatorpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineData, leftchamber_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineData, rightchamber_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineData, oxygenbottleone_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineData, oxygenbottletwo_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pulse::cdm::bind::AnesthesiaMachineChamberData)},
  { 8, -1, sizeof(::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData)},
  { 14, -1, sizeof(::pulse::cdm::bind::AnesthesiaMachineData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_AnesthesiaMachineChamberData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_AnesthesiaMachineOxygenBottleData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_AnesthesiaMachineData_default_instance_),
};

const char descriptor_table_protodef_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&pulse/cdm/bind/AnesthesiaMachine.proto"
  "\022\016pulse.cdm.bind\032\032pulse/cdm/bind/Enums.p"
  "roto\032\037pulse/cdm/bind/Properties.proto\"\224\001"
  "\n\034AnesthesiaMachineChamberData\022&\n\005State\030"
  "\001 \001(\0162\027.pulse.cdm.bind.eSwitch\0229\n\021Substa"
  "nceFraction\030\002 \001(\0132\036.pulse.cdm.bind.Scala"
  "r0To1Data\022\021\n\tSubstance\030\003 \001(\t\"U\n!Anesthes"
  "iaMachineOxygenBottleData\0220\n\006Volume\030\001 \001("
  "\0132 .pulse.cdm.bind.ScalarVolumeData\"\237\t\n\025"
  "AnesthesiaMachineData\022E\n\nConnection\030\001 \001("
  "\01621.pulse.cdm.bind.AnesthesiaMachineData"
  ".eConnection\022:\n\tInletFlow\030\002 \001(\0132\'.pulse."
  "cdm.bind.ScalarVolumePerTimeData\022>\n\032Insp"
  "iratoryExpiratoryRatio\030\003 \001(\0132\032.pulse.cdm"
  ".bind.ScalarData\0226\n\016OxygenFraction\030\004 \001(\013"
  "2\036.pulse.cdm.bind.Scalar0To1Data\022I\n\014Oxyg"
  "enSource\030\005 \001(\01623.pulse.cdm.bind.Anesthes"
  "iaMachineData.eOxygenSource\022F\n\032PositiveE"
  "ndExpiredPressure\030\006 \001(\0132\".pulse.cdm.bind"
  ".ScalarPressureData\022E\n\nPrimaryGas\030\007 \001(\0162"
  "1.pulse.cdm.bind.AnesthesiaMachineData.e"
  "PrimaryGas\022\?\n\023ReliefValvePressure\030\010 \001(\0132"
  "\".pulse.cdm.bind.ScalarPressureData\022<\n\017R"
  "espiratoryRate\030\t \001(\0132#.pulse.cdm.bind.Sc"
  "alarFrequencyData\022>\n\022VentilatorPressure\030"
  "\n \001(\0132\".pulse.cdm.bind.ScalarPressureDat"
  "a\022A\n\013LeftChamber\030\013 \001(\0132,.pulse.cdm.bind."
  "AnesthesiaMachineChamberData\022B\n\014RightCha"
  "mber\030\014 \001(\0132,.pulse.cdm.bind.AnesthesiaMa"
  "chineChamberData\022J\n\017OxygenBottleOne\030\r \001("
  "\01321.pulse.cdm.bind.AnesthesiaMachineOxyg"
  "enBottleData\022J\n\017OxygenBottleTwo\030\016 \001(\01321."
  "pulse.cdm.bind.AnesthesiaMachineOxygenBo"
  "ttleData\">\n\013eConnection\022\022\n\016NullConnectio"
  "n\020\000\022\007\n\003Off\020\001\022\010\n\004Mask\020\002\022\010\n\004Tube\020\003\"U\n\reOxy"
  "genSource\022\016\n\nNullSource\020\000\022\014\n\010NoSource\020\001\022"
  "\010\n\004Wall\020\002\022\r\n\tBottleOne\020\003\022\r\n\tBottleTwo\020\004\""
  "<\n\013ePrimaryGas\022\013\n\007NullGas\020\000\022\t\n\005NoGas\020\001\022\007"
  "\n\003Air\020\002\022\014\n\010Nitrogen\020\003B#\n\016pulse.cdm.bindH"
  "\001\252\002\016pulse.cdm.bindb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto_deps[2] = {
  &::descriptor_table_pulse_2fcdm_2fbind_2fEnums_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto_sccs[3] = {
  &scc_info_AnesthesiaMachineChamberData_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto.base,
  &scc_info_AnesthesiaMachineData_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto.base,
  &scc_info_AnesthesiaMachineOxygenBottleData_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto_once;
static bool descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto = {
  &descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto_initialized, descriptor_table_protodef_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto, "pulse/cdm/bind/AnesthesiaMachine.proto", 1586,
  &descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto_once, descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto_sccs, descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto_deps, 3, 2,
  schemas, file_default_instances, TableStruct_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto::offsets,
  file_level_metadata_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto, 3, file_level_enum_descriptors_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto, file_level_service_descriptors_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto), true);
namespace pulse {
namespace cdm {
namespace bind {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AnesthesiaMachineData_eConnection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto);
  return file_level_enum_descriptors_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto[0];
}
bool AnesthesiaMachineData_eConnection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AnesthesiaMachineData_eConnection AnesthesiaMachineData::NullConnection;
constexpr AnesthesiaMachineData_eConnection AnesthesiaMachineData::Off;
constexpr AnesthesiaMachineData_eConnection AnesthesiaMachineData::Mask;
constexpr AnesthesiaMachineData_eConnection AnesthesiaMachineData::Tube;
constexpr AnesthesiaMachineData_eConnection AnesthesiaMachineData::eConnection_MIN;
constexpr AnesthesiaMachineData_eConnection AnesthesiaMachineData::eConnection_MAX;
constexpr int AnesthesiaMachineData::eConnection_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AnesthesiaMachineData_eOxygenSource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto);
  return file_level_enum_descriptors_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto[1];
}
bool AnesthesiaMachineData_eOxygenSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AnesthesiaMachineData_eOxygenSource AnesthesiaMachineData::NullSource;
constexpr AnesthesiaMachineData_eOxygenSource AnesthesiaMachineData::NoSource;
constexpr AnesthesiaMachineData_eOxygenSource AnesthesiaMachineData::Wall;
constexpr AnesthesiaMachineData_eOxygenSource AnesthesiaMachineData::BottleOne;
constexpr AnesthesiaMachineData_eOxygenSource AnesthesiaMachineData::BottleTwo;
constexpr AnesthesiaMachineData_eOxygenSource AnesthesiaMachineData::eOxygenSource_MIN;
constexpr AnesthesiaMachineData_eOxygenSource AnesthesiaMachineData::eOxygenSource_MAX;
constexpr int AnesthesiaMachineData::eOxygenSource_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AnesthesiaMachineData_ePrimaryGas_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto);
  return file_level_enum_descriptors_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto[2];
}
bool AnesthesiaMachineData_ePrimaryGas_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AnesthesiaMachineData_ePrimaryGas AnesthesiaMachineData::NullGas;
constexpr AnesthesiaMachineData_ePrimaryGas AnesthesiaMachineData::NoGas;
constexpr AnesthesiaMachineData_ePrimaryGas AnesthesiaMachineData::Air;
constexpr AnesthesiaMachineData_ePrimaryGas AnesthesiaMachineData::Nitrogen;
constexpr AnesthesiaMachineData_ePrimaryGas AnesthesiaMachineData::ePrimaryGas_MIN;
constexpr AnesthesiaMachineData_ePrimaryGas AnesthesiaMachineData::ePrimaryGas_MAX;
constexpr int AnesthesiaMachineData::ePrimaryGas_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void AnesthesiaMachineChamberData::InitAsDefaultInstance() {
  ::pulse::cdm::bind::_AnesthesiaMachineChamberData_default_instance_._instance.get_mutable()->substancefraction_ = const_cast< ::pulse::cdm::bind::Scalar0To1Data*>(
      ::pulse::cdm::bind::Scalar0To1Data::internal_default_instance());
}
class AnesthesiaMachineChamberData::_Internal {
 public:
  static const ::pulse::cdm::bind::Scalar0To1Data& substancefraction(const AnesthesiaMachineChamberData* msg);
};

const ::pulse::cdm::bind::Scalar0To1Data&
AnesthesiaMachineChamberData::_Internal::substancefraction(const AnesthesiaMachineChamberData* msg) {
  return *msg->substancefraction_;
}
void AnesthesiaMachineChamberData::clear_substancefraction() {
  if (GetArenaNoVirtual() == nullptr && substancefraction_ != nullptr) {
    delete substancefraction_;
  }
  substancefraction_ = nullptr;
}
AnesthesiaMachineChamberData::AnesthesiaMachineChamberData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pulse.cdm.bind.AnesthesiaMachineChamberData)
}
AnesthesiaMachineChamberData::AnesthesiaMachineChamberData(const AnesthesiaMachineChamberData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  substance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_substance().empty()) {
    substance_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.substance_);
  }
  if (from._internal_has_substancefraction()) {
    substancefraction_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.substancefraction_);
  } else {
    substancefraction_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.AnesthesiaMachineChamberData)
}

void AnesthesiaMachineChamberData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnesthesiaMachineChamberData_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto.base);
  substance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&substancefraction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&substancefraction_)) + sizeof(state_));
}

AnesthesiaMachineChamberData::~AnesthesiaMachineChamberData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.AnesthesiaMachineChamberData)
  SharedDtor();
}

void AnesthesiaMachineChamberData::SharedDtor() {
  substance_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete substancefraction_;
}

void AnesthesiaMachineChamberData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnesthesiaMachineChamberData& AnesthesiaMachineChamberData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnesthesiaMachineChamberData_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto.base);
  return *internal_default_instance();
}


void AnesthesiaMachineChamberData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.AnesthesiaMachineChamberData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  substance_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && substancefraction_ != nullptr) {
    delete substancefraction_;
  }
  substancefraction_ = nullptr;
  state_ = 0;
  _internal_metadata_.Clear();
}

const char* AnesthesiaMachineChamberData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.eSwitch State = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::pulse::cdm::bind::eSwitch>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data SubstanceFraction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_substancefraction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Substance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_substance(), ptr, ctx, "pulse.cdm.bind.AnesthesiaMachineChamberData.Substance");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnesthesiaMachineChamberData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.AnesthesiaMachineChamberData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.eSwitch State = 1;
  if (this->state() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  // .pulse.cdm.bind.Scalar0To1Data SubstanceFraction = 2;
  if (this->has_substancefraction()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::substancefraction(this), target, stream);
  }

  // string Substance = 3;
  if (this->substance().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_substance().data(), static_cast<int>(this->_internal_substance().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.AnesthesiaMachineChamberData.Substance");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_substance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.AnesthesiaMachineChamberData)
  return target;
}

size_t AnesthesiaMachineChamberData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.AnesthesiaMachineChamberData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Substance = 3;
  if (this->substance().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_substance());
  }

  // .pulse.cdm.bind.Scalar0To1Data SubstanceFraction = 2;
  if (this->has_substancefraction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *substancefraction_);
  }

  // .pulse.cdm.bind.eSwitch State = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnesthesiaMachineChamberData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.AnesthesiaMachineChamberData)
  GOOGLE_DCHECK_NE(&from, this);
  const AnesthesiaMachineChamberData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnesthesiaMachineChamberData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.AnesthesiaMachineChamberData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.AnesthesiaMachineChamberData)
    MergeFrom(*source);
  }
}

void AnesthesiaMachineChamberData::MergeFrom(const AnesthesiaMachineChamberData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.AnesthesiaMachineChamberData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.substance().size() > 0) {

    substance_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.substance_);
  }
  if (from.has_substancefraction()) {
    _internal_mutable_substancefraction()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_substancefraction());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void AnesthesiaMachineChamberData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.AnesthesiaMachineChamberData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnesthesiaMachineChamberData::CopyFrom(const AnesthesiaMachineChamberData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.AnesthesiaMachineChamberData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnesthesiaMachineChamberData::IsInitialized() const {
  return true;
}

void AnesthesiaMachineChamberData::InternalSwap(AnesthesiaMachineChamberData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  substance_.Swap(&other->substance_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(substancefraction_, other->substancefraction_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnesthesiaMachineChamberData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnesthesiaMachineOxygenBottleData::InitAsDefaultInstance() {
  ::pulse::cdm::bind::_AnesthesiaMachineOxygenBottleData_default_instance_._instance.get_mutable()->volume_ = const_cast< ::pulse::cdm::bind::ScalarVolumeData*>(
      ::pulse::cdm::bind::ScalarVolumeData::internal_default_instance());
}
class AnesthesiaMachineOxygenBottleData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarVolumeData& volume(const AnesthesiaMachineOxygenBottleData* msg);
};

const ::pulse::cdm::bind::ScalarVolumeData&
AnesthesiaMachineOxygenBottleData::_Internal::volume(const AnesthesiaMachineOxygenBottleData* msg) {
  return *msg->volume_;
}
void AnesthesiaMachineOxygenBottleData::clear_volume() {
  if (GetArenaNoVirtual() == nullptr && volume_ != nullptr) {
    delete volume_;
  }
  volume_ = nullptr;
}
AnesthesiaMachineOxygenBottleData::AnesthesiaMachineOxygenBottleData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pulse.cdm.bind.AnesthesiaMachineOxygenBottleData)
}
AnesthesiaMachineOxygenBottleData::AnesthesiaMachineOxygenBottleData(const AnesthesiaMachineOxygenBottleData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_volume()) {
    volume_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.volume_);
  } else {
    volume_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.AnesthesiaMachineOxygenBottleData)
}

void AnesthesiaMachineOxygenBottleData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnesthesiaMachineOxygenBottleData_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto.base);
  volume_ = nullptr;
}

AnesthesiaMachineOxygenBottleData::~AnesthesiaMachineOxygenBottleData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.AnesthesiaMachineOxygenBottleData)
  SharedDtor();
}

void AnesthesiaMachineOxygenBottleData::SharedDtor() {
  if (this != internal_default_instance()) delete volume_;
}

void AnesthesiaMachineOxygenBottleData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnesthesiaMachineOxygenBottleData& AnesthesiaMachineOxygenBottleData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnesthesiaMachineOxygenBottleData_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto.base);
  return *internal_default_instance();
}


void AnesthesiaMachineOxygenBottleData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.AnesthesiaMachineOxygenBottleData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && volume_ != nullptr) {
    delete volume_;
  }
  volume_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AnesthesiaMachineOxygenBottleData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarVolumeData Volume = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_volume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnesthesiaMachineOxygenBottleData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.AnesthesiaMachineOxygenBottleData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarVolumeData Volume = 1;
  if (this->has_volume()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::volume(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.AnesthesiaMachineOxygenBottleData)
  return target;
}

size_t AnesthesiaMachineOxygenBottleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.AnesthesiaMachineOxygenBottleData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarVolumeData Volume = 1;
  if (this->has_volume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *volume_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnesthesiaMachineOxygenBottleData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.AnesthesiaMachineOxygenBottleData)
  GOOGLE_DCHECK_NE(&from, this);
  const AnesthesiaMachineOxygenBottleData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnesthesiaMachineOxygenBottleData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.AnesthesiaMachineOxygenBottleData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.AnesthesiaMachineOxygenBottleData)
    MergeFrom(*source);
  }
}

void AnesthesiaMachineOxygenBottleData::MergeFrom(const AnesthesiaMachineOxygenBottleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.AnesthesiaMachineOxygenBottleData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_volume()) {
    _internal_mutable_volume()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_volume());
  }
}

void AnesthesiaMachineOxygenBottleData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.AnesthesiaMachineOxygenBottleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnesthesiaMachineOxygenBottleData::CopyFrom(const AnesthesiaMachineOxygenBottleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.AnesthesiaMachineOxygenBottleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnesthesiaMachineOxygenBottleData::IsInitialized() const {
  return true;
}

void AnesthesiaMachineOxygenBottleData::InternalSwap(AnesthesiaMachineOxygenBottleData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(volume_, other->volume_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnesthesiaMachineOxygenBottleData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnesthesiaMachineData::InitAsDefaultInstance() {
  ::pulse::cdm::bind::_AnesthesiaMachineData_default_instance_._instance.get_mutable()->inletflow_ = const_cast< ::pulse::cdm::bind::ScalarVolumePerTimeData*>(
      ::pulse::cdm::bind::ScalarVolumePerTimeData::internal_default_instance());
  ::pulse::cdm::bind::_AnesthesiaMachineData_default_instance_._instance.get_mutable()->inspiratoryexpiratoryratio_ = const_cast< ::pulse::cdm::bind::ScalarData*>(
      ::pulse::cdm::bind::ScalarData::internal_default_instance());
  ::pulse::cdm::bind::_AnesthesiaMachineData_default_instance_._instance.get_mutable()->oxygenfraction_ = const_cast< ::pulse::cdm::bind::Scalar0To1Data*>(
      ::pulse::cdm::bind::Scalar0To1Data::internal_default_instance());
  ::pulse::cdm::bind::_AnesthesiaMachineData_default_instance_._instance.get_mutable()->positiveendexpiredpressure_ = const_cast< ::pulse::cdm::bind::ScalarPressureData*>(
      ::pulse::cdm::bind::ScalarPressureData::internal_default_instance());
  ::pulse::cdm::bind::_AnesthesiaMachineData_default_instance_._instance.get_mutable()->reliefvalvepressure_ = const_cast< ::pulse::cdm::bind::ScalarPressureData*>(
      ::pulse::cdm::bind::ScalarPressureData::internal_default_instance());
  ::pulse::cdm::bind::_AnesthesiaMachineData_default_instance_._instance.get_mutable()->respiratoryrate_ = const_cast< ::pulse::cdm::bind::ScalarFrequencyData*>(
      ::pulse::cdm::bind::ScalarFrequencyData::internal_default_instance());
  ::pulse::cdm::bind::_AnesthesiaMachineData_default_instance_._instance.get_mutable()->ventilatorpressure_ = const_cast< ::pulse::cdm::bind::ScalarPressureData*>(
      ::pulse::cdm::bind::ScalarPressureData::internal_default_instance());
  ::pulse::cdm::bind::_AnesthesiaMachineData_default_instance_._instance.get_mutable()->leftchamber_ = const_cast< ::pulse::cdm::bind::AnesthesiaMachineChamberData*>(
      ::pulse::cdm::bind::AnesthesiaMachineChamberData::internal_default_instance());
  ::pulse::cdm::bind::_AnesthesiaMachineData_default_instance_._instance.get_mutable()->rightchamber_ = const_cast< ::pulse::cdm::bind::AnesthesiaMachineChamberData*>(
      ::pulse::cdm::bind::AnesthesiaMachineChamberData::internal_default_instance());
  ::pulse::cdm::bind::_AnesthesiaMachineData_default_instance_._instance.get_mutable()->oxygenbottleone_ = const_cast< ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData*>(
      ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData::internal_default_instance());
  ::pulse::cdm::bind::_AnesthesiaMachineData_default_instance_._instance.get_mutable()->oxygenbottletwo_ = const_cast< ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData*>(
      ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData::internal_default_instance());
}
class AnesthesiaMachineData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarVolumePerTimeData& inletflow(const AnesthesiaMachineData* msg);
  static const ::pulse::cdm::bind::ScalarData& inspiratoryexpiratoryratio(const AnesthesiaMachineData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& oxygenfraction(const AnesthesiaMachineData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& positiveendexpiredpressure(const AnesthesiaMachineData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& reliefvalvepressure(const AnesthesiaMachineData* msg);
  static const ::pulse::cdm::bind::ScalarFrequencyData& respiratoryrate(const AnesthesiaMachineData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& ventilatorpressure(const AnesthesiaMachineData* msg);
  static const ::pulse::cdm::bind::AnesthesiaMachineChamberData& leftchamber(const AnesthesiaMachineData* msg);
  static const ::pulse::cdm::bind::AnesthesiaMachineChamberData& rightchamber(const AnesthesiaMachineData* msg);
  static const ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData& oxygenbottleone(const AnesthesiaMachineData* msg);
  static const ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData& oxygenbottletwo(const AnesthesiaMachineData* msg);
};

const ::pulse::cdm::bind::ScalarVolumePerTimeData&
AnesthesiaMachineData::_Internal::inletflow(const AnesthesiaMachineData* msg) {
  return *msg->inletflow_;
}
const ::pulse::cdm::bind::ScalarData&
AnesthesiaMachineData::_Internal::inspiratoryexpiratoryratio(const AnesthesiaMachineData* msg) {
  return *msg->inspiratoryexpiratoryratio_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
AnesthesiaMachineData::_Internal::oxygenfraction(const AnesthesiaMachineData* msg) {
  return *msg->oxygenfraction_;
}
const ::pulse::cdm::bind::ScalarPressureData&
AnesthesiaMachineData::_Internal::positiveendexpiredpressure(const AnesthesiaMachineData* msg) {
  return *msg->positiveendexpiredpressure_;
}
const ::pulse::cdm::bind::ScalarPressureData&
AnesthesiaMachineData::_Internal::reliefvalvepressure(const AnesthesiaMachineData* msg) {
  return *msg->reliefvalvepressure_;
}
const ::pulse::cdm::bind::ScalarFrequencyData&
AnesthesiaMachineData::_Internal::respiratoryrate(const AnesthesiaMachineData* msg) {
  return *msg->respiratoryrate_;
}
const ::pulse::cdm::bind::ScalarPressureData&
AnesthesiaMachineData::_Internal::ventilatorpressure(const AnesthesiaMachineData* msg) {
  return *msg->ventilatorpressure_;
}
const ::pulse::cdm::bind::AnesthesiaMachineChamberData&
AnesthesiaMachineData::_Internal::leftchamber(const AnesthesiaMachineData* msg) {
  return *msg->leftchamber_;
}
const ::pulse::cdm::bind::AnesthesiaMachineChamberData&
AnesthesiaMachineData::_Internal::rightchamber(const AnesthesiaMachineData* msg) {
  return *msg->rightchamber_;
}
const ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData&
AnesthesiaMachineData::_Internal::oxygenbottleone(const AnesthesiaMachineData* msg) {
  return *msg->oxygenbottleone_;
}
const ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData&
AnesthesiaMachineData::_Internal::oxygenbottletwo(const AnesthesiaMachineData* msg) {
  return *msg->oxygenbottletwo_;
}
void AnesthesiaMachineData::clear_inletflow() {
  if (GetArenaNoVirtual() == nullptr && inletflow_ != nullptr) {
    delete inletflow_;
  }
  inletflow_ = nullptr;
}
void AnesthesiaMachineData::clear_inspiratoryexpiratoryratio() {
  if (GetArenaNoVirtual() == nullptr && inspiratoryexpiratoryratio_ != nullptr) {
    delete inspiratoryexpiratoryratio_;
  }
  inspiratoryexpiratoryratio_ = nullptr;
}
void AnesthesiaMachineData::clear_oxygenfraction() {
  if (GetArenaNoVirtual() == nullptr && oxygenfraction_ != nullptr) {
    delete oxygenfraction_;
  }
  oxygenfraction_ = nullptr;
}
void AnesthesiaMachineData::clear_positiveendexpiredpressure() {
  if (GetArenaNoVirtual() == nullptr && positiveendexpiredpressure_ != nullptr) {
    delete positiveendexpiredpressure_;
  }
  positiveendexpiredpressure_ = nullptr;
}
void AnesthesiaMachineData::clear_reliefvalvepressure() {
  if (GetArenaNoVirtual() == nullptr && reliefvalvepressure_ != nullptr) {
    delete reliefvalvepressure_;
  }
  reliefvalvepressure_ = nullptr;
}
void AnesthesiaMachineData::clear_respiratoryrate() {
  if (GetArenaNoVirtual() == nullptr && respiratoryrate_ != nullptr) {
    delete respiratoryrate_;
  }
  respiratoryrate_ = nullptr;
}
void AnesthesiaMachineData::clear_ventilatorpressure() {
  if (GetArenaNoVirtual() == nullptr && ventilatorpressure_ != nullptr) {
    delete ventilatorpressure_;
  }
  ventilatorpressure_ = nullptr;
}
AnesthesiaMachineData::AnesthesiaMachineData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pulse.cdm.bind.AnesthesiaMachineData)
}
AnesthesiaMachineData::AnesthesiaMachineData(const AnesthesiaMachineData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_inletflow()) {
    inletflow_ = new ::pulse::cdm::bind::ScalarVolumePerTimeData(*from.inletflow_);
  } else {
    inletflow_ = nullptr;
  }
  if (from._internal_has_inspiratoryexpiratoryratio()) {
    inspiratoryexpiratoryratio_ = new ::pulse::cdm::bind::ScalarData(*from.inspiratoryexpiratoryratio_);
  } else {
    inspiratoryexpiratoryratio_ = nullptr;
  }
  if (from._internal_has_oxygenfraction()) {
    oxygenfraction_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.oxygenfraction_);
  } else {
    oxygenfraction_ = nullptr;
  }
  if (from._internal_has_positiveendexpiredpressure()) {
    positiveendexpiredpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.positiveendexpiredpressure_);
  } else {
    positiveendexpiredpressure_ = nullptr;
  }
  if (from._internal_has_reliefvalvepressure()) {
    reliefvalvepressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.reliefvalvepressure_);
  } else {
    reliefvalvepressure_ = nullptr;
  }
  if (from._internal_has_respiratoryrate()) {
    respiratoryrate_ = new ::pulse::cdm::bind::ScalarFrequencyData(*from.respiratoryrate_);
  } else {
    respiratoryrate_ = nullptr;
  }
  if (from._internal_has_ventilatorpressure()) {
    ventilatorpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.ventilatorpressure_);
  } else {
    ventilatorpressure_ = nullptr;
  }
  if (from._internal_has_leftchamber()) {
    leftchamber_ = new ::pulse::cdm::bind::AnesthesiaMachineChamberData(*from.leftchamber_);
  } else {
    leftchamber_ = nullptr;
  }
  if (from._internal_has_rightchamber()) {
    rightchamber_ = new ::pulse::cdm::bind::AnesthesiaMachineChamberData(*from.rightchamber_);
  } else {
    rightchamber_ = nullptr;
  }
  if (from._internal_has_oxygenbottleone()) {
    oxygenbottleone_ = new ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData(*from.oxygenbottleone_);
  } else {
    oxygenbottleone_ = nullptr;
  }
  if (from._internal_has_oxygenbottletwo()) {
    oxygenbottletwo_ = new ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData(*from.oxygenbottletwo_);
  } else {
    oxygenbottletwo_ = nullptr;
  }
  ::memcpy(&connection_, &from.connection_,
    static_cast<size_t>(reinterpret_cast<char*>(&primarygas_) -
    reinterpret_cast<char*>(&connection_)) + sizeof(primarygas_));
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.AnesthesiaMachineData)
}

void AnesthesiaMachineData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnesthesiaMachineData_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto.base);
  ::memset(&inletflow_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&primarygas_) -
      reinterpret_cast<char*>(&inletflow_)) + sizeof(primarygas_));
}

AnesthesiaMachineData::~AnesthesiaMachineData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.AnesthesiaMachineData)
  SharedDtor();
}

void AnesthesiaMachineData::SharedDtor() {
  if (this != internal_default_instance()) delete inletflow_;
  if (this != internal_default_instance()) delete inspiratoryexpiratoryratio_;
  if (this != internal_default_instance()) delete oxygenfraction_;
  if (this != internal_default_instance()) delete positiveendexpiredpressure_;
  if (this != internal_default_instance()) delete reliefvalvepressure_;
  if (this != internal_default_instance()) delete respiratoryrate_;
  if (this != internal_default_instance()) delete ventilatorpressure_;
  if (this != internal_default_instance()) delete leftchamber_;
  if (this != internal_default_instance()) delete rightchamber_;
  if (this != internal_default_instance()) delete oxygenbottleone_;
  if (this != internal_default_instance()) delete oxygenbottletwo_;
}

void AnesthesiaMachineData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnesthesiaMachineData& AnesthesiaMachineData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnesthesiaMachineData_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto.base);
  return *internal_default_instance();
}


void AnesthesiaMachineData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.AnesthesiaMachineData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && inletflow_ != nullptr) {
    delete inletflow_;
  }
  inletflow_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && inspiratoryexpiratoryratio_ != nullptr) {
    delete inspiratoryexpiratoryratio_;
  }
  inspiratoryexpiratoryratio_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && oxygenfraction_ != nullptr) {
    delete oxygenfraction_;
  }
  oxygenfraction_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && positiveendexpiredpressure_ != nullptr) {
    delete positiveendexpiredpressure_;
  }
  positiveendexpiredpressure_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && reliefvalvepressure_ != nullptr) {
    delete reliefvalvepressure_;
  }
  reliefvalvepressure_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && respiratoryrate_ != nullptr) {
    delete respiratoryrate_;
  }
  respiratoryrate_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ventilatorpressure_ != nullptr) {
    delete ventilatorpressure_;
  }
  ventilatorpressure_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && leftchamber_ != nullptr) {
    delete leftchamber_;
  }
  leftchamber_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && rightchamber_ != nullptr) {
    delete rightchamber_;
  }
  rightchamber_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && oxygenbottleone_ != nullptr) {
    delete oxygenbottleone_;
  }
  oxygenbottleone_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && oxygenbottletwo_ != nullptr) {
    delete oxygenbottletwo_;
  }
  oxygenbottletwo_ = nullptr;
  ::memset(&connection_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&primarygas_) -
      reinterpret_cast<char*>(&connection_)) + sizeof(primarygas_));
  _internal_metadata_.Clear();
}

const char* AnesthesiaMachineData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.AnesthesiaMachineData.eConnection Connection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_connection(static_cast<::pulse::cdm::bind::AnesthesiaMachineData_eConnection>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeData InletFlow = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_inletflow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData InspiratoryExpiratoryRatio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_inspiratoryexpiratoryratio(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data OxygenFraction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_oxygenfraction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.AnesthesiaMachineData.eOxygenSource OxygenSource = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_oxygensource(static_cast<::pulse::cdm::bind::AnesthesiaMachineData_eOxygenSource>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData PositiveEndExpiredPressure = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_positiveendexpiredpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.AnesthesiaMachineData.ePrimaryGas PrimaryGas = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_primarygas(static_cast<::pulse::cdm::bind::AnesthesiaMachineData_ePrimaryGas>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData ReliefValvePressure = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_reliefvalvepressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarFrequencyData RespiratoryRate = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_respiratoryrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData VentilatorPressure = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_ventilatorpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.AnesthesiaMachineChamberData LeftChamber = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_leftchamber(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.AnesthesiaMachineChamberData RightChamber = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_rightchamber(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.AnesthesiaMachineOxygenBottleData OxygenBottleOne = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_oxygenbottleone(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.AnesthesiaMachineOxygenBottleData OxygenBottleTwo = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_oxygenbottletwo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnesthesiaMachineData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.AnesthesiaMachineData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.AnesthesiaMachineData.eConnection Connection = 1;
  if (this->connection() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_connection(), target);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData InletFlow = 2;
  if (this->has_inletflow()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::inletflow(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarData InspiratoryExpiratoryRatio = 3;
  if (this->has_inspiratoryexpiratoryratio()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::inspiratoryexpiratoryratio(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data OxygenFraction = 4;
  if (this->has_oxygenfraction()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::oxygenfraction(this), target, stream);
  }

  // .pulse.cdm.bind.AnesthesiaMachineData.eOxygenSource OxygenSource = 5;
  if (this->oxygensource() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_oxygensource(), target);
  }

  // .pulse.cdm.bind.ScalarPressureData PositiveEndExpiredPressure = 6;
  if (this->has_positiveendexpiredpressure()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::positiveendexpiredpressure(this), target, stream);
  }

  // .pulse.cdm.bind.AnesthesiaMachineData.ePrimaryGas PrimaryGas = 7;
  if (this->primarygas() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_primarygas(), target);
  }

  // .pulse.cdm.bind.ScalarPressureData ReliefValvePressure = 8;
  if (this->has_reliefvalvepressure()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::reliefvalvepressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarFrequencyData RespiratoryRate = 9;
  if (this->has_respiratoryrate()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::respiratoryrate(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData VentilatorPressure = 10;
  if (this->has_ventilatorpressure()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::ventilatorpressure(this), target, stream);
  }

  // .pulse.cdm.bind.AnesthesiaMachineChamberData LeftChamber = 11;
  if (this->has_leftchamber()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::leftchamber(this), target, stream);
  }

  // .pulse.cdm.bind.AnesthesiaMachineChamberData RightChamber = 12;
  if (this->has_rightchamber()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, _Internal::rightchamber(this), target, stream);
  }

  // .pulse.cdm.bind.AnesthesiaMachineOxygenBottleData OxygenBottleOne = 13;
  if (this->has_oxygenbottleone()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, _Internal::oxygenbottleone(this), target, stream);
  }

  // .pulse.cdm.bind.AnesthesiaMachineOxygenBottleData OxygenBottleTwo = 14;
  if (this->has_oxygenbottletwo()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, _Internal::oxygenbottletwo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.AnesthesiaMachineData)
  return target;
}

size_t AnesthesiaMachineData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.AnesthesiaMachineData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarVolumePerTimeData InletFlow = 2;
  if (this->has_inletflow()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inletflow_);
  }

  // .pulse.cdm.bind.ScalarData InspiratoryExpiratoryRatio = 3;
  if (this->has_inspiratoryexpiratoryratio()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inspiratoryexpiratoryratio_);
  }

  // .pulse.cdm.bind.Scalar0To1Data OxygenFraction = 4;
  if (this->has_oxygenfraction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *oxygenfraction_);
  }

  // .pulse.cdm.bind.ScalarPressureData PositiveEndExpiredPressure = 6;
  if (this->has_positiveendexpiredpressure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positiveendexpiredpressure_);
  }

  // .pulse.cdm.bind.ScalarPressureData ReliefValvePressure = 8;
  if (this->has_reliefvalvepressure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reliefvalvepressure_);
  }

  // .pulse.cdm.bind.ScalarFrequencyData RespiratoryRate = 9;
  if (this->has_respiratoryrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *respiratoryrate_);
  }

  // .pulse.cdm.bind.ScalarPressureData VentilatorPressure = 10;
  if (this->has_ventilatorpressure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ventilatorpressure_);
  }

  // .pulse.cdm.bind.AnesthesiaMachineChamberData LeftChamber = 11;
  if (this->has_leftchamber()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leftchamber_);
  }

  // .pulse.cdm.bind.AnesthesiaMachineChamberData RightChamber = 12;
  if (this->has_rightchamber()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rightchamber_);
  }

  // .pulse.cdm.bind.AnesthesiaMachineOxygenBottleData OxygenBottleOne = 13;
  if (this->has_oxygenbottleone()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *oxygenbottleone_);
  }

  // .pulse.cdm.bind.AnesthesiaMachineOxygenBottleData OxygenBottleTwo = 14;
  if (this->has_oxygenbottletwo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *oxygenbottletwo_);
  }

  // .pulse.cdm.bind.AnesthesiaMachineData.eConnection Connection = 1;
  if (this->connection() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_connection());
  }

  // .pulse.cdm.bind.AnesthesiaMachineData.eOxygenSource OxygenSource = 5;
  if (this->oxygensource() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_oxygensource());
  }

  // .pulse.cdm.bind.AnesthesiaMachineData.ePrimaryGas PrimaryGas = 7;
  if (this->primarygas() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_primarygas());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnesthesiaMachineData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.AnesthesiaMachineData)
  GOOGLE_DCHECK_NE(&from, this);
  const AnesthesiaMachineData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnesthesiaMachineData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.AnesthesiaMachineData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.AnesthesiaMachineData)
    MergeFrom(*source);
  }
}

void AnesthesiaMachineData::MergeFrom(const AnesthesiaMachineData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.AnesthesiaMachineData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_inletflow()) {
    _internal_mutable_inletflow()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_inletflow());
  }
  if (from.has_inspiratoryexpiratoryratio()) {
    _internal_mutable_inspiratoryexpiratoryratio()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_inspiratoryexpiratoryratio());
  }
  if (from.has_oxygenfraction()) {
    _internal_mutable_oxygenfraction()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_oxygenfraction());
  }
  if (from.has_positiveendexpiredpressure()) {
    _internal_mutable_positiveendexpiredpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_positiveendexpiredpressure());
  }
  if (from.has_reliefvalvepressure()) {
    _internal_mutable_reliefvalvepressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_reliefvalvepressure());
  }
  if (from.has_respiratoryrate()) {
    _internal_mutable_respiratoryrate()->::pulse::cdm::bind::ScalarFrequencyData::MergeFrom(from._internal_respiratoryrate());
  }
  if (from.has_ventilatorpressure()) {
    _internal_mutable_ventilatorpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_ventilatorpressure());
  }
  if (from.has_leftchamber()) {
    _internal_mutable_leftchamber()->::pulse::cdm::bind::AnesthesiaMachineChamberData::MergeFrom(from._internal_leftchamber());
  }
  if (from.has_rightchamber()) {
    _internal_mutable_rightchamber()->::pulse::cdm::bind::AnesthesiaMachineChamberData::MergeFrom(from._internal_rightchamber());
  }
  if (from.has_oxygenbottleone()) {
    _internal_mutable_oxygenbottleone()->::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData::MergeFrom(from._internal_oxygenbottleone());
  }
  if (from.has_oxygenbottletwo()) {
    _internal_mutable_oxygenbottletwo()->::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData::MergeFrom(from._internal_oxygenbottletwo());
  }
  if (from.connection() != 0) {
    _internal_set_connection(from._internal_connection());
  }
  if (from.oxygensource() != 0) {
    _internal_set_oxygensource(from._internal_oxygensource());
  }
  if (from.primarygas() != 0) {
    _internal_set_primarygas(from._internal_primarygas());
  }
}

void AnesthesiaMachineData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.AnesthesiaMachineData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnesthesiaMachineData::CopyFrom(const AnesthesiaMachineData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.AnesthesiaMachineData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnesthesiaMachineData::IsInitialized() const {
  return true;
}

void AnesthesiaMachineData::InternalSwap(AnesthesiaMachineData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(inletflow_, other->inletflow_);
  swap(inspiratoryexpiratoryratio_, other->inspiratoryexpiratoryratio_);
  swap(oxygenfraction_, other->oxygenfraction_);
  swap(positiveendexpiredpressure_, other->positiveendexpiredpressure_);
  swap(reliefvalvepressure_, other->reliefvalvepressure_);
  swap(respiratoryrate_, other->respiratoryrate_);
  swap(ventilatorpressure_, other->ventilatorpressure_);
  swap(leftchamber_, other->leftchamber_);
  swap(rightchamber_, other->rightchamber_);
  swap(oxygenbottleone_, other->oxygenbottleone_);
  swap(oxygenbottletwo_, other->oxygenbottletwo_);
  swap(connection_, other->connection_);
  swap(oxygensource_, other->oxygensource_);
  swap(primarygas_, other->primarygas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnesthesiaMachineData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::AnesthesiaMachineChamberData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::AnesthesiaMachineChamberData >(Arena* arena) {
  return Arena::CreateInternal< ::pulse::cdm::bind::AnesthesiaMachineChamberData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData >(Arena* arena) {
  return Arena::CreateInternal< ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::AnesthesiaMachineData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::AnesthesiaMachineData >(Arena* arena) {
  return Arena::CreateInternal< ::pulse::cdm::bind::AnesthesiaMachineData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
