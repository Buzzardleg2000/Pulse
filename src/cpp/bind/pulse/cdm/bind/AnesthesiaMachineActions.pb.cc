// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/AnesthesiaMachineActions.proto

#include "pulse/cdm/bind/AnesthesiaMachineActions.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActionData_pulse_2fcdm_2fbind_2fActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AnesthesiaMachineActionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnesthesiaMachineConfigurationData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_AnesthesiaMachineData_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnesthesiaMachineExpiratoryValveLeakData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnesthesiaMachineExpiratoryValveObstructionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnesthesiaMachineInspiratoryValveLeakData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnesthesiaMachineInspiratoryValveObstructionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnesthesiaMachineMaskLeakData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AnesthesiaMachineOxygenTankPressureLossData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AnesthesiaMachineOxygenWallPortPressureLossData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnesthesiaMachineSodaLimeFailureData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnesthesiaMachineTubeCuffLeakData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnesthesiaMachineVaporizerFailureData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnesthesiaMachineVentilatorPressureLossData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnesthesiaMachineYPieceDisconnectData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class AnyAnesthesiaMachineActionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnyAnesthesiaMachineActionData> _instance;
  const ::pulse::cdm::bind::AnesthesiaMachineConfigurationData* configuration_;
  const ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData* expiratoryvalveleak_;
  const ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData* expiratoryvalveobstruction_;
  const ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData* inspiratoryvalveleak_;
  const ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData* inspiratoryvalveobstruction_;
  const ::pulse::cdm::bind::AnesthesiaMachineMaskLeakData* maskleak_;
  const ::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData* sodalimefailure_;
  const ::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData* tubecuffleak_;
  const ::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData* vaporizerfailure_;
  const ::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData* ventilatorpressureloss_;
  const ::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData* ypiecedisconnect_;
  const ::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData* oxygenwallportpressureloss_;
  const ::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData* oxygentankpressureloss_;
} _AnyAnesthesiaMachineActionData_default_instance_;
class AnesthesiaMachineActionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnesthesiaMachineActionData> _instance;
} _AnesthesiaMachineActionData_default_instance_;
class AnesthesiaMachineConfigurationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnesthesiaMachineConfigurationData> _instance;
  const ::pulse::cdm::bind::AnesthesiaMachineData* configuration_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr configurationfile_;
} _AnesthesiaMachineConfigurationData_default_instance_;
class AnesthesiaMachineExpiratoryValveLeakDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnesthesiaMachineExpiratoryValveLeakData> _instance;
} _AnesthesiaMachineExpiratoryValveLeakData_default_instance_;
class AnesthesiaMachineExpiratoryValveObstructionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnesthesiaMachineExpiratoryValveObstructionData> _instance;
} _AnesthesiaMachineExpiratoryValveObstructionData_default_instance_;
class AnesthesiaMachineInspiratoryValveLeakDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnesthesiaMachineInspiratoryValveLeakData> _instance;
} _AnesthesiaMachineInspiratoryValveLeakData_default_instance_;
class AnesthesiaMachineInspiratoryValveObstructionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnesthesiaMachineInspiratoryValveObstructionData> _instance;
} _AnesthesiaMachineInspiratoryValveObstructionData_default_instance_;
class AnesthesiaMachineMaskLeakDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnesthesiaMachineMaskLeakData> _instance;
} _AnesthesiaMachineMaskLeakData_default_instance_;
class AnesthesiaMachineSodaLimeFailureDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnesthesiaMachineSodaLimeFailureData> _instance;
} _AnesthesiaMachineSodaLimeFailureData_default_instance_;
class AnesthesiaMachineTubeCuffLeakDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnesthesiaMachineTubeCuffLeakData> _instance;
} _AnesthesiaMachineTubeCuffLeakData_default_instance_;
class AnesthesiaMachineVaporizerFailureDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnesthesiaMachineVaporizerFailureData> _instance;
} _AnesthesiaMachineVaporizerFailureData_default_instance_;
class AnesthesiaMachineVentilatorPressureLossDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnesthesiaMachineVentilatorPressureLossData> _instance;
} _AnesthesiaMachineVentilatorPressureLossData_default_instance_;
class AnesthesiaMachineYPieceDisconnectDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnesthesiaMachineYPieceDisconnectData> _instance;
} _AnesthesiaMachineYPieceDisconnectData_default_instance_;
class AnesthesiaMachineOxygenWallPortPressureLossDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnesthesiaMachineOxygenWallPortPressureLossData> _instance;
} _AnesthesiaMachineOxygenWallPortPressureLossData_default_instance_;
class AnesthesiaMachineOxygenTankPressureLossDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnesthesiaMachineOxygenTankPressureLossData> _instance;
} _AnesthesiaMachineOxygenTankPressureLossData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
static void InitDefaultsscc_info_AnesthesiaMachineActionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_AnesthesiaMachineActionData_default_instance_;
    new (ptr) ::pulse::cdm::bind::AnesthesiaMachineActionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pulse::cdm::bind::AnesthesiaMachineActionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AnesthesiaMachineActionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AnesthesiaMachineActionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto}, {
      &scc_info_ActionData_pulse_2fcdm_2fbind_2fActions_2eproto.base,}};

static void InitDefaultsscc_info_AnesthesiaMachineConfigurationData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_AnesthesiaMachineConfigurationData_default_instance_;
    new (ptr) ::pulse::cdm::bind::AnesthesiaMachineConfigurationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pulse::cdm::bind::AnesthesiaMachineConfigurationData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnesthesiaMachineConfigurationData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AnesthesiaMachineConfigurationData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto}, {
      &scc_info_AnesthesiaMachineActionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
      &scc_info_AnesthesiaMachineData_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto.base,}};

static void InitDefaultsscc_info_AnesthesiaMachineExpiratoryValveLeakData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_AnesthesiaMachineExpiratoryValveLeakData_default_instance_;
    new (ptr) ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnesthesiaMachineExpiratoryValveLeakData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AnesthesiaMachineExpiratoryValveLeakData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto}, {
      &scc_info_AnesthesiaMachineActionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_AnesthesiaMachineExpiratoryValveObstructionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_AnesthesiaMachineExpiratoryValveObstructionData_default_instance_;
    new (ptr) ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnesthesiaMachineExpiratoryValveObstructionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AnesthesiaMachineExpiratoryValveObstructionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto}, {
      &scc_info_AnesthesiaMachineActionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_AnesthesiaMachineInspiratoryValveLeakData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_AnesthesiaMachineInspiratoryValveLeakData_default_instance_;
    new (ptr) ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnesthesiaMachineInspiratoryValveLeakData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AnesthesiaMachineInspiratoryValveLeakData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto}, {
      &scc_info_AnesthesiaMachineActionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_AnesthesiaMachineInspiratoryValveObstructionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_AnesthesiaMachineInspiratoryValveObstructionData_default_instance_;
    new (ptr) ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnesthesiaMachineInspiratoryValveObstructionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AnesthesiaMachineInspiratoryValveObstructionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto}, {
      &scc_info_AnesthesiaMachineActionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_AnesthesiaMachineMaskLeakData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_AnesthesiaMachineMaskLeakData_default_instance_;
    new (ptr) ::pulse::cdm::bind::AnesthesiaMachineMaskLeakData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pulse::cdm::bind::AnesthesiaMachineMaskLeakData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnesthesiaMachineMaskLeakData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AnesthesiaMachineMaskLeakData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto}, {
      &scc_info_AnesthesiaMachineActionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_AnesthesiaMachineOxygenTankPressureLossData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_AnesthesiaMachineOxygenTankPressureLossData_default_instance_;
    new (ptr) ::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AnesthesiaMachineOxygenTankPressureLossData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AnesthesiaMachineOxygenTankPressureLossData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto}, {
      &scc_info_AnesthesiaMachineActionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,}};

static void InitDefaultsscc_info_AnesthesiaMachineOxygenWallPortPressureLossData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_AnesthesiaMachineOxygenWallPortPressureLossData_default_instance_;
    new (ptr) ::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AnesthesiaMachineOxygenWallPortPressureLossData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AnesthesiaMachineOxygenWallPortPressureLossData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto}, {
      &scc_info_AnesthesiaMachineActionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,}};

static void InitDefaultsscc_info_AnesthesiaMachineSodaLimeFailureData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_AnesthesiaMachineSodaLimeFailureData_default_instance_;
    new (ptr) ::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnesthesiaMachineSodaLimeFailureData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AnesthesiaMachineSodaLimeFailureData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto}, {
      &scc_info_AnesthesiaMachineActionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_AnesthesiaMachineTubeCuffLeakData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_AnesthesiaMachineTubeCuffLeakData_default_instance_;
    new (ptr) ::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnesthesiaMachineTubeCuffLeakData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AnesthesiaMachineTubeCuffLeakData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto}, {
      &scc_info_AnesthesiaMachineActionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_AnesthesiaMachineVaporizerFailureData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_AnesthesiaMachineVaporizerFailureData_default_instance_;
    new (ptr) ::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnesthesiaMachineVaporizerFailureData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AnesthesiaMachineVaporizerFailureData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto}, {
      &scc_info_AnesthesiaMachineActionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_AnesthesiaMachineVentilatorPressureLossData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_AnesthesiaMachineVentilatorPressureLossData_default_instance_;
    new (ptr) ::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnesthesiaMachineVentilatorPressureLossData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AnesthesiaMachineVentilatorPressureLossData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto}, {
      &scc_info_AnesthesiaMachineActionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_AnesthesiaMachineYPieceDisconnectData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_AnesthesiaMachineYPieceDisconnectData_default_instance_;
    new (ptr) ::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnesthesiaMachineYPieceDisconnectData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AnesthesiaMachineYPieceDisconnectData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto}, {
      &scc_info_AnesthesiaMachineActionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_AnyAnesthesiaMachineActionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_AnyAnesthesiaMachineActionData_default_instance_;
    new (ptr) ::pulse::cdm::bind::AnyAnesthesiaMachineActionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pulse::cdm::bind::AnyAnesthesiaMachineActionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<13> scc_info_AnyAnesthesiaMachineActionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 13, 0, InitDefaultsscc_info_AnyAnesthesiaMachineActionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto}, {
      &scc_info_AnesthesiaMachineConfigurationData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
      &scc_info_AnesthesiaMachineExpiratoryValveLeakData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
      &scc_info_AnesthesiaMachineExpiratoryValveObstructionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
      &scc_info_AnesthesiaMachineInspiratoryValveLeakData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
      &scc_info_AnesthesiaMachineInspiratoryValveObstructionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
      &scc_info_AnesthesiaMachineMaskLeakData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
      &scc_info_AnesthesiaMachineSodaLimeFailureData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
      &scc_info_AnesthesiaMachineTubeCuffLeakData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
      &scc_info_AnesthesiaMachineVaporizerFailureData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
      &scc_info_AnesthesiaMachineVentilatorPressureLossData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
      &scc_info_AnesthesiaMachineYPieceDisconnectData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
      &scc_info_AnesthesiaMachineOxygenWallPortPressureLossData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
      &scc_info_AnesthesiaMachineOxygenTankPressureLossData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto[15];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnyAnesthesiaMachineActionData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnyAnesthesiaMachineActionData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::pulse::cdm::bind::AnyAnesthesiaMachineActionDataDefaultTypeInternal, configuration_),
  offsetof(::pulse::cdm::bind::AnyAnesthesiaMachineActionDataDefaultTypeInternal, expiratoryvalveleak_),
  offsetof(::pulse::cdm::bind::AnyAnesthesiaMachineActionDataDefaultTypeInternal, expiratoryvalveobstruction_),
  offsetof(::pulse::cdm::bind::AnyAnesthesiaMachineActionDataDefaultTypeInternal, inspiratoryvalveleak_),
  offsetof(::pulse::cdm::bind::AnyAnesthesiaMachineActionDataDefaultTypeInternal, inspiratoryvalveobstruction_),
  offsetof(::pulse::cdm::bind::AnyAnesthesiaMachineActionDataDefaultTypeInternal, maskleak_),
  offsetof(::pulse::cdm::bind::AnyAnesthesiaMachineActionDataDefaultTypeInternal, sodalimefailure_),
  offsetof(::pulse::cdm::bind::AnyAnesthesiaMachineActionDataDefaultTypeInternal, tubecuffleak_),
  offsetof(::pulse::cdm::bind::AnyAnesthesiaMachineActionDataDefaultTypeInternal, vaporizerfailure_),
  offsetof(::pulse::cdm::bind::AnyAnesthesiaMachineActionDataDefaultTypeInternal, ventilatorpressureloss_),
  offsetof(::pulse::cdm::bind::AnyAnesthesiaMachineActionDataDefaultTypeInternal, ypiecedisconnect_),
  offsetof(::pulse::cdm::bind::AnyAnesthesiaMachineActionDataDefaultTypeInternal, oxygenwallportpressureloss_),
  offsetof(::pulse::cdm::bind::AnyAnesthesiaMachineActionDataDefaultTypeInternal, oxygentankpressureloss_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnyAnesthesiaMachineActionData, Action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineActionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineActionData, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineConfigurationData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineConfigurationData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineConfigurationData, anesthesiamachineaction_),
  offsetof(::pulse::cdm::bind::AnesthesiaMachineConfigurationDataDefaultTypeInternal, configuration_),
  offsetof(::pulse::cdm::bind::AnesthesiaMachineConfigurationDataDefaultTypeInternal, configurationfile_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineConfigurationData, Option_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData, anesthesiamachineaction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData, severity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData, anesthesiamachineaction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData, severity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData, anesthesiamachineaction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData, severity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData, anesthesiamachineaction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData, severity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineMaskLeakData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineMaskLeakData, anesthesiamachineaction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineMaskLeakData, severity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData, anesthesiamachineaction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData, severity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData, anesthesiamachineaction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData, severity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData, anesthesiamachineaction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData, severity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData, anesthesiamachineaction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData, severity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData, anesthesiamachineaction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData, severity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData, anesthesiamachineaction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData, anesthesiamachineaction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData, state_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pulse::cdm::bind::AnyAnesthesiaMachineActionData)},
  { 19, -1, sizeof(::pulse::cdm::bind::AnesthesiaMachineActionData)},
  { 25, -1, sizeof(::pulse::cdm::bind::AnesthesiaMachineConfigurationData)},
  { 34, -1, sizeof(::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData)},
  { 41, -1, sizeof(::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData)},
  { 48, -1, sizeof(::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData)},
  { 55, -1, sizeof(::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData)},
  { 62, -1, sizeof(::pulse::cdm::bind::AnesthesiaMachineMaskLeakData)},
  { 69, -1, sizeof(::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData)},
  { 76, -1, sizeof(::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData)},
  { 83, -1, sizeof(::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData)},
  { 90, -1, sizeof(::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData)},
  { 97, -1, sizeof(::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData)},
  { 104, -1, sizeof(::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData)},
  { 111, -1, sizeof(::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_AnyAnesthesiaMachineActionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_AnesthesiaMachineActionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_AnesthesiaMachineConfigurationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_AnesthesiaMachineExpiratoryValveLeakData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_AnesthesiaMachineExpiratoryValveObstructionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_AnesthesiaMachineInspiratoryValveLeakData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_AnesthesiaMachineInspiratoryValveObstructionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_AnesthesiaMachineMaskLeakData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_AnesthesiaMachineSodaLimeFailureData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_AnesthesiaMachineTubeCuffLeakData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_AnesthesiaMachineVaporizerFailureData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_AnesthesiaMachineVentilatorPressureLossData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_AnesthesiaMachineYPieceDisconnectData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_AnesthesiaMachineOxygenWallPortPressureLossData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_AnesthesiaMachineOxygenTankPressureLossData_default_instance_),
};

const char descriptor_table_protodef_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-pulse/cdm/bind/AnesthesiaMachineAction"
  "s.proto\022\016pulse.cdm.bind\032\032pulse/cdm/bind/"
  "Enums.proto\032\037pulse/cdm/bind/Properties.p"
  "roto\032&pulse/cdm/bind/AnesthesiaMachine.p"
  "roto\032\034pulse/cdm/bind/Actions.proto\"\245\t\n\036A"
  "nyAnesthesiaMachineActionData\022K\n\rConfigu"
  "ration\030\001 \001(\01322.pulse.cdm.bind.Anesthesia"
  "MachineConfigurationDataH\000\022W\n\023Expiratory"
  "ValveLeak\030\002 \001(\01328.pulse.cdm.bind.Anesthe"
  "siaMachineExpiratoryValveLeakDataH\000\022e\n\032E"
  "xpiratoryValveObstruction\030\003 \001(\0132\?.pulse."
  "cdm.bind.AnesthesiaMachineExpiratoryValv"
  "eObstructionDataH\000\022Y\n\024InspiratoryValveLe"
  "ak\030\004 \001(\01329.pulse.cdm.bind.AnesthesiaMach"
  "ineInspiratoryValveLeakDataH\000\022g\n\033Inspira"
  "toryValveObstruction\030\005 \001(\0132@.pulse.cdm.b"
  "ind.AnesthesiaMachineInspiratoryValveObs"
  "tructionDataH\000\022A\n\010MaskLeak\030\006 \001(\0132-.pulse"
  ".cdm.bind.AnesthesiaMachineMaskLeakDataH"
  "\000\022O\n\017SodaLimeFailure\030\007 \001(\01324.pulse.cdm.b"
  "ind.AnesthesiaMachineSodaLimeFailureData"
  "H\000\022I\n\014TubeCuffLeak\030\010 \001(\01321.pulse.cdm.bin"
  "d.AnesthesiaMachineTubeCuffLeakDataH\000\022Q\n"
  "\020VaporizerFailure\030\t \001(\01325.pulse.cdm.bind"
  ".AnesthesiaMachineVaporizerFailureDataH\000"
  "\022]\n\026VentilatorPressureLoss\030\n \001(\0132;.pulse"
  ".cdm.bind.AnesthesiaMachineVentilatorPre"
  "ssureLossDataH\000\022Q\n\020YPieceDisconnect\030\013 \001("
  "\01325.pulse.cdm.bind.AnesthesiaMachineYPie"
  "ceDisconnectDataH\000\022e\n\032OxygenWallPortPres"
  "sureLoss\030\014 \001(\0132\?.pulse.cdm.bind.Anesthes"
  "iaMachineOxygenWallPortPressureLossDataH"
  "\000\022]\n\026OxygenTankPressureLoss\030\r \001(\0132;.puls"
  "e.cdm.bind.AnesthesiaMachineOxygenTankPr"
  "essureLossDataH\000B\010\n\006Action\"I\n\033Anesthesia"
  "MachineActionData\022*\n\006Action\030\001 \001(\0132\032.puls"
  "e.cdm.bind.ActionData\"\331\001\n\"AnesthesiaMach"
  "ineConfigurationData\022L\n\027AnesthesiaMachin"
  "eAction\030\001 \001(\0132+.pulse.cdm.bind.Anesthesi"
  "aMachineActionData\022>\n\rConfiguration\030\002 \001("
  "\0132%.pulse.cdm.bind.AnesthesiaMachineData"
  "H\000\022\033\n\021ConfigurationFile\030\003 \001(\tH\000B\010\n\006Optio"
  "n\"\252\001\n(AnesthesiaMachineExpiratoryValveLe"
  "akData\022L\n\027AnesthesiaMachineAction\030\001 \001(\0132"
  "+.pulse.cdm.bind.AnesthesiaMachineAction"
  "Data\0220\n\010Severity\030\002 \001(\0132\036.pulse.cdm.bind."
  "Scalar0To1Data\"\261\001\n/AnesthesiaMachineExpi"
  "ratoryValveObstructionData\022L\n\027Anesthesia"
  "MachineAction\030\001 \001(\0132+.pulse.cdm.bind.Ane"
  "sthesiaMachineActionData\0220\n\010Severity\030\002 \001"
  "(\0132\036.pulse.cdm.bind.Scalar0To1Data\"\253\001\n)A"
  "nesthesiaMachineInspiratoryValveLeakData"
  "\022L\n\027AnesthesiaMachineAction\030\001 \001(\0132+.puls"
  "e.cdm.bind.AnesthesiaMachineActionData\0220"
  "\n\010Severity\030\002 \001(\0132\036.pulse.cdm.bind.Scalar"
  "0To1Data\"\262\001\n0AnesthesiaMachineInspirator"
  "yValveObstructionData\022L\n\027AnesthesiaMachi"
  "neAction\030\001 \001(\0132+.pulse.cdm.bind.Anesthes"
  "iaMachineActionData\0220\n\010Severity\030\002 \001(\0132\036."
  "pulse.cdm.bind.Scalar0To1Data\"\237\001\n\035Anesth"
  "esiaMachineMaskLeakData\022L\n\027AnesthesiaMac"
  "hineAction\030\001 \001(\0132+.pulse.cdm.bind.Anesth"
  "esiaMachineActionData\0220\n\010Severity\030\002 \001(\0132"
  "\036.pulse.cdm.bind.Scalar0To1Data\"\246\001\n$Anes"
  "thesiaMachineSodaLimeFailureData\022L\n\027Anes"
  "thesiaMachineAction\030\001 \001(\0132+.pulse.cdm.bi"
  "nd.AnesthesiaMachineActionData\0220\n\010Severi"
  "ty\030\002 \001(\0132\036.pulse.cdm.bind.Scalar0To1Data"
  "\"\243\001\n!AnesthesiaMachineTubeCuffLeakData\022L"
  "\n\027AnesthesiaMachineAction\030\001 \001(\0132+.pulse."
  "cdm.bind.AnesthesiaMachineActionData\0220\n\010"
  "Severity\030\002 \001(\0132\036.pulse.cdm.bind.Scalar0T"
  "o1Data\"\247\001\n%AnesthesiaMachineVaporizerFai"
  "lureData\022L\n\027AnesthesiaMachineAction\030\001 \001("
  "\0132+.pulse.cdm.bind.AnesthesiaMachineActi"
  "onData\0220\n\010Severity\030\002 \001(\0132\036.pulse.cdm.bin"
  "d.Scalar0To1Data\"\255\001\n+AnesthesiaMachineVe"
  "ntilatorPressureLossData\022L\n\027AnesthesiaMa"
  "chineAction\030\001 \001(\0132+.pulse.cdm.bind.Anest"
  "hesiaMachineActionData\0220\n\010Severity\030\002 \001(\013"
  "2\036.pulse.cdm.bind.Scalar0To1Data\"\247\001\n%Ane"
  "sthesiaMachineYPieceDisconnectData\022L\n\027An"
  "esthesiaMachineAction\030\001 \001(\0132+.pulse.cdm."
  "bind.AnesthesiaMachineActionData\0220\n\010Seve"
  "rity\030\002 \001(\0132\036.pulse.cdm.bind.Scalar0To1Da"
  "ta\"\247\001\n/AnesthesiaMachineOxygenWallPortPr"
  "essureLossData\022L\n\027AnesthesiaMachineActio"
  "n\030\001 \001(\0132+.pulse.cdm.bind.AnesthesiaMachi"
  "neActionData\022&\n\005State\030\002 \001(\0162\027.pulse.cdm."
  "bind.eSwitch\"\243\001\n+AnesthesiaMachineOxygen"
  "TankPressureLossData\022L\n\027AnesthesiaMachin"
  "eAction\030\001 \001(\0132+.pulse.cdm.bind.Anesthesi"
  "aMachineActionData\022&\n\005State\030\002 \001(\0162\027.puls"
  "e.cdm.bind.eSwitchB#\n\016pulse.cdm.bindH\001\252\002"
  "\016pulse.cdm.bindb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto_deps[4] = {
  &::descriptor_table_pulse_2fcdm_2fbind_2fActions_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fEnums_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto_sccs[15] = {
  &scc_info_AnesthesiaMachineActionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
  &scc_info_AnesthesiaMachineConfigurationData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
  &scc_info_AnesthesiaMachineExpiratoryValveLeakData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
  &scc_info_AnesthesiaMachineExpiratoryValveObstructionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
  &scc_info_AnesthesiaMachineInspiratoryValveLeakData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
  &scc_info_AnesthesiaMachineInspiratoryValveObstructionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
  &scc_info_AnesthesiaMachineMaskLeakData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
  &scc_info_AnesthesiaMachineOxygenTankPressureLossData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
  &scc_info_AnesthesiaMachineOxygenWallPortPressureLossData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
  &scc_info_AnesthesiaMachineSodaLimeFailureData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
  &scc_info_AnesthesiaMachineTubeCuffLeakData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
  &scc_info_AnesthesiaMachineVaporizerFailureData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
  &scc_info_AnesthesiaMachineVentilatorPressureLossData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
  &scc_info_AnesthesiaMachineYPieceDisconnectData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
  &scc_info_AnyAnesthesiaMachineActionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto_once;
static bool descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto = {
  &descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto_initialized, descriptor_table_protodef_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto, "pulse/cdm/bind/AnesthesiaMachineActions.proto", 3783,
  &descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto_once, descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto_sccs, descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto_deps, 15, 4,
  schemas, file_default_instances, TableStruct_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto::offsets,
  file_level_metadata_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto, 15, file_level_enum_descriptors_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto, file_level_service_descriptors_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto), true);
namespace pulse {
namespace cdm {
namespace bind {

// ===================================================================

void AnyAnesthesiaMachineActionData::InitAsDefaultInstance() {
  ::pulse::cdm::bind::_AnyAnesthesiaMachineActionData_default_instance_.configuration_ = const_cast< ::pulse::cdm::bind::AnesthesiaMachineConfigurationData*>(
      ::pulse::cdm::bind::AnesthesiaMachineConfigurationData::internal_default_instance());
  ::pulse::cdm::bind::_AnyAnesthesiaMachineActionData_default_instance_.expiratoryvalveleak_ = const_cast< ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData*>(
      ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData::internal_default_instance());
  ::pulse::cdm::bind::_AnyAnesthesiaMachineActionData_default_instance_.expiratoryvalveobstruction_ = const_cast< ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData*>(
      ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData::internal_default_instance());
  ::pulse::cdm::bind::_AnyAnesthesiaMachineActionData_default_instance_.inspiratoryvalveleak_ = const_cast< ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData*>(
      ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData::internal_default_instance());
  ::pulse::cdm::bind::_AnyAnesthesiaMachineActionData_default_instance_.inspiratoryvalveobstruction_ = const_cast< ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData*>(
      ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData::internal_default_instance());
  ::pulse::cdm::bind::_AnyAnesthesiaMachineActionData_default_instance_.maskleak_ = const_cast< ::pulse::cdm::bind::AnesthesiaMachineMaskLeakData*>(
      ::pulse::cdm::bind::AnesthesiaMachineMaskLeakData::internal_default_instance());
  ::pulse::cdm::bind::_AnyAnesthesiaMachineActionData_default_instance_.sodalimefailure_ = const_cast< ::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData*>(
      ::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData::internal_default_instance());
  ::pulse::cdm::bind::_AnyAnesthesiaMachineActionData_default_instance_.tubecuffleak_ = const_cast< ::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData*>(
      ::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData::internal_default_instance());
  ::pulse::cdm::bind::_AnyAnesthesiaMachineActionData_default_instance_.vaporizerfailure_ = const_cast< ::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData*>(
      ::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData::internal_default_instance());
  ::pulse::cdm::bind::_AnyAnesthesiaMachineActionData_default_instance_.ventilatorpressureloss_ = const_cast< ::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData*>(
      ::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData::internal_default_instance());
  ::pulse::cdm::bind::_AnyAnesthesiaMachineActionData_default_instance_.ypiecedisconnect_ = const_cast< ::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData*>(
      ::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData::internal_default_instance());
  ::pulse::cdm::bind::_AnyAnesthesiaMachineActionData_default_instance_.oxygenwallportpressureloss_ = const_cast< ::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData*>(
      ::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData::internal_default_instance());
  ::pulse::cdm::bind::_AnyAnesthesiaMachineActionData_default_instance_.oxygentankpressureloss_ = const_cast< ::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData*>(
      ::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData::internal_default_instance());
}
class AnyAnesthesiaMachineActionData::_Internal {
 public:
  static const ::pulse::cdm::bind::AnesthesiaMachineConfigurationData& configuration(const AnyAnesthesiaMachineActionData* msg);
  static const ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData& expiratoryvalveleak(const AnyAnesthesiaMachineActionData* msg);
  static const ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData& expiratoryvalveobstruction(const AnyAnesthesiaMachineActionData* msg);
  static const ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData& inspiratoryvalveleak(const AnyAnesthesiaMachineActionData* msg);
  static const ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData& inspiratoryvalveobstruction(const AnyAnesthesiaMachineActionData* msg);
  static const ::pulse::cdm::bind::AnesthesiaMachineMaskLeakData& maskleak(const AnyAnesthesiaMachineActionData* msg);
  static const ::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData& sodalimefailure(const AnyAnesthesiaMachineActionData* msg);
  static const ::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData& tubecuffleak(const AnyAnesthesiaMachineActionData* msg);
  static const ::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData& vaporizerfailure(const AnyAnesthesiaMachineActionData* msg);
  static const ::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData& ventilatorpressureloss(const AnyAnesthesiaMachineActionData* msg);
  static const ::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData& ypiecedisconnect(const AnyAnesthesiaMachineActionData* msg);
  static const ::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData& oxygenwallportpressureloss(const AnyAnesthesiaMachineActionData* msg);
  static const ::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData& oxygentankpressureloss(const AnyAnesthesiaMachineActionData* msg);
};

const ::pulse::cdm::bind::AnesthesiaMachineConfigurationData&
AnyAnesthesiaMachineActionData::_Internal::configuration(const AnyAnesthesiaMachineActionData* msg) {
  return *msg->Action_.configuration_;
}
const ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData&
AnyAnesthesiaMachineActionData::_Internal::expiratoryvalveleak(const AnyAnesthesiaMachineActionData* msg) {
  return *msg->Action_.expiratoryvalveleak_;
}
const ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData&
AnyAnesthesiaMachineActionData::_Internal::expiratoryvalveobstruction(const AnyAnesthesiaMachineActionData* msg) {
  return *msg->Action_.expiratoryvalveobstruction_;
}
const ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData&
AnyAnesthesiaMachineActionData::_Internal::inspiratoryvalveleak(const AnyAnesthesiaMachineActionData* msg) {
  return *msg->Action_.inspiratoryvalveleak_;
}
const ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData&
AnyAnesthesiaMachineActionData::_Internal::inspiratoryvalveobstruction(const AnyAnesthesiaMachineActionData* msg) {
  return *msg->Action_.inspiratoryvalveobstruction_;
}
const ::pulse::cdm::bind::AnesthesiaMachineMaskLeakData&
AnyAnesthesiaMachineActionData::_Internal::maskleak(const AnyAnesthesiaMachineActionData* msg) {
  return *msg->Action_.maskleak_;
}
const ::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData&
AnyAnesthesiaMachineActionData::_Internal::sodalimefailure(const AnyAnesthesiaMachineActionData* msg) {
  return *msg->Action_.sodalimefailure_;
}
const ::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData&
AnyAnesthesiaMachineActionData::_Internal::tubecuffleak(const AnyAnesthesiaMachineActionData* msg) {
  return *msg->Action_.tubecuffleak_;
}
const ::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData&
AnyAnesthesiaMachineActionData::_Internal::vaporizerfailure(const AnyAnesthesiaMachineActionData* msg) {
  return *msg->Action_.vaporizerfailure_;
}
const ::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData&
AnyAnesthesiaMachineActionData::_Internal::ventilatorpressureloss(const AnyAnesthesiaMachineActionData* msg) {
  return *msg->Action_.ventilatorpressureloss_;
}
const ::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData&
AnyAnesthesiaMachineActionData::_Internal::ypiecedisconnect(const AnyAnesthesiaMachineActionData* msg) {
  return *msg->Action_.ypiecedisconnect_;
}
const ::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData&
AnyAnesthesiaMachineActionData::_Internal::oxygenwallportpressureloss(const AnyAnesthesiaMachineActionData* msg) {
  return *msg->Action_.oxygenwallportpressureloss_;
}
const ::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData&
AnyAnesthesiaMachineActionData::_Internal::oxygentankpressureloss(const AnyAnesthesiaMachineActionData* msg) {
  return *msg->Action_.oxygentankpressureloss_;
}
void AnyAnesthesiaMachineActionData::set_allocated_configuration(::pulse::cdm::bind::AnesthesiaMachineConfigurationData* configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Action();
  if (configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, configuration, submessage_arena);
    }
    set_has_configuration();
    Action_.configuration_ = configuration;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyAnesthesiaMachineActionData.Configuration)
}
void AnyAnesthesiaMachineActionData::set_allocated_expiratoryvalveleak(::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData* expiratoryvalveleak) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Action();
  if (expiratoryvalveleak) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      expiratoryvalveleak = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expiratoryvalveleak, submessage_arena);
    }
    set_has_expiratoryvalveleak();
    Action_.expiratoryvalveleak_ = expiratoryvalveleak;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyAnesthesiaMachineActionData.ExpiratoryValveLeak)
}
void AnyAnesthesiaMachineActionData::set_allocated_expiratoryvalveobstruction(::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData* expiratoryvalveobstruction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Action();
  if (expiratoryvalveobstruction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      expiratoryvalveobstruction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expiratoryvalveobstruction, submessage_arena);
    }
    set_has_expiratoryvalveobstruction();
    Action_.expiratoryvalveobstruction_ = expiratoryvalveobstruction;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyAnesthesiaMachineActionData.ExpiratoryValveObstruction)
}
void AnyAnesthesiaMachineActionData::set_allocated_inspiratoryvalveleak(::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData* inspiratoryvalveleak) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Action();
  if (inspiratoryvalveleak) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      inspiratoryvalveleak = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inspiratoryvalveleak, submessage_arena);
    }
    set_has_inspiratoryvalveleak();
    Action_.inspiratoryvalveleak_ = inspiratoryvalveleak;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyAnesthesiaMachineActionData.InspiratoryValveLeak)
}
void AnyAnesthesiaMachineActionData::set_allocated_inspiratoryvalveobstruction(::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData* inspiratoryvalveobstruction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Action();
  if (inspiratoryvalveobstruction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      inspiratoryvalveobstruction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inspiratoryvalveobstruction, submessage_arena);
    }
    set_has_inspiratoryvalveobstruction();
    Action_.inspiratoryvalveobstruction_ = inspiratoryvalveobstruction;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyAnesthesiaMachineActionData.InspiratoryValveObstruction)
}
void AnyAnesthesiaMachineActionData::set_allocated_maskleak(::pulse::cdm::bind::AnesthesiaMachineMaskLeakData* maskleak) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Action();
  if (maskleak) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      maskleak = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, maskleak, submessage_arena);
    }
    set_has_maskleak();
    Action_.maskleak_ = maskleak;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyAnesthesiaMachineActionData.MaskLeak)
}
void AnyAnesthesiaMachineActionData::set_allocated_sodalimefailure(::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData* sodalimefailure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Action();
  if (sodalimefailure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sodalimefailure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sodalimefailure, submessage_arena);
    }
    set_has_sodalimefailure();
    Action_.sodalimefailure_ = sodalimefailure;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyAnesthesiaMachineActionData.SodaLimeFailure)
}
void AnyAnesthesiaMachineActionData::set_allocated_tubecuffleak(::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData* tubecuffleak) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Action();
  if (tubecuffleak) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tubecuffleak = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tubecuffleak, submessage_arena);
    }
    set_has_tubecuffleak();
    Action_.tubecuffleak_ = tubecuffleak;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyAnesthesiaMachineActionData.TubeCuffLeak)
}
void AnyAnesthesiaMachineActionData::set_allocated_vaporizerfailure(::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData* vaporizerfailure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Action();
  if (vaporizerfailure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vaporizerfailure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vaporizerfailure, submessage_arena);
    }
    set_has_vaporizerfailure();
    Action_.vaporizerfailure_ = vaporizerfailure;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyAnesthesiaMachineActionData.VaporizerFailure)
}
void AnyAnesthesiaMachineActionData::set_allocated_ventilatorpressureloss(::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData* ventilatorpressureloss) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Action();
  if (ventilatorpressureloss) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ventilatorpressureloss = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ventilatorpressureloss, submessage_arena);
    }
    set_has_ventilatorpressureloss();
    Action_.ventilatorpressureloss_ = ventilatorpressureloss;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyAnesthesiaMachineActionData.VentilatorPressureLoss)
}
void AnyAnesthesiaMachineActionData::set_allocated_ypiecedisconnect(::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData* ypiecedisconnect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Action();
  if (ypiecedisconnect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ypiecedisconnect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ypiecedisconnect, submessage_arena);
    }
    set_has_ypiecedisconnect();
    Action_.ypiecedisconnect_ = ypiecedisconnect;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyAnesthesiaMachineActionData.YPieceDisconnect)
}
void AnyAnesthesiaMachineActionData::set_allocated_oxygenwallportpressureloss(::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData* oxygenwallportpressureloss) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Action();
  if (oxygenwallportpressureloss) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      oxygenwallportpressureloss = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oxygenwallportpressureloss, submessage_arena);
    }
    set_has_oxygenwallportpressureloss();
    Action_.oxygenwallportpressureloss_ = oxygenwallportpressureloss;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyAnesthesiaMachineActionData.OxygenWallPortPressureLoss)
}
void AnyAnesthesiaMachineActionData::set_allocated_oxygentankpressureloss(::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData* oxygentankpressureloss) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Action();
  if (oxygentankpressureloss) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      oxygentankpressureloss = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oxygentankpressureloss, submessage_arena);
    }
    set_has_oxygentankpressureloss();
    Action_.oxygentankpressureloss_ = oxygentankpressureloss;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyAnesthesiaMachineActionData.OxygenTankPressureLoss)
}
AnyAnesthesiaMachineActionData::AnyAnesthesiaMachineActionData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pulse.cdm.bind.AnyAnesthesiaMachineActionData)
}
AnyAnesthesiaMachineActionData::AnyAnesthesiaMachineActionData(const AnyAnesthesiaMachineActionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_Action();
  switch (from.Action_case()) {
    case kConfiguration: {
      _internal_mutable_configuration()->::pulse::cdm::bind::AnesthesiaMachineConfigurationData::MergeFrom(from._internal_configuration());
      break;
    }
    case kExpiratoryValveLeak: {
      _internal_mutable_expiratoryvalveleak()->::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData::MergeFrom(from._internal_expiratoryvalveleak());
      break;
    }
    case kExpiratoryValveObstruction: {
      _internal_mutable_expiratoryvalveobstruction()->::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData::MergeFrom(from._internal_expiratoryvalveobstruction());
      break;
    }
    case kInspiratoryValveLeak: {
      _internal_mutable_inspiratoryvalveleak()->::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData::MergeFrom(from._internal_inspiratoryvalveleak());
      break;
    }
    case kInspiratoryValveObstruction: {
      _internal_mutable_inspiratoryvalveobstruction()->::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData::MergeFrom(from._internal_inspiratoryvalveobstruction());
      break;
    }
    case kMaskLeak: {
      _internal_mutable_maskleak()->::pulse::cdm::bind::AnesthesiaMachineMaskLeakData::MergeFrom(from._internal_maskleak());
      break;
    }
    case kSodaLimeFailure: {
      _internal_mutable_sodalimefailure()->::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData::MergeFrom(from._internal_sodalimefailure());
      break;
    }
    case kTubeCuffLeak: {
      _internal_mutable_tubecuffleak()->::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData::MergeFrom(from._internal_tubecuffleak());
      break;
    }
    case kVaporizerFailure: {
      _internal_mutable_vaporizerfailure()->::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData::MergeFrom(from._internal_vaporizerfailure());
      break;
    }
    case kVentilatorPressureLoss: {
      _internal_mutable_ventilatorpressureloss()->::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData::MergeFrom(from._internal_ventilatorpressureloss());
      break;
    }
    case kYPieceDisconnect: {
      _internal_mutable_ypiecedisconnect()->::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData::MergeFrom(from._internal_ypiecedisconnect());
      break;
    }
    case kOxygenWallPortPressureLoss: {
      _internal_mutable_oxygenwallportpressureloss()->::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData::MergeFrom(from._internal_oxygenwallportpressureloss());
      break;
    }
    case kOxygenTankPressureLoss: {
      _internal_mutable_oxygentankpressureloss()->::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData::MergeFrom(from._internal_oxygentankpressureloss());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.AnyAnesthesiaMachineActionData)
}

void AnyAnesthesiaMachineActionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnyAnesthesiaMachineActionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base);
  clear_has_Action();
}

AnyAnesthesiaMachineActionData::~AnyAnesthesiaMachineActionData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.AnyAnesthesiaMachineActionData)
  SharedDtor();
}

void AnyAnesthesiaMachineActionData::SharedDtor() {
  if (has_Action()) {
    clear_Action();
  }
}

void AnyAnesthesiaMachineActionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnyAnesthesiaMachineActionData& AnyAnesthesiaMachineActionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnyAnesthesiaMachineActionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base);
  return *internal_default_instance();
}


void AnyAnesthesiaMachineActionData::clear_Action() {
// @@protoc_insertion_point(one_of_clear_start:pulse.cdm.bind.AnyAnesthesiaMachineActionData)
  switch (Action_case()) {
    case kConfiguration: {
      delete Action_.configuration_;
      break;
    }
    case kExpiratoryValveLeak: {
      delete Action_.expiratoryvalveleak_;
      break;
    }
    case kExpiratoryValveObstruction: {
      delete Action_.expiratoryvalveobstruction_;
      break;
    }
    case kInspiratoryValveLeak: {
      delete Action_.inspiratoryvalveleak_;
      break;
    }
    case kInspiratoryValveObstruction: {
      delete Action_.inspiratoryvalveobstruction_;
      break;
    }
    case kMaskLeak: {
      delete Action_.maskleak_;
      break;
    }
    case kSodaLimeFailure: {
      delete Action_.sodalimefailure_;
      break;
    }
    case kTubeCuffLeak: {
      delete Action_.tubecuffleak_;
      break;
    }
    case kVaporizerFailure: {
      delete Action_.vaporizerfailure_;
      break;
    }
    case kVentilatorPressureLoss: {
      delete Action_.ventilatorpressureloss_;
      break;
    }
    case kYPieceDisconnect: {
      delete Action_.ypiecedisconnect_;
      break;
    }
    case kOxygenWallPortPressureLoss: {
      delete Action_.oxygenwallportpressureloss_;
      break;
    }
    case kOxygenTankPressureLoss: {
      delete Action_.oxygentankpressureloss_;
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_NOT_SET;
}


void AnyAnesthesiaMachineActionData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.AnyAnesthesiaMachineActionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_Action();
  _internal_metadata_.Clear();
}

const char* AnyAnesthesiaMachineActionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.AnesthesiaMachineConfigurationData Configuration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.AnesthesiaMachineExpiratoryValveLeakData ExpiratoryValveLeak = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_expiratoryvalveleak(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.AnesthesiaMachineExpiratoryValveObstructionData ExpiratoryValveObstruction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_expiratoryvalveobstruction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.AnesthesiaMachineInspiratoryValveLeakData InspiratoryValveLeak = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_inspiratoryvalveleak(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.AnesthesiaMachineInspiratoryValveObstructionData InspiratoryValveObstruction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_inspiratoryvalveobstruction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.AnesthesiaMachineMaskLeakData MaskLeak = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_maskleak(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.AnesthesiaMachineSodaLimeFailureData SodaLimeFailure = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_sodalimefailure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.AnesthesiaMachineTubeCuffLeakData TubeCuffLeak = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tubecuffleak(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.AnesthesiaMachineVaporizerFailureData VaporizerFailure = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_vaporizerfailure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.AnesthesiaMachineVentilatorPressureLossData VentilatorPressureLoss = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_ventilatorpressureloss(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.AnesthesiaMachineYPieceDisconnectData YPieceDisconnect = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_ypiecedisconnect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.AnesthesiaMachineOxygenWallPortPressureLossData OxygenWallPortPressureLoss = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_oxygenwallportpressureloss(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.AnesthesiaMachineOxygenTankPressureLossData OxygenTankPressureLoss = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_oxygentankpressureloss(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnyAnesthesiaMachineActionData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.AnyAnesthesiaMachineActionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.AnesthesiaMachineConfigurationData Configuration = 1;
  if (_internal_has_configuration()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::configuration(this), target, stream);
  }

  // .pulse.cdm.bind.AnesthesiaMachineExpiratoryValveLeakData ExpiratoryValveLeak = 2;
  if (_internal_has_expiratoryvalveleak()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::expiratoryvalveleak(this), target, stream);
  }

  // .pulse.cdm.bind.AnesthesiaMachineExpiratoryValveObstructionData ExpiratoryValveObstruction = 3;
  if (_internal_has_expiratoryvalveobstruction()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::expiratoryvalveobstruction(this), target, stream);
  }

  // .pulse.cdm.bind.AnesthesiaMachineInspiratoryValveLeakData InspiratoryValveLeak = 4;
  if (_internal_has_inspiratoryvalveleak()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::inspiratoryvalveleak(this), target, stream);
  }

  // .pulse.cdm.bind.AnesthesiaMachineInspiratoryValveObstructionData InspiratoryValveObstruction = 5;
  if (_internal_has_inspiratoryvalveobstruction()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::inspiratoryvalveobstruction(this), target, stream);
  }

  // .pulse.cdm.bind.AnesthesiaMachineMaskLeakData MaskLeak = 6;
  if (_internal_has_maskleak()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::maskleak(this), target, stream);
  }

  // .pulse.cdm.bind.AnesthesiaMachineSodaLimeFailureData SodaLimeFailure = 7;
  if (_internal_has_sodalimefailure()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::sodalimefailure(this), target, stream);
  }

  // .pulse.cdm.bind.AnesthesiaMachineTubeCuffLeakData TubeCuffLeak = 8;
  if (_internal_has_tubecuffleak()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::tubecuffleak(this), target, stream);
  }

  // .pulse.cdm.bind.AnesthesiaMachineVaporizerFailureData VaporizerFailure = 9;
  if (_internal_has_vaporizerfailure()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::vaporizerfailure(this), target, stream);
  }

  // .pulse.cdm.bind.AnesthesiaMachineVentilatorPressureLossData VentilatorPressureLoss = 10;
  if (_internal_has_ventilatorpressureloss()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::ventilatorpressureloss(this), target, stream);
  }

  // .pulse.cdm.bind.AnesthesiaMachineYPieceDisconnectData YPieceDisconnect = 11;
  if (_internal_has_ypiecedisconnect()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::ypiecedisconnect(this), target, stream);
  }

  // .pulse.cdm.bind.AnesthesiaMachineOxygenWallPortPressureLossData OxygenWallPortPressureLoss = 12;
  if (_internal_has_oxygenwallportpressureloss()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, _Internal::oxygenwallportpressureloss(this), target, stream);
  }

  // .pulse.cdm.bind.AnesthesiaMachineOxygenTankPressureLossData OxygenTankPressureLoss = 13;
  if (_internal_has_oxygentankpressureloss()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, _Internal::oxygentankpressureloss(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.AnyAnesthesiaMachineActionData)
  return target;
}

size_t AnyAnesthesiaMachineActionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.AnyAnesthesiaMachineActionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (Action_case()) {
    // .pulse.cdm.bind.AnesthesiaMachineConfigurationData Configuration = 1;
    case kConfiguration: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.configuration_);
      break;
    }
    // .pulse.cdm.bind.AnesthesiaMachineExpiratoryValveLeakData ExpiratoryValveLeak = 2;
    case kExpiratoryValveLeak: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.expiratoryvalveleak_);
      break;
    }
    // .pulse.cdm.bind.AnesthesiaMachineExpiratoryValveObstructionData ExpiratoryValveObstruction = 3;
    case kExpiratoryValveObstruction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.expiratoryvalveobstruction_);
      break;
    }
    // .pulse.cdm.bind.AnesthesiaMachineInspiratoryValveLeakData InspiratoryValveLeak = 4;
    case kInspiratoryValveLeak: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.inspiratoryvalveleak_);
      break;
    }
    // .pulse.cdm.bind.AnesthesiaMachineInspiratoryValveObstructionData InspiratoryValveObstruction = 5;
    case kInspiratoryValveObstruction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.inspiratoryvalveobstruction_);
      break;
    }
    // .pulse.cdm.bind.AnesthesiaMachineMaskLeakData MaskLeak = 6;
    case kMaskLeak: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.maskleak_);
      break;
    }
    // .pulse.cdm.bind.AnesthesiaMachineSodaLimeFailureData SodaLimeFailure = 7;
    case kSodaLimeFailure: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.sodalimefailure_);
      break;
    }
    // .pulse.cdm.bind.AnesthesiaMachineTubeCuffLeakData TubeCuffLeak = 8;
    case kTubeCuffLeak: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.tubecuffleak_);
      break;
    }
    // .pulse.cdm.bind.AnesthesiaMachineVaporizerFailureData VaporizerFailure = 9;
    case kVaporizerFailure: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.vaporizerfailure_);
      break;
    }
    // .pulse.cdm.bind.AnesthesiaMachineVentilatorPressureLossData VentilatorPressureLoss = 10;
    case kVentilatorPressureLoss: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.ventilatorpressureloss_);
      break;
    }
    // .pulse.cdm.bind.AnesthesiaMachineYPieceDisconnectData YPieceDisconnect = 11;
    case kYPieceDisconnect: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.ypiecedisconnect_);
      break;
    }
    // .pulse.cdm.bind.AnesthesiaMachineOxygenWallPortPressureLossData OxygenWallPortPressureLoss = 12;
    case kOxygenWallPortPressureLoss: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.oxygenwallportpressureloss_);
      break;
    }
    // .pulse.cdm.bind.AnesthesiaMachineOxygenTankPressureLossData OxygenTankPressureLoss = 13;
    case kOxygenTankPressureLoss: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.oxygentankpressureloss_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnyAnesthesiaMachineActionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.AnyAnesthesiaMachineActionData)
  GOOGLE_DCHECK_NE(&from, this);
  const AnyAnesthesiaMachineActionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnyAnesthesiaMachineActionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.AnyAnesthesiaMachineActionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.AnyAnesthesiaMachineActionData)
    MergeFrom(*source);
  }
}

void AnyAnesthesiaMachineActionData::MergeFrom(const AnyAnesthesiaMachineActionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.AnyAnesthesiaMachineActionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Action_case()) {
    case kConfiguration: {
      _internal_mutable_configuration()->::pulse::cdm::bind::AnesthesiaMachineConfigurationData::MergeFrom(from._internal_configuration());
      break;
    }
    case kExpiratoryValveLeak: {
      _internal_mutable_expiratoryvalveleak()->::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData::MergeFrom(from._internal_expiratoryvalveleak());
      break;
    }
    case kExpiratoryValveObstruction: {
      _internal_mutable_expiratoryvalveobstruction()->::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData::MergeFrom(from._internal_expiratoryvalveobstruction());
      break;
    }
    case kInspiratoryValveLeak: {
      _internal_mutable_inspiratoryvalveleak()->::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData::MergeFrom(from._internal_inspiratoryvalveleak());
      break;
    }
    case kInspiratoryValveObstruction: {
      _internal_mutable_inspiratoryvalveobstruction()->::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData::MergeFrom(from._internal_inspiratoryvalveobstruction());
      break;
    }
    case kMaskLeak: {
      _internal_mutable_maskleak()->::pulse::cdm::bind::AnesthesiaMachineMaskLeakData::MergeFrom(from._internal_maskleak());
      break;
    }
    case kSodaLimeFailure: {
      _internal_mutable_sodalimefailure()->::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData::MergeFrom(from._internal_sodalimefailure());
      break;
    }
    case kTubeCuffLeak: {
      _internal_mutable_tubecuffleak()->::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData::MergeFrom(from._internal_tubecuffleak());
      break;
    }
    case kVaporizerFailure: {
      _internal_mutable_vaporizerfailure()->::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData::MergeFrom(from._internal_vaporizerfailure());
      break;
    }
    case kVentilatorPressureLoss: {
      _internal_mutable_ventilatorpressureloss()->::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData::MergeFrom(from._internal_ventilatorpressureloss());
      break;
    }
    case kYPieceDisconnect: {
      _internal_mutable_ypiecedisconnect()->::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData::MergeFrom(from._internal_ypiecedisconnect());
      break;
    }
    case kOxygenWallPortPressureLoss: {
      _internal_mutable_oxygenwallportpressureloss()->::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData::MergeFrom(from._internal_oxygenwallportpressureloss());
      break;
    }
    case kOxygenTankPressureLoss: {
      _internal_mutable_oxygentankpressureloss()->::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData::MergeFrom(from._internal_oxygentankpressureloss());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
}

void AnyAnesthesiaMachineActionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.AnyAnesthesiaMachineActionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnyAnesthesiaMachineActionData::CopyFrom(const AnyAnesthesiaMachineActionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.AnyAnesthesiaMachineActionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnyAnesthesiaMachineActionData::IsInitialized() const {
  return true;
}

void AnyAnesthesiaMachineActionData::InternalSwap(AnyAnesthesiaMachineActionData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(Action_, other->Action_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnyAnesthesiaMachineActionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnesthesiaMachineActionData::InitAsDefaultInstance() {
  ::pulse::cdm::bind::_AnesthesiaMachineActionData_default_instance_._instance.get_mutable()->action_ = const_cast< ::pulse::cdm::bind::ActionData*>(
      ::pulse::cdm::bind::ActionData::internal_default_instance());
}
class AnesthesiaMachineActionData::_Internal {
 public:
  static const ::pulse::cdm::bind::ActionData& action(const AnesthesiaMachineActionData* msg);
};

const ::pulse::cdm::bind::ActionData&
AnesthesiaMachineActionData::_Internal::action(const AnesthesiaMachineActionData* msg) {
  return *msg->action_;
}
void AnesthesiaMachineActionData::clear_action() {
  if (GetArenaNoVirtual() == nullptr && action_ != nullptr) {
    delete action_;
  }
  action_ = nullptr;
}
AnesthesiaMachineActionData::AnesthesiaMachineActionData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pulse.cdm.bind.AnesthesiaMachineActionData)
}
AnesthesiaMachineActionData::AnesthesiaMachineActionData(const AnesthesiaMachineActionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_action()) {
    action_ = new ::pulse::cdm::bind::ActionData(*from.action_);
  } else {
    action_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.AnesthesiaMachineActionData)
}

void AnesthesiaMachineActionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnesthesiaMachineActionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base);
  action_ = nullptr;
}

AnesthesiaMachineActionData::~AnesthesiaMachineActionData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.AnesthesiaMachineActionData)
  SharedDtor();
}

void AnesthesiaMachineActionData::SharedDtor() {
  if (this != internal_default_instance()) delete action_;
}

void AnesthesiaMachineActionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnesthesiaMachineActionData& AnesthesiaMachineActionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnesthesiaMachineActionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base);
  return *internal_default_instance();
}


void AnesthesiaMachineActionData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.AnesthesiaMachineActionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && action_ != nullptr) {
    delete action_;
  }
  action_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AnesthesiaMachineActionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ActionData Action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnesthesiaMachineActionData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.AnesthesiaMachineActionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ActionData Action = 1;
  if (this->has_action()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::action(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.AnesthesiaMachineActionData)
  return target;
}

size_t AnesthesiaMachineActionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.AnesthesiaMachineActionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ActionData Action = 1;
  if (this->has_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnesthesiaMachineActionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.AnesthesiaMachineActionData)
  GOOGLE_DCHECK_NE(&from, this);
  const AnesthesiaMachineActionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnesthesiaMachineActionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.AnesthesiaMachineActionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.AnesthesiaMachineActionData)
    MergeFrom(*source);
  }
}

void AnesthesiaMachineActionData::MergeFrom(const AnesthesiaMachineActionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.AnesthesiaMachineActionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_action()) {
    _internal_mutable_action()->::pulse::cdm::bind::ActionData::MergeFrom(from._internal_action());
  }
}

void AnesthesiaMachineActionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.AnesthesiaMachineActionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnesthesiaMachineActionData::CopyFrom(const AnesthesiaMachineActionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.AnesthesiaMachineActionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnesthesiaMachineActionData::IsInitialized() const {
  return true;
}

void AnesthesiaMachineActionData::InternalSwap(AnesthesiaMachineActionData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(action_, other->action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnesthesiaMachineActionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnesthesiaMachineConfigurationData::InitAsDefaultInstance() {
  ::pulse::cdm::bind::_AnesthesiaMachineConfigurationData_default_instance_._instance.get_mutable()->anesthesiamachineaction_ = const_cast< ::pulse::cdm::bind::AnesthesiaMachineActionData*>(
      ::pulse::cdm::bind::AnesthesiaMachineActionData::internal_default_instance());
  ::pulse::cdm::bind::_AnesthesiaMachineConfigurationData_default_instance_.configuration_ = const_cast< ::pulse::cdm::bind::AnesthesiaMachineData*>(
      ::pulse::cdm::bind::AnesthesiaMachineData::internal_default_instance());
  ::pulse::cdm::bind::_AnesthesiaMachineConfigurationData_default_instance_.configurationfile_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class AnesthesiaMachineConfigurationData::_Internal {
 public:
  static const ::pulse::cdm::bind::AnesthesiaMachineActionData& anesthesiamachineaction(const AnesthesiaMachineConfigurationData* msg);
  static const ::pulse::cdm::bind::AnesthesiaMachineData& configuration(const AnesthesiaMachineConfigurationData* msg);
};

const ::pulse::cdm::bind::AnesthesiaMachineActionData&
AnesthesiaMachineConfigurationData::_Internal::anesthesiamachineaction(const AnesthesiaMachineConfigurationData* msg) {
  return *msg->anesthesiamachineaction_;
}
const ::pulse::cdm::bind::AnesthesiaMachineData&
AnesthesiaMachineConfigurationData::_Internal::configuration(const AnesthesiaMachineConfigurationData* msg) {
  return *msg->Option_.configuration_;
}
void AnesthesiaMachineConfigurationData::set_allocated_configuration(::pulse::cdm::bind::AnesthesiaMachineData* configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Option();
  if (configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, configuration, submessage_arena);
    }
    set_has_configuration();
    Option_.configuration_ = configuration;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnesthesiaMachineConfigurationData.Configuration)
}
void AnesthesiaMachineConfigurationData::clear_configuration() {
  if (_internal_has_configuration()) {
    delete Option_.configuration_;
    clear_has_Option();
  }
}
AnesthesiaMachineConfigurationData::AnesthesiaMachineConfigurationData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pulse.cdm.bind.AnesthesiaMachineConfigurationData)
}
AnesthesiaMachineConfigurationData::AnesthesiaMachineConfigurationData(const AnesthesiaMachineConfigurationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_anesthesiamachineaction()) {
    anesthesiamachineaction_ = new ::pulse::cdm::bind::AnesthesiaMachineActionData(*from.anesthesiamachineaction_);
  } else {
    anesthesiamachineaction_ = nullptr;
  }
  clear_has_Option();
  switch (from.Option_case()) {
    case kConfiguration: {
      _internal_mutable_configuration()->::pulse::cdm::bind::AnesthesiaMachineData::MergeFrom(from._internal_configuration());
      break;
    }
    case kConfigurationFile: {
      _internal_set_configurationfile(from._internal_configurationfile());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.AnesthesiaMachineConfigurationData)
}

void AnesthesiaMachineConfigurationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnesthesiaMachineConfigurationData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base);
  anesthesiamachineaction_ = nullptr;
  clear_has_Option();
}

AnesthesiaMachineConfigurationData::~AnesthesiaMachineConfigurationData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.AnesthesiaMachineConfigurationData)
  SharedDtor();
}

void AnesthesiaMachineConfigurationData::SharedDtor() {
  if (this != internal_default_instance()) delete anesthesiamachineaction_;
  if (has_Option()) {
    clear_Option();
  }
}

void AnesthesiaMachineConfigurationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnesthesiaMachineConfigurationData& AnesthesiaMachineConfigurationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnesthesiaMachineConfigurationData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base);
  return *internal_default_instance();
}


void AnesthesiaMachineConfigurationData::clear_Option() {
// @@protoc_insertion_point(one_of_clear_start:pulse.cdm.bind.AnesthesiaMachineConfigurationData)
  switch (Option_case()) {
    case kConfiguration: {
      delete Option_.configuration_;
      break;
    }
    case kConfigurationFile: {
      Option_.configurationfile_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPTION_NOT_SET;
}


void AnesthesiaMachineConfigurationData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.AnesthesiaMachineConfigurationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && anesthesiamachineaction_ != nullptr) {
    delete anesthesiamachineaction_;
  }
  anesthesiamachineaction_ = nullptr;
  clear_Option();
  _internal_metadata_.Clear();
}

const char* AnesthesiaMachineConfigurationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_anesthesiamachineaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.AnesthesiaMachineData Configuration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ConfigurationFile = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_configurationfile(), ptr, ctx, "pulse.cdm.bind.AnesthesiaMachineConfigurationData.ConfigurationFile");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnesthesiaMachineConfigurationData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.AnesthesiaMachineConfigurationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
  if (this->has_anesthesiamachineaction()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::anesthesiamachineaction(this), target, stream);
  }

  // .pulse.cdm.bind.AnesthesiaMachineData Configuration = 2;
  if (_internal_has_configuration()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::configuration(this), target, stream);
  }

  // string ConfigurationFile = 3;
  if (_internal_has_configurationfile()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_configurationfile().data(), static_cast<int>(this->_internal_configurationfile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.AnesthesiaMachineConfigurationData.ConfigurationFile");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_configurationfile(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.AnesthesiaMachineConfigurationData)
  return target;
}

size_t AnesthesiaMachineConfigurationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.AnesthesiaMachineConfigurationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
  if (this->has_anesthesiamachineaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *anesthesiamachineaction_);
  }

  switch (Option_case()) {
    // .pulse.cdm.bind.AnesthesiaMachineData Configuration = 2;
    case kConfiguration: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Option_.configuration_);
      break;
    }
    // string ConfigurationFile = 3;
    case kConfigurationFile: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_configurationfile());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnesthesiaMachineConfigurationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.AnesthesiaMachineConfigurationData)
  GOOGLE_DCHECK_NE(&from, this);
  const AnesthesiaMachineConfigurationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnesthesiaMachineConfigurationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.AnesthesiaMachineConfigurationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.AnesthesiaMachineConfigurationData)
    MergeFrom(*source);
  }
}

void AnesthesiaMachineConfigurationData::MergeFrom(const AnesthesiaMachineConfigurationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.AnesthesiaMachineConfigurationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_anesthesiamachineaction()) {
    _internal_mutable_anesthesiamachineaction()->::pulse::cdm::bind::AnesthesiaMachineActionData::MergeFrom(from._internal_anesthesiamachineaction());
  }
  switch (from.Option_case()) {
    case kConfiguration: {
      _internal_mutable_configuration()->::pulse::cdm::bind::AnesthesiaMachineData::MergeFrom(from._internal_configuration());
      break;
    }
    case kConfigurationFile: {
      _internal_set_configurationfile(from._internal_configurationfile());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
}

void AnesthesiaMachineConfigurationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.AnesthesiaMachineConfigurationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnesthesiaMachineConfigurationData::CopyFrom(const AnesthesiaMachineConfigurationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.AnesthesiaMachineConfigurationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnesthesiaMachineConfigurationData::IsInitialized() const {
  return true;
}

void AnesthesiaMachineConfigurationData::InternalSwap(AnesthesiaMachineConfigurationData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(anesthesiamachineaction_, other->anesthesiamachineaction_);
  swap(Option_, other->Option_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnesthesiaMachineConfigurationData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnesthesiaMachineExpiratoryValveLeakData::InitAsDefaultInstance() {
  ::pulse::cdm::bind::_AnesthesiaMachineExpiratoryValveLeakData_default_instance_._instance.get_mutable()->anesthesiamachineaction_ = const_cast< ::pulse::cdm::bind::AnesthesiaMachineActionData*>(
      ::pulse::cdm::bind::AnesthesiaMachineActionData::internal_default_instance());
  ::pulse::cdm::bind::_AnesthesiaMachineExpiratoryValveLeakData_default_instance_._instance.get_mutable()->severity_ = const_cast< ::pulse::cdm::bind::Scalar0To1Data*>(
      ::pulse::cdm::bind::Scalar0To1Data::internal_default_instance());
}
class AnesthesiaMachineExpiratoryValveLeakData::_Internal {
 public:
  static const ::pulse::cdm::bind::AnesthesiaMachineActionData& anesthesiamachineaction(const AnesthesiaMachineExpiratoryValveLeakData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& severity(const AnesthesiaMachineExpiratoryValveLeakData* msg);
};

const ::pulse::cdm::bind::AnesthesiaMachineActionData&
AnesthesiaMachineExpiratoryValveLeakData::_Internal::anesthesiamachineaction(const AnesthesiaMachineExpiratoryValveLeakData* msg) {
  return *msg->anesthesiamachineaction_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
AnesthesiaMachineExpiratoryValveLeakData::_Internal::severity(const AnesthesiaMachineExpiratoryValveLeakData* msg) {
  return *msg->severity_;
}
void AnesthesiaMachineExpiratoryValveLeakData::clear_severity() {
  if (GetArenaNoVirtual() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
}
AnesthesiaMachineExpiratoryValveLeakData::AnesthesiaMachineExpiratoryValveLeakData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveLeakData)
}
AnesthesiaMachineExpiratoryValveLeakData::AnesthesiaMachineExpiratoryValveLeakData(const AnesthesiaMachineExpiratoryValveLeakData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_anesthesiamachineaction()) {
    anesthesiamachineaction_ = new ::pulse::cdm::bind::AnesthesiaMachineActionData(*from.anesthesiamachineaction_);
  } else {
    anesthesiamachineaction_ = nullptr;
  }
  if (from._internal_has_severity()) {
    severity_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.severity_);
  } else {
    severity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveLeakData)
}

void AnesthesiaMachineExpiratoryValveLeakData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnesthesiaMachineExpiratoryValveLeakData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base);
  ::memset(&anesthesiamachineaction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&severity_) -
      reinterpret_cast<char*>(&anesthesiamachineaction_)) + sizeof(severity_));
}

AnesthesiaMachineExpiratoryValveLeakData::~AnesthesiaMachineExpiratoryValveLeakData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveLeakData)
  SharedDtor();
}

void AnesthesiaMachineExpiratoryValveLeakData::SharedDtor() {
  if (this != internal_default_instance()) delete anesthesiamachineaction_;
  if (this != internal_default_instance()) delete severity_;
}

void AnesthesiaMachineExpiratoryValveLeakData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnesthesiaMachineExpiratoryValveLeakData& AnesthesiaMachineExpiratoryValveLeakData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnesthesiaMachineExpiratoryValveLeakData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base);
  return *internal_default_instance();
}


void AnesthesiaMachineExpiratoryValveLeakData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveLeakData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && anesthesiamachineaction_ != nullptr) {
    delete anesthesiamachineaction_;
  }
  anesthesiamachineaction_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AnesthesiaMachineExpiratoryValveLeakData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_anesthesiamachineaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_severity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnesthesiaMachineExpiratoryValveLeakData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveLeakData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
  if (this->has_anesthesiamachineaction()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::anesthesiamachineaction(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::severity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveLeakData)
  return target;
}

size_t AnesthesiaMachineExpiratoryValveLeakData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveLeakData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
  if (this->has_anesthesiamachineaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *anesthesiamachineaction_);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *severity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnesthesiaMachineExpiratoryValveLeakData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveLeakData)
  GOOGLE_DCHECK_NE(&from, this);
  const AnesthesiaMachineExpiratoryValveLeakData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnesthesiaMachineExpiratoryValveLeakData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveLeakData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveLeakData)
    MergeFrom(*source);
  }
}

void AnesthesiaMachineExpiratoryValveLeakData::MergeFrom(const AnesthesiaMachineExpiratoryValveLeakData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveLeakData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_anesthesiamachineaction()) {
    _internal_mutable_anesthesiamachineaction()->::pulse::cdm::bind::AnesthesiaMachineActionData::MergeFrom(from._internal_anesthesiamachineaction());
  }
  if (from.has_severity()) {
    _internal_mutable_severity()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_severity());
  }
}

void AnesthesiaMachineExpiratoryValveLeakData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveLeakData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnesthesiaMachineExpiratoryValveLeakData::CopyFrom(const AnesthesiaMachineExpiratoryValveLeakData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveLeakData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnesthesiaMachineExpiratoryValveLeakData::IsInitialized() const {
  return true;
}

void AnesthesiaMachineExpiratoryValveLeakData::InternalSwap(AnesthesiaMachineExpiratoryValveLeakData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(anesthesiamachineaction_, other->anesthesiamachineaction_);
  swap(severity_, other->severity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnesthesiaMachineExpiratoryValveLeakData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnesthesiaMachineExpiratoryValveObstructionData::InitAsDefaultInstance() {
  ::pulse::cdm::bind::_AnesthesiaMachineExpiratoryValveObstructionData_default_instance_._instance.get_mutable()->anesthesiamachineaction_ = const_cast< ::pulse::cdm::bind::AnesthesiaMachineActionData*>(
      ::pulse::cdm::bind::AnesthesiaMachineActionData::internal_default_instance());
  ::pulse::cdm::bind::_AnesthesiaMachineExpiratoryValveObstructionData_default_instance_._instance.get_mutable()->severity_ = const_cast< ::pulse::cdm::bind::Scalar0To1Data*>(
      ::pulse::cdm::bind::Scalar0To1Data::internal_default_instance());
}
class AnesthesiaMachineExpiratoryValveObstructionData::_Internal {
 public:
  static const ::pulse::cdm::bind::AnesthesiaMachineActionData& anesthesiamachineaction(const AnesthesiaMachineExpiratoryValveObstructionData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& severity(const AnesthesiaMachineExpiratoryValveObstructionData* msg);
};

const ::pulse::cdm::bind::AnesthesiaMachineActionData&
AnesthesiaMachineExpiratoryValveObstructionData::_Internal::anesthesiamachineaction(const AnesthesiaMachineExpiratoryValveObstructionData* msg) {
  return *msg->anesthesiamachineaction_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
AnesthesiaMachineExpiratoryValveObstructionData::_Internal::severity(const AnesthesiaMachineExpiratoryValveObstructionData* msg) {
  return *msg->severity_;
}
void AnesthesiaMachineExpiratoryValveObstructionData::clear_severity() {
  if (GetArenaNoVirtual() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
}
AnesthesiaMachineExpiratoryValveObstructionData::AnesthesiaMachineExpiratoryValveObstructionData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveObstructionData)
}
AnesthesiaMachineExpiratoryValveObstructionData::AnesthesiaMachineExpiratoryValveObstructionData(const AnesthesiaMachineExpiratoryValveObstructionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_anesthesiamachineaction()) {
    anesthesiamachineaction_ = new ::pulse::cdm::bind::AnesthesiaMachineActionData(*from.anesthesiamachineaction_);
  } else {
    anesthesiamachineaction_ = nullptr;
  }
  if (from._internal_has_severity()) {
    severity_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.severity_);
  } else {
    severity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveObstructionData)
}

void AnesthesiaMachineExpiratoryValveObstructionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnesthesiaMachineExpiratoryValveObstructionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base);
  ::memset(&anesthesiamachineaction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&severity_) -
      reinterpret_cast<char*>(&anesthesiamachineaction_)) + sizeof(severity_));
}

AnesthesiaMachineExpiratoryValveObstructionData::~AnesthesiaMachineExpiratoryValveObstructionData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveObstructionData)
  SharedDtor();
}

void AnesthesiaMachineExpiratoryValveObstructionData::SharedDtor() {
  if (this != internal_default_instance()) delete anesthesiamachineaction_;
  if (this != internal_default_instance()) delete severity_;
}

void AnesthesiaMachineExpiratoryValveObstructionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnesthesiaMachineExpiratoryValveObstructionData& AnesthesiaMachineExpiratoryValveObstructionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnesthesiaMachineExpiratoryValveObstructionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base);
  return *internal_default_instance();
}


void AnesthesiaMachineExpiratoryValveObstructionData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveObstructionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && anesthesiamachineaction_ != nullptr) {
    delete anesthesiamachineaction_;
  }
  anesthesiamachineaction_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AnesthesiaMachineExpiratoryValveObstructionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_anesthesiamachineaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_severity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnesthesiaMachineExpiratoryValveObstructionData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveObstructionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
  if (this->has_anesthesiamachineaction()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::anesthesiamachineaction(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::severity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveObstructionData)
  return target;
}

size_t AnesthesiaMachineExpiratoryValveObstructionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveObstructionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
  if (this->has_anesthesiamachineaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *anesthesiamachineaction_);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *severity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnesthesiaMachineExpiratoryValveObstructionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveObstructionData)
  GOOGLE_DCHECK_NE(&from, this);
  const AnesthesiaMachineExpiratoryValveObstructionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnesthesiaMachineExpiratoryValveObstructionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveObstructionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveObstructionData)
    MergeFrom(*source);
  }
}

void AnesthesiaMachineExpiratoryValveObstructionData::MergeFrom(const AnesthesiaMachineExpiratoryValveObstructionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveObstructionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_anesthesiamachineaction()) {
    _internal_mutable_anesthesiamachineaction()->::pulse::cdm::bind::AnesthesiaMachineActionData::MergeFrom(from._internal_anesthesiamachineaction());
  }
  if (from.has_severity()) {
    _internal_mutable_severity()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_severity());
  }
}

void AnesthesiaMachineExpiratoryValveObstructionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveObstructionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnesthesiaMachineExpiratoryValveObstructionData::CopyFrom(const AnesthesiaMachineExpiratoryValveObstructionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveObstructionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnesthesiaMachineExpiratoryValveObstructionData::IsInitialized() const {
  return true;
}

void AnesthesiaMachineExpiratoryValveObstructionData::InternalSwap(AnesthesiaMachineExpiratoryValveObstructionData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(anesthesiamachineaction_, other->anesthesiamachineaction_);
  swap(severity_, other->severity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnesthesiaMachineExpiratoryValveObstructionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnesthesiaMachineInspiratoryValveLeakData::InitAsDefaultInstance() {
  ::pulse::cdm::bind::_AnesthesiaMachineInspiratoryValveLeakData_default_instance_._instance.get_mutable()->anesthesiamachineaction_ = const_cast< ::pulse::cdm::bind::AnesthesiaMachineActionData*>(
      ::pulse::cdm::bind::AnesthesiaMachineActionData::internal_default_instance());
  ::pulse::cdm::bind::_AnesthesiaMachineInspiratoryValveLeakData_default_instance_._instance.get_mutable()->severity_ = const_cast< ::pulse::cdm::bind::Scalar0To1Data*>(
      ::pulse::cdm::bind::Scalar0To1Data::internal_default_instance());
}
class AnesthesiaMachineInspiratoryValveLeakData::_Internal {
 public:
  static const ::pulse::cdm::bind::AnesthesiaMachineActionData& anesthesiamachineaction(const AnesthesiaMachineInspiratoryValveLeakData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& severity(const AnesthesiaMachineInspiratoryValveLeakData* msg);
};

const ::pulse::cdm::bind::AnesthesiaMachineActionData&
AnesthesiaMachineInspiratoryValveLeakData::_Internal::anesthesiamachineaction(const AnesthesiaMachineInspiratoryValveLeakData* msg) {
  return *msg->anesthesiamachineaction_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
AnesthesiaMachineInspiratoryValveLeakData::_Internal::severity(const AnesthesiaMachineInspiratoryValveLeakData* msg) {
  return *msg->severity_;
}
void AnesthesiaMachineInspiratoryValveLeakData::clear_severity() {
  if (GetArenaNoVirtual() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
}
AnesthesiaMachineInspiratoryValveLeakData::AnesthesiaMachineInspiratoryValveLeakData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveLeakData)
}
AnesthesiaMachineInspiratoryValveLeakData::AnesthesiaMachineInspiratoryValveLeakData(const AnesthesiaMachineInspiratoryValveLeakData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_anesthesiamachineaction()) {
    anesthesiamachineaction_ = new ::pulse::cdm::bind::AnesthesiaMachineActionData(*from.anesthesiamachineaction_);
  } else {
    anesthesiamachineaction_ = nullptr;
  }
  if (from._internal_has_severity()) {
    severity_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.severity_);
  } else {
    severity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveLeakData)
}

void AnesthesiaMachineInspiratoryValveLeakData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnesthesiaMachineInspiratoryValveLeakData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base);
  ::memset(&anesthesiamachineaction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&severity_) -
      reinterpret_cast<char*>(&anesthesiamachineaction_)) + sizeof(severity_));
}

AnesthesiaMachineInspiratoryValveLeakData::~AnesthesiaMachineInspiratoryValveLeakData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveLeakData)
  SharedDtor();
}

void AnesthesiaMachineInspiratoryValveLeakData::SharedDtor() {
  if (this != internal_default_instance()) delete anesthesiamachineaction_;
  if (this != internal_default_instance()) delete severity_;
}

void AnesthesiaMachineInspiratoryValveLeakData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnesthesiaMachineInspiratoryValveLeakData& AnesthesiaMachineInspiratoryValveLeakData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnesthesiaMachineInspiratoryValveLeakData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base);
  return *internal_default_instance();
}


void AnesthesiaMachineInspiratoryValveLeakData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveLeakData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && anesthesiamachineaction_ != nullptr) {
    delete anesthesiamachineaction_;
  }
  anesthesiamachineaction_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AnesthesiaMachineInspiratoryValveLeakData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_anesthesiamachineaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_severity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnesthesiaMachineInspiratoryValveLeakData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveLeakData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
  if (this->has_anesthesiamachineaction()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::anesthesiamachineaction(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::severity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveLeakData)
  return target;
}

size_t AnesthesiaMachineInspiratoryValveLeakData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveLeakData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
  if (this->has_anesthesiamachineaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *anesthesiamachineaction_);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *severity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnesthesiaMachineInspiratoryValveLeakData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveLeakData)
  GOOGLE_DCHECK_NE(&from, this);
  const AnesthesiaMachineInspiratoryValveLeakData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnesthesiaMachineInspiratoryValveLeakData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveLeakData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveLeakData)
    MergeFrom(*source);
  }
}

void AnesthesiaMachineInspiratoryValveLeakData::MergeFrom(const AnesthesiaMachineInspiratoryValveLeakData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveLeakData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_anesthesiamachineaction()) {
    _internal_mutable_anesthesiamachineaction()->::pulse::cdm::bind::AnesthesiaMachineActionData::MergeFrom(from._internal_anesthesiamachineaction());
  }
  if (from.has_severity()) {
    _internal_mutable_severity()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_severity());
  }
}

void AnesthesiaMachineInspiratoryValveLeakData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveLeakData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnesthesiaMachineInspiratoryValveLeakData::CopyFrom(const AnesthesiaMachineInspiratoryValveLeakData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveLeakData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnesthesiaMachineInspiratoryValveLeakData::IsInitialized() const {
  return true;
}

void AnesthesiaMachineInspiratoryValveLeakData::InternalSwap(AnesthesiaMachineInspiratoryValveLeakData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(anesthesiamachineaction_, other->anesthesiamachineaction_);
  swap(severity_, other->severity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnesthesiaMachineInspiratoryValveLeakData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnesthesiaMachineInspiratoryValveObstructionData::InitAsDefaultInstance() {
  ::pulse::cdm::bind::_AnesthesiaMachineInspiratoryValveObstructionData_default_instance_._instance.get_mutable()->anesthesiamachineaction_ = const_cast< ::pulse::cdm::bind::AnesthesiaMachineActionData*>(
      ::pulse::cdm::bind::AnesthesiaMachineActionData::internal_default_instance());
  ::pulse::cdm::bind::_AnesthesiaMachineInspiratoryValveObstructionData_default_instance_._instance.get_mutable()->severity_ = const_cast< ::pulse::cdm::bind::Scalar0To1Data*>(
      ::pulse::cdm::bind::Scalar0To1Data::internal_default_instance());
}
class AnesthesiaMachineInspiratoryValveObstructionData::_Internal {
 public:
  static const ::pulse::cdm::bind::AnesthesiaMachineActionData& anesthesiamachineaction(const AnesthesiaMachineInspiratoryValveObstructionData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& severity(const AnesthesiaMachineInspiratoryValveObstructionData* msg);
};

const ::pulse::cdm::bind::AnesthesiaMachineActionData&
AnesthesiaMachineInspiratoryValveObstructionData::_Internal::anesthesiamachineaction(const AnesthesiaMachineInspiratoryValveObstructionData* msg) {
  return *msg->anesthesiamachineaction_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
AnesthesiaMachineInspiratoryValveObstructionData::_Internal::severity(const AnesthesiaMachineInspiratoryValveObstructionData* msg) {
  return *msg->severity_;
}
void AnesthesiaMachineInspiratoryValveObstructionData::clear_severity() {
  if (GetArenaNoVirtual() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
}
AnesthesiaMachineInspiratoryValveObstructionData::AnesthesiaMachineInspiratoryValveObstructionData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveObstructionData)
}
AnesthesiaMachineInspiratoryValveObstructionData::AnesthesiaMachineInspiratoryValveObstructionData(const AnesthesiaMachineInspiratoryValveObstructionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_anesthesiamachineaction()) {
    anesthesiamachineaction_ = new ::pulse::cdm::bind::AnesthesiaMachineActionData(*from.anesthesiamachineaction_);
  } else {
    anesthesiamachineaction_ = nullptr;
  }
  if (from._internal_has_severity()) {
    severity_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.severity_);
  } else {
    severity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveObstructionData)
}

void AnesthesiaMachineInspiratoryValveObstructionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnesthesiaMachineInspiratoryValveObstructionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base);
  ::memset(&anesthesiamachineaction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&severity_) -
      reinterpret_cast<char*>(&anesthesiamachineaction_)) + sizeof(severity_));
}

AnesthesiaMachineInspiratoryValveObstructionData::~AnesthesiaMachineInspiratoryValveObstructionData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveObstructionData)
  SharedDtor();
}

void AnesthesiaMachineInspiratoryValveObstructionData::SharedDtor() {
  if (this != internal_default_instance()) delete anesthesiamachineaction_;
  if (this != internal_default_instance()) delete severity_;
}

void AnesthesiaMachineInspiratoryValveObstructionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnesthesiaMachineInspiratoryValveObstructionData& AnesthesiaMachineInspiratoryValveObstructionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnesthesiaMachineInspiratoryValveObstructionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base);
  return *internal_default_instance();
}


void AnesthesiaMachineInspiratoryValveObstructionData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveObstructionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && anesthesiamachineaction_ != nullptr) {
    delete anesthesiamachineaction_;
  }
  anesthesiamachineaction_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AnesthesiaMachineInspiratoryValveObstructionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_anesthesiamachineaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_severity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnesthesiaMachineInspiratoryValveObstructionData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveObstructionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
  if (this->has_anesthesiamachineaction()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::anesthesiamachineaction(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::severity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveObstructionData)
  return target;
}

size_t AnesthesiaMachineInspiratoryValveObstructionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveObstructionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
  if (this->has_anesthesiamachineaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *anesthesiamachineaction_);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *severity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnesthesiaMachineInspiratoryValveObstructionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveObstructionData)
  GOOGLE_DCHECK_NE(&from, this);
  const AnesthesiaMachineInspiratoryValveObstructionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnesthesiaMachineInspiratoryValveObstructionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveObstructionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveObstructionData)
    MergeFrom(*source);
  }
}

void AnesthesiaMachineInspiratoryValveObstructionData::MergeFrom(const AnesthesiaMachineInspiratoryValveObstructionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveObstructionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_anesthesiamachineaction()) {
    _internal_mutable_anesthesiamachineaction()->::pulse::cdm::bind::AnesthesiaMachineActionData::MergeFrom(from._internal_anesthesiamachineaction());
  }
  if (from.has_severity()) {
    _internal_mutable_severity()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_severity());
  }
}

void AnesthesiaMachineInspiratoryValveObstructionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveObstructionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnesthesiaMachineInspiratoryValveObstructionData::CopyFrom(const AnesthesiaMachineInspiratoryValveObstructionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveObstructionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnesthesiaMachineInspiratoryValveObstructionData::IsInitialized() const {
  return true;
}

void AnesthesiaMachineInspiratoryValveObstructionData::InternalSwap(AnesthesiaMachineInspiratoryValveObstructionData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(anesthesiamachineaction_, other->anesthesiamachineaction_);
  swap(severity_, other->severity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnesthesiaMachineInspiratoryValveObstructionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnesthesiaMachineMaskLeakData::InitAsDefaultInstance() {
  ::pulse::cdm::bind::_AnesthesiaMachineMaskLeakData_default_instance_._instance.get_mutable()->anesthesiamachineaction_ = const_cast< ::pulse::cdm::bind::AnesthesiaMachineActionData*>(
      ::pulse::cdm::bind::AnesthesiaMachineActionData::internal_default_instance());
  ::pulse::cdm::bind::_AnesthesiaMachineMaskLeakData_default_instance_._instance.get_mutable()->severity_ = const_cast< ::pulse::cdm::bind::Scalar0To1Data*>(
      ::pulse::cdm::bind::Scalar0To1Data::internal_default_instance());
}
class AnesthesiaMachineMaskLeakData::_Internal {
 public:
  static const ::pulse::cdm::bind::AnesthesiaMachineActionData& anesthesiamachineaction(const AnesthesiaMachineMaskLeakData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& severity(const AnesthesiaMachineMaskLeakData* msg);
};

const ::pulse::cdm::bind::AnesthesiaMachineActionData&
AnesthesiaMachineMaskLeakData::_Internal::anesthesiamachineaction(const AnesthesiaMachineMaskLeakData* msg) {
  return *msg->anesthesiamachineaction_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
AnesthesiaMachineMaskLeakData::_Internal::severity(const AnesthesiaMachineMaskLeakData* msg) {
  return *msg->severity_;
}
void AnesthesiaMachineMaskLeakData::clear_severity() {
  if (GetArenaNoVirtual() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
}
AnesthesiaMachineMaskLeakData::AnesthesiaMachineMaskLeakData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pulse.cdm.bind.AnesthesiaMachineMaskLeakData)
}
AnesthesiaMachineMaskLeakData::AnesthesiaMachineMaskLeakData(const AnesthesiaMachineMaskLeakData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_anesthesiamachineaction()) {
    anesthesiamachineaction_ = new ::pulse::cdm::bind::AnesthesiaMachineActionData(*from.anesthesiamachineaction_);
  } else {
    anesthesiamachineaction_ = nullptr;
  }
  if (from._internal_has_severity()) {
    severity_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.severity_);
  } else {
    severity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.AnesthesiaMachineMaskLeakData)
}

void AnesthesiaMachineMaskLeakData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnesthesiaMachineMaskLeakData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base);
  ::memset(&anesthesiamachineaction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&severity_) -
      reinterpret_cast<char*>(&anesthesiamachineaction_)) + sizeof(severity_));
}

AnesthesiaMachineMaskLeakData::~AnesthesiaMachineMaskLeakData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.AnesthesiaMachineMaskLeakData)
  SharedDtor();
}

void AnesthesiaMachineMaskLeakData::SharedDtor() {
  if (this != internal_default_instance()) delete anesthesiamachineaction_;
  if (this != internal_default_instance()) delete severity_;
}

void AnesthesiaMachineMaskLeakData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnesthesiaMachineMaskLeakData& AnesthesiaMachineMaskLeakData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnesthesiaMachineMaskLeakData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base);
  return *internal_default_instance();
}


void AnesthesiaMachineMaskLeakData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.AnesthesiaMachineMaskLeakData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && anesthesiamachineaction_ != nullptr) {
    delete anesthesiamachineaction_;
  }
  anesthesiamachineaction_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AnesthesiaMachineMaskLeakData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_anesthesiamachineaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_severity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnesthesiaMachineMaskLeakData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.AnesthesiaMachineMaskLeakData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
  if (this->has_anesthesiamachineaction()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::anesthesiamachineaction(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::severity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.AnesthesiaMachineMaskLeakData)
  return target;
}

size_t AnesthesiaMachineMaskLeakData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.AnesthesiaMachineMaskLeakData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
  if (this->has_anesthesiamachineaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *anesthesiamachineaction_);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *severity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnesthesiaMachineMaskLeakData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.AnesthesiaMachineMaskLeakData)
  GOOGLE_DCHECK_NE(&from, this);
  const AnesthesiaMachineMaskLeakData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnesthesiaMachineMaskLeakData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.AnesthesiaMachineMaskLeakData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.AnesthesiaMachineMaskLeakData)
    MergeFrom(*source);
  }
}

void AnesthesiaMachineMaskLeakData::MergeFrom(const AnesthesiaMachineMaskLeakData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.AnesthesiaMachineMaskLeakData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_anesthesiamachineaction()) {
    _internal_mutable_anesthesiamachineaction()->::pulse::cdm::bind::AnesthesiaMachineActionData::MergeFrom(from._internal_anesthesiamachineaction());
  }
  if (from.has_severity()) {
    _internal_mutable_severity()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_severity());
  }
}

void AnesthesiaMachineMaskLeakData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.AnesthesiaMachineMaskLeakData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnesthesiaMachineMaskLeakData::CopyFrom(const AnesthesiaMachineMaskLeakData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.AnesthesiaMachineMaskLeakData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnesthesiaMachineMaskLeakData::IsInitialized() const {
  return true;
}

void AnesthesiaMachineMaskLeakData::InternalSwap(AnesthesiaMachineMaskLeakData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(anesthesiamachineaction_, other->anesthesiamachineaction_);
  swap(severity_, other->severity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnesthesiaMachineMaskLeakData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnesthesiaMachineSodaLimeFailureData::InitAsDefaultInstance() {
  ::pulse::cdm::bind::_AnesthesiaMachineSodaLimeFailureData_default_instance_._instance.get_mutable()->anesthesiamachineaction_ = const_cast< ::pulse::cdm::bind::AnesthesiaMachineActionData*>(
      ::pulse::cdm::bind::AnesthesiaMachineActionData::internal_default_instance());
  ::pulse::cdm::bind::_AnesthesiaMachineSodaLimeFailureData_default_instance_._instance.get_mutable()->severity_ = const_cast< ::pulse::cdm::bind::Scalar0To1Data*>(
      ::pulse::cdm::bind::Scalar0To1Data::internal_default_instance());
}
class AnesthesiaMachineSodaLimeFailureData::_Internal {
 public:
  static const ::pulse::cdm::bind::AnesthesiaMachineActionData& anesthesiamachineaction(const AnesthesiaMachineSodaLimeFailureData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& severity(const AnesthesiaMachineSodaLimeFailureData* msg);
};

const ::pulse::cdm::bind::AnesthesiaMachineActionData&
AnesthesiaMachineSodaLimeFailureData::_Internal::anesthesiamachineaction(const AnesthesiaMachineSodaLimeFailureData* msg) {
  return *msg->anesthesiamachineaction_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
AnesthesiaMachineSodaLimeFailureData::_Internal::severity(const AnesthesiaMachineSodaLimeFailureData* msg) {
  return *msg->severity_;
}
void AnesthesiaMachineSodaLimeFailureData::clear_severity() {
  if (GetArenaNoVirtual() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
}
AnesthesiaMachineSodaLimeFailureData::AnesthesiaMachineSodaLimeFailureData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pulse.cdm.bind.AnesthesiaMachineSodaLimeFailureData)
}
AnesthesiaMachineSodaLimeFailureData::AnesthesiaMachineSodaLimeFailureData(const AnesthesiaMachineSodaLimeFailureData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_anesthesiamachineaction()) {
    anesthesiamachineaction_ = new ::pulse::cdm::bind::AnesthesiaMachineActionData(*from.anesthesiamachineaction_);
  } else {
    anesthesiamachineaction_ = nullptr;
  }
  if (from._internal_has_severity()) {
    severity_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.severity_);
  } else {
    severity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.AnesthesiaMachineSodaLimeFailureData)
}

void AnesthesiaMachineSodaLimeFailureData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnesthesiaMachineSodaLimeFailureData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base);
  ::memset(&anesthesiamachineaction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&severity_) -
      reinterpret_cast<char*>(&anesthesiamachineaction_)) + sizeof(severity_));
}

AnesthesiaMachineSodaLimeFailureData::~AnesthesiaMachineSodaLimeFailureData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.AnesthesiaMachineSodaLimeFailureData)
  SharedDtor();
}

void AnesthesiaMachineSodaLimeFailureData::SharedDtor() {
  if (this != internal_default_instance()) delete anesthesiamachineaction_;
  if (this != internal_default_instance()) delete severity_;
}

void AnesthesiaMachineSodaLimeFailureData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnesthesiaMachineSodaLimeFailureData& AnesthesiaMachineSodaLimeFailureData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnesthesiaMachineSodaLimeFailureData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base);
  return *internal_default_instance();
}


void AnesthesiaMachineSodaLimeFailureData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.AnesthesiaMachineSodaLimeFailureData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && anesthesiamachineaction_ != nullptr) {
    delete anesthesiamachineaction_;
  }
  anesthesiamachineaction_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AnesthesiaMachineSodaLimeFailureData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_anesthesiamachineaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_severity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnesthesiaMachineSodaLimeFailureData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.AnesthesiaMachineSodaLimeFailureData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
  if (this->has_anesthesiamachineaction()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::anesthesiamachineaction(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::severity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.AnesthesiaMachineSodaLimeFailureData)
  return target;
}

size_t AnesthesiaMachineSodaLimeFailureData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.AnesthesiaMachineSodaLimeFailureData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
  if (this->has_anesthesiamachineaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *anesthesiamachineaction_);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *severity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnesthesiaMachineSodaLimeFailureData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.AnesthesiaMachineSodaLimeFailureData)
  GOOGLE_DCHECK_NE(&from, this);
  const AnesthesiaMachineSodaLimeFailureData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnesthesiaMachineSodaLimeFailureData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.AnesthesiaMachineSodaLimeFailureData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.AnesthesiaMachineSodaLimeFailureData)
    MergeFrom(*source);
  }
}

void AnesthesiaMachineSodaLimeFailureData::MergeFrom(const AnesthesiaMachineSodaLimeFailureData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.AnesthesiaMachineSodaLimeFailureData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_anesthesiamachineaction()) {
    _internal_mutable_anesthesiamachineaction()->::pulse::cdm::bind::AnesthesiaMachineActionData::MergeFrom(from._internal_anesthesiamachineaction());
  }
  if (from.has_severity()) {
    _internal_mutable_severity()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_severity());
  }
}

void AnesthesiaMachineSodaLimeFailureData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.AnesthesiaMachineSodaLimeFailureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnesthesiaMachineSodaLimeFailureData::CopyFrom(const AnesthesiaMachineSodaLimeFailureData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.AnesthesiaMachineSodaLimeFailureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnesthesiaMachineSodaLimeFailureData::IsInitialized() const {
  return true;
}

void AnesthesiaMachineSodaLimeFailureData::InternalSwap(AnesthesiaMachineSodaLimeFailureData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(anesthesiamachineaction_, other->anesthesiamachineaction_);
  swap(severity_, other->severity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnesthesiaMachineSodaLimeFailureData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnesthesiaMachineTubeCuffLeakData::InitAsDefaultInstance() {
  ::pulse::cdm::bind::_AnesthesiaMachineTubeCuffLeakData_default_instance_._instance.get_mutable()->anesthesiamachineaction_ = const_cast< ::pulse::cdm::bind::AnesthesiaMachineActionData*>(
      ::pulse::cdm::bind::AnesthesiaMachineActionData::internal_default_instance());
  ::pulse::cdm::bind::_AnesthesiaMachineTubeCuffLeakData_default_instance_._instance.get_mutable()->severity_ = const_cast< ::pulse::cdm::bind::Scalar0To1Data*>(
      ::pulse::cdm::bind::Scalar0To1Data::internal_default_instance());
}
class AnesthesiaMachineTubeCuffLeakData::_Internal {
 public:
  static const ::pulse::cdm::bind::AnesthesiaMachineActionData& anesthesiamachineaction(const AnesthesiaMachineTubeCuffLeakData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& severity(const AnesthesiaMachineTubeCuffLeakData* msg);
};

const ::pulse::cdm::bind::AnesthesiaMachineActionData&
AnesthesiaMachineTubeCuffLeakData::_Internal::anesthesiamachineaction(const AnesthesiaMachineTubeCuffLeakData* msg) {
  return *msg->anesthesiamachineaction_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
AnesthesiaMachineTubeCuffLeakData::_Internal::severity(const AnesthesiaMachineTubeCuffLeakData* msg) {
  return *msg->severity_;
}
void AnesthesiaMachineTubeCuffLeakData::clear_severity() {
  if (GetArenaNoVirtual() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
}
AnesthesiaMachineTubeCuffLeakData::AnesthesiaMachineTubeCuffLeakData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pulse.cdm.bind.AnesthesiaMachineTubeCuffLeakData)
}
AnesthesiaMachineTubeCuffLeakData::AnesthesiaMachineTubeCuffLeakData(const AnesthesiaMachineTubeCuffLeakData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_anesthesiamachineaction()) {
    anesthesiamachineaction_ = new ::pulse::cdm::bind::AnesthesiaMachineActionData(*from.anesthesiamachineaction_);
  } else {
    anesthesiamachineaction_ = nullptr;
  }
  if (from._internal_has_severity()) {
    severity_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.severity_);
  } else {
    severity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.AnesthesiaMachineTubeCuffLeakData)
}

void AnesthesiaMachineTubeCuffLeakData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnesthesiaMachineTubeCuffLeakData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base);
  ::memset(&anesthesiamachineaction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&severity_) -
      reinterpret_cast<char*>(&anesthesiamachineaction_)) + sizeof(severity_));
}

AnesthesiaMachineTubeCuffLeakData::~AnesthesiaMachineTubeCuffLeakData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.AnesthesiaMachineTubeCuffLeakData)
  SharedDtor();
}

void AnesthesiaMachineTubeCuffLeakData::SharedDtor() {
  if (this != internal_default_instance()) delete anesthesiamachineaction_;
  if (this != internal_default_instance()) delete severity_;
}

void AnesthesiaMachineTubeCuffLeakData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnesthesiaMachineTubeCuffLeakData& AnesthesiaMachineTubeCuffLeakData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnesthesiaMachineTubeCuffLeakData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base);
  return *internal_default_instance();
}


void AnesthesiaMachineTubeCuffLeakData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.AnesthesiaMachineTubeCuffLeakData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && anesthesiamachineaction_ != nullptr) {
    delete anesthesiamachineaction_;
  }
  anesthesiamachineaction_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AnesthesiaMachineTubeCuffLeakData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_anesthesiamachineaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_severity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnesthesiaMachineTubeCuffLeakData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.AnesthesiaMachineTubeCuffLeakData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
  if (this->has_anesthesiamachineaction()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::anesthesiamachineaction(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::severity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.AnesthesiaMachineTubeCuffLeakData)
  return target;
}

size_t AnesthesiaMachineTubeCuffLeakData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.AnesthesiaMachineTubeCuffLeakData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
  if (this->has_anesthesiamachineaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *anesthesiamachineaction_);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *severity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnesthesiaMachineTubeCuffLeakData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.AnesthesiaMachineTubeCuffLeakData)
  GOOGLE_DCHECK_NE(&from, this);
  const AnesthesiaMachineTubeCuffLeakData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnesthesiaMachineTubeCuffLeakData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.AnesthesiaMachineTubeCuffLeakData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.AnesthesiaMachineTubeCuffLeakData)
    MergeFrom(*source);
  }
}

void AnesthesiaMachineTubeCuffLeakData::MergeFrom(const AnesthesiaMachineTubeCuffLeakData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.AnesthesiaMachineTubeCuffLeakData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_anesthesiamachineaction()) {
    _internal_mutable_anesthesiamachineaction()->::pulse::cdm::bind::AnesthesiaMachineActionData::MergeFrom(from._internal_anesthesiamachineaction());
  }
  if (from.has_severity()) {
    _internal_mutable_severity()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_severity());
  }
}

void AnesthesiaMachineTubeCuffLeakData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.AnesthesiaMachineTubeCuffLeakData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnesthesiaMachineTubeCuffLeakData::CopyFrom(const AnesthesiaMachineTubeCuffLeakData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.AnesthesiaMachineTubeCuffLeakData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnesthesiaMachineTubeCuffLeakData::IsInitialized() const {
  return true;
}

void AnesthesiaMachineTubeCuffLeakData::InternalSwap(AnesthesiaMachineTubeCuffLeakData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(anesthesiamachineaction_, other->anesthesiamachineaction_);
  swap(severity_, other->severity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnesthesiaMachineTubeCuffLeakData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnesthesiaMachineVaporizerFailureData::InitAsDefaultInstance() {
  ::pulse::cdm::bind::_AnesthesiaMachineVaporizerFailureData_default_instance_._instance.get_mutable()->anesthesiamachineaction_ = const_cast< ::pulse::cdm::bind::AnesthesiaMachineActionData*>(
      ::pulse::cdm::bind::AnesthesiaMachineActionData::internal_default_instance());
  ::pulse::cdm::bind::_AnesthesiaMachineVaporizerFailureData_default_instance_._instance.get_mutable()->severity_ = const_cast< ::pulse::cdm::bind::Scalar0To1Data*>(
      ::pulse::cdm::bind::Scalar0To1Data::internal_default_instance());
}
class AnesthesiaMachineVaporizerFailureData::_Internal {
 public:
  static const ::pulse::cdm::bind::AnesthesiaMachineActionData& anesthesiamachineaction(const AnesthesiaMachineVaporizerFailureData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& severity(const AnesthesiaMachineVaporizerFailureData* msg);
};

const ::pulse::cdm::bind::AnesthesiaMachineActionData&
AnesthesiaMachineVaporizerFailureData::_Internal::anesthesiamachineaction(const AnesthesiaMachineVaporizerFailureData* msg) {
  return *msg->anesthesiamachineaction_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
AnesthesiaMachineVaporizerFailureData::_Internal::severity(const AnesthesiaMachineVaporizerFailureData* msg) {
  return *msg->severity_;
}
void AnesthesiaMachineVaporizerFailureData::clear_severity() {
  if (GetArenaNoVirtual() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
}
AnesthesiaMachineVaporizerFailureData::AnesthesiaMachineVaporizerFailureData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pulse.cdm.bind.AnesthesiaMachineVaporizerFailureData)
}
AnesthesiaMachineVaporizerFailureData::AnesthesiaMachineVaporizerFailureData(const AnesthesiaMachineVaporizerFailureData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_anesthesiamachineaction()) {
    anesthesiamachineaction_ = new ::pulse::cdm::bind::AnesthesiaMachineActionData(*from.anesthesiamachineaction_);
  } else {
    anesthesiamachineaction_ = nullptr;
  }
  if (from._internal_has_severity()) {
    severity_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.severity_);
  } else {
    severity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.AnesthesiaMachineVaporizerFailureData)
}

void AnesthesiaMachineVaporizerFailureData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnesthesiaMachineVaporizerFailureData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base);
  ::memset(&anesthesiamachineaction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&severity_) -
      reinterpret_cast<char*>(&anesthesiamachineaction_)) + sizeof(severity_));
}

AnesthesiaMachineVaporizerFailureData::~AnesthesiaMachineVaporizerFailureData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.AnesthesiaMachineVaporizerFailureData)
  SharedDtor();
}

void AnesthesiaMachineVaporizerFailureData::SharedDtor() {
  if (this != internal_default_instance()) delete anesthesiamachineaction_;
  if (this != internal_default_instance()) delete severity_;
}

void AnesthesiaMachineVaporizerFailureData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnesthesiaMachineVaporizerFailureData& AnesthesiaMachineVaporizerFailureData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnesthesiaMachineVaporizerFailureData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base);
  return *internal_default_instance();
}


void AnesthesiaMachineVaporizerFailureData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.AnesthesiaMachineVaporizerFailureData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && anesthesiamachineaction_ != nullptr) {
    delete anesthesiamachineaction_;
  }
  anesthesiamachineaction_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AnesthesiaMachineVaporizerFailureData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_anesthesiamachineaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_severity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnesthesiaMachineVaporizerFailureData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.AnesthesiaMachineVaporizerFailureData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
  if (this->has_anesthesiamachineaction()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::anesthesiamachineaction(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::severity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.AnesthesiaMachineVaporizerFailureData)
  return target;
}

size_t AnesthesiaMachineVaporizerFailureData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.AnesthesiaMachineVaporizerFailureData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
  if (this->has_anesthesiamachineaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *anesthesiamachineaction_);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *severity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnesthesiaMachineVaporizerFailureData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.AnesthesiaMachineVaporizerFailureData)
  GOOGLE_DCHECK_NE(&from, this);
  const AnesthesiaMachineVaporizerFailureData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnesthesiaMachineVaporizerFailureData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.AnesthesiaMachineVaporizerFailureData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.AnesthesiaMachineVaporizerFailureData)
    MergeFrom(*source);
  }
}

void AnesthesiaMachineVaporizerFailureData::MergeFrom(const AnesthesiaMachineVaporizerFailureData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.AnesthesiaMachineVaporizerFailureData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_anesthesiamachineaction()) {
    _internal_mutable_anesthesiamachineaction()->::pulse::cdm::bind::AnesthesiaMachineActionData::MergeFrom(from._internal_anesthesiamachineaction());
  }
  if (from.has_severity()) {
    _internal_mutable_severity()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_severity());
  }
}

void AnesthesiaMachineVaporizerFailureData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.AnesthesiaMachineVaporizerFailureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnesthesiaMachineVaporizerFailureData::CopyFrom(const AnesthesiaMachineVaporizerFailureData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.AnesthesiaMachineVaporizerFailureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnesthesiaMachineVaporizerFailureData::IsInitialized() const {
  return true;
}

void AnesthesiaMachineVaporizerFailureData::InternalSwap(AnesthesiaMachineVaporizerFailureData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(anesthesiamachineaction_, other->anesthesiamachineaction_);
  swap(severity_, other->severity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnesthesiaMachineVaporizerFailureData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnesthesiaMachineVentilatorPressureLossData::InitAsDefaultInstance() {
  ::pulse::cdm::bind::_AnesthesiaMachineVentilatorPressureLossData_default_instance_._instance.get_mutable()->anesthesiamachineaction_ = const_cast< ::pulse::cdm::bind::AnesthesiaMachineActionData*>(
      ::pulse::cdm::bind::AnesthesiaMachineActionData::internal_default_instance());
  ::pulse::cdm::bind::_AnesthesiaMachineVentilatorPressureLossData_default_instance_._instance.get_mutable()->severity_ = const_cast< ::pulse::cdm::bind::Scalar0To1Data*>(
      ::pulse::cdm::bind::Scalar0To1Data::internal_default_instance());
}
class AnesthesiaMachineVentilatorPressureLossData::_Internal {
 public:
  static const ::pulse::cdm::bind::AnesthesiaMachineActionData& anesthesiamachineaction(const AnesthesiaMachineVentilatorPressureLossData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& severity(const AnesthesiaMachineVentilatorPressureLossData* msg);
};

const ::pulse::cdm::bind::AnesthesiaMachineActionData&
AnesthesiaMachineVentilatorPressureLossData::_Internal::anesthesiamachineaction(const AnesthesiaMachineVentilatorPressureLossData* msg) {
  return *msg->anesthesiamachineaction_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
AnesthesiaMachineVentilatorPressureLossData::_Internal::severity(const AnesthesiaMachineVentilatorPressureLossData* msg) {
  return *msg->severity_;
}
void AnesthesiaMachineVentilatorPressureLossData::clear_severity() {
  if (GetArenaNoVirtual() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
}
AnesthesiaMachineVentilatorPressureLossData::AnesthesiaMachineVentilatorPressureLossData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pulse.cdm.bind.AnesthesiaMachineVentilatorPressureLossData)
}
AnesthesiaMachineVentilatorPressureLossData::AnesthesiaMachineVentilatorPressureLossData(const AnesthesiaMachineVentilatorPressureLossData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_anesthesiamachineaction()) {
    anesthesiamachineaction_ = new ::pulse::cdm::bind::AnesthesiaMachineActionData(*from.anesthesiamachineaction_);
  } else {
    anesthesiamachineaction_ = nullptr;
  }
  if (from._internal_has_severity()) {
    severity_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.severity_);
  } else {
    severity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.AnesthesiaMachineVentilatorPressureLossData)
}

void AnesthesiaMachineVentilatorPressureLossData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnesthesiaMachineVentilatorPressureLossData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base);
  ::memset(&anesthesiamachineaction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&severity_) -
      reinterpret_cast<char*>(&anesthesiamachineaction_)) + sizeof(severity_));
}

AnesthesiaMachineVentilatorPressureLossData::~AnesthesiaMachineVentilatorPressureLossData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.AnesthesiaMachineVentilatorPressureLossData)
  SharedDtor();
}

void AnesthesiaMachineVentilatorPressureLossData::SharedDtor() {
  if (this != internal_default_instance()) delete anesthesiamachineaction_;
  if (this != internal_default_instance()) delete severity_;
}

void AnesthesiaMachineVentilatorPressureLossData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnesthesiaMachineVentilatorPressureLossData& AnesthesiaMachineVentilatorPressureLossData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnesthesiaMachineVentilatorPressureLossData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base);
  return *internal_default_instance();
}


void AnesthesiaMachineVentilatorPressureLossData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.AnesthesiaMachineVentilatorPressureLossData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && anesthesiamachineaction_ != nullptr) {
    delete anesthesiamachineaction_;
  }
  anesthesiamachineaction_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AnesthesiaMachineVentilatorPressureLossData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_anesthesiamachineaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_severity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnesthesiaMachineVentilatorPressureLossData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.AnesthesiaMachineVentilatorPressureLossData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
  if (this->has_anesthesiamachineaction()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::anesthesiamachineaction(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::severity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.AnesthesiaMachineVentilatorPressureLossData)
  return target;
}

size_t AnesthesiaMachineVentilatorPressureLossData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.AnesthesiaMachineVentilatorPressureLossData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
  if (this->has_anesthesiamachineaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *anesthesiamachineaction_);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *severity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnesthesiaMachineVentilatorPressureLossData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.AnesthesiaMachineVentilatorPressureLossData)
  GOOGLE_DCHECK_NE(&from, this);
  const AnesthesiaMachineVentilatorPressureLossData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnesthesiaMachineVentilatorPressureLossData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.AnesthesiaMachineVentilatorPressureLossData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.AnesthesiaMachineVentilatorPressureLossData)
    MergeFrom(*source);
  }
}

void AnesthesiaMachineVentilatorPressureLossData::MergeFrom(const AnesthesiaMachineVentilatorPressureLossData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.AnesthesiaMachineVentilatorPressureLossData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_anesthesiamachineaction()) {
    _internal_mutable_anesthesiamachineaction()->::pulse::cdm::bind::AnesthesiaMachineActionData::MergeFrom(from._internal_anesthesiamachineaction());
  }
  if (from.has_severity()) {
    _internal_mutable_severity()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_severity());
  }
}

void AnesthesiaMachineVentilatorPressureLossData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.AnesthesiaMachineVentilatorPressureLossData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnesthesiaMachineVentilatorPressureLossData::CopyFrom(const AnesthesiaMachineVentilatorPressureLossData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.AnesthesiaMachineVentilatorPressureLossData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnesthesiaMachineVentilatorPressureLossData::IsInitialized() const {
  return true;
}

void AnesthesiaMachineVentilatorPressureLossData::InternalSwap(AnesthesiaMachineVentilatorPressureLossData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(anesthesiamachineaction_, other->anesthesiamachineaction_);
  swap(severity_, other->severity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnesthesiaMachineVentilatorPressureLossData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnesthesiaMachineYPieceDisconnectData::InitAsDefaultInstance() {
  ::pulse::cdm::bind::_AnesthesiaMachineYPieceDisconnectData_default_instance_._instance.get_mutable()->anesthesiamachineaction_ = const_cast< ::pulse::cdm::bind::AnesthesiaMachineActionData*>(
      ::pulse::cdm::bind::AnesthesiaMachineActionData::internal_default_instance());
  ::pulse::cdm::bind::_AnesthesiaMachineYPieceDisconnectData_default_instance_._instance.get_mutable()->severity_ = const_cast< ::pulse::cdm::bind::Scalar0To1Data*>(
      ::pulse::cdm::bind::Scalar0To1Data::internal_default_instance());
}
class AnesthesiaMachineYPieceDisconnectData::_Internal {
 public:
  static const ::pulse::cdm::bind::AnesthesiaMachineActionData& anesthesiamachineaction(const AnesthesiaMachineYPieceDisconnectData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& severity(const AnesthesiaMachineYPieceDisconnectData* msg);
};

const ::pulse::cdm::bind::AnesthesiaMachineActionData&
AnesthesiaMachineYPieceDisconnectData::_Internal::anesthesiamachineaction(const AnesthesiaMachineYPieceDisconnectData* msg) {
  return *msg->anesthesiamachineaction_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
AnesthesiaMachineYPieceDisconnectData::_Internal::severity(const AnesthesiaMachineYPieceDisconnectData* msg) {
  return *msg->severity_;
}
void AnesthesiaMachineYPieceDisconnectData::clear_severity() {
  if (GetArenaNoVirtual() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
}
AnesthesiaMachineYPieceDisconnectData::AnesthesiaMachineYPieceDisconnectData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pulse.cdm.bind.AnesthesiaMachineYPieceDisconnectData)
}
AnesthesiaMachineYPieceDisconnectData::AnesthesiaMachineYPieceDisconnectData(const AnesthesiaMachineYPieceDisconnectData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_anesthesiamachineaction()) {
    anesthesiamachineaction_ = new ::pulse::cdm::bind::AnesthesiaMachineActionData(*from.anesthesiamachineaction_);
  } else {
    anesthesiamachineaction_ = nullptr;
  }
  if (from._internal_has_severity()) {
    severity_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.severity_);
  } else {
    severity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.AnesthesiaMachineYPieceDisconnectData)
}

void AnesthesiaMachineYPieceDisconnectData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnesthesiaMachineYPieceDisconnectData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base);
  ::memset(&anesthesiamachineaction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&severity_) -
      reinterpret_cast<char*>(&anesthesiamachineaction_)) + sizeof(severity_));
}

AnesthesiaMachineYPieceDisconnectData::~AnesthesiaMachineYPieceDisconnectData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.AnesthesiaMachineYPieceDisconnectData)
  SharedDtor();
}

void AnesthesiaMachineYPieceDisconnectData::SharedDtor() {
  if (this != internal_default_instance()) delete anesthesiamachineaction_;
  if (this != internal_default_instance()) delete severity_;
}

void AnesthesiaMachineYPieceDisconnectData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnesthesiaMachineYPieceDisconnectData& AnesthesiaMachineYPieceDisconnectData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnesthesiaMachineYPieceDisconnectData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base);
  return *internal_default_instance();
}


void AnesthesiaMachineYPieceDisconnectData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.AnesthesiaMachineYPieceDisconnectData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && anesthesiamachineaction_ != nullptr) {
    delete anesthesiamachineaction_;
  }
  anesthesiamachineaction_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AnesthesiaMachineYPieceDisconnectData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_anesthesiamachineaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_severity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnesthesiaMachineYPieceDisconnectData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.AnesthesiaMachineYPieceDisconnectData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
  if (this->has_anesthesiamachineaction()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::anesthesiamachineaction(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::severity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.AnesthesiaMachineYPieceDisconnectData)
  return target;
}

size_t AnesthesiaMachineYPieceDisconnectData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.AnesthesiaMachineYPieceDisconnectData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
  if (this->has_anesthesiamachineaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *anesthesiamachineaction_);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *severity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnesthesiaMachineYPieceDisconnectData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.AnesthesiaMachineYPieceDisconnectData)
  GOOGLE_DCHECK_NE(&from, this);
  const AnesthesiaMachineYPieceDisconnectData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnesthesiaMachineYPieceDisconnectData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.AnesthesiaMachineYPieceDisconnectData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.AnesthesiaMachineYPieceDisconnectData)
    MergeFrom(*source);
  }
}

void AnesthesiaMachineYPieceDisconnectData::MergeFrom(const AnesthesiaMachineYPieceDisconnectData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.AnesthesiaMachineYPieceDisconnectData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_anesthesiamachineaction()) {
    _internal_mutable_anesthesiamachineaction()->::pulse::cdm::bind::AnesthesiaMachineActionData::MergeFrom(from._internal_anesthesiamachineaction());
  }
  if (from.has_severity()) {
    _internal_mutable_severity()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_severity());
  }
}

void AnesthesiaMachineYPieceDisconnectData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.AnesthesiaMachineYPieceDisconnectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnesthesiaMachineYPieceDisconnectData::CopyFrom(const AnesthesiaMachineYPieceDisconnectData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.AnesthesiaMachineYPieceDisconnectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnesthesiaMachineYPieceDisconnectData::IsInitialized() const {
  return true;
}

void AnesthesiaMachineYPieceDisconnectData::InternalSwap(AnesthesiaMachineYPieceDisconnectData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(anesthesiamachineaction_, other->anesthesiamachineaction_);
  swap(severity_, other->severity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnesthesiaMachineYPieceDisconnectData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnesthesiaMachineOxygenWallPortPressureLossData::InitAsDefaultInstance() {
  ::pulse::cdm::bind::_AnesthesiaMachineOxygenWallPortPressureLossData_default_instance_._instance.get_mutable()->anesthesiamachineaction_ = const_cast< ::pulse::cdm::bind::AnesthesiaMachineActionData*>(
      ::pulse::cdm::bind::AnesthesiaMachineActionData::internal_default_instance());
}
class AnesthesiaMachineOxygenWallPortPressureLossData::_Internal {
 public:
  static const ::pulse::cdm::bind::AnesthesiaMachineActionData& anesthesiamachineaction(const AnesthesiaMachineOxygenWallPortPressureLossData* msg);
};

const ::pulse::cdm::bind::AnesthesiaMachineActionData&
AnesthesiaMachineOxygenWallPortPressureLossData::_Internal::anesthesiamachineaction(const AnesthesiaMachineOxygenWallPortPressureLossData* msg) {
  return *msg->anesthesiamachineaction_;
}
AnesthesiaMachineOxygenWallPortPressureLossData::AnesthesiaMachineOxygenWallPortPressureLossData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pulse.cdm.bind.AnesthesiaMachineOxygenWallPortPressureLossData)
}
AnesthesiaMachineOxygenWallPortPressureLossData::AnesthesiaMachineOxygenWallPortPressureLossData(const AnesthesiaMachineOxygenWallPortPressureLossData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_anesthesiamachineaction()) {
    anesthesiamachineaction_ = new ::pulse::cdm::bind::AnesthesiaMachineActionData(*from.anesthesiamachineaction_);
  } else {
    anesthesiamachineaction_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.AnesthesiaMachineOxygenWallPortPressureLossData)
}

void AnesthesiaMachineOxygenWallPortPressureLossData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnesthesiaMachineOxygenWallPortPressureLossData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base);
  ::memset(&anesthesiamachineaction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&anesthesiamachineaction_)) + sizeof(state_));
}

AnesthesiaMachineOxygenWallPortPressureLossData::~AnesthesiaMachineOxygenWallPortPressureLossData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.AnesthesiaMachineOxygenWallPortPressureLossData)
  SharedDtor();
}

void AnesthesiaMachineOxygenWallPortPressureLossData::SharedDtor() {
  if (this != internal_default_instance()) delete anesthesiamachineaction_;
}

void AnesthesiaMachineOxygenWallPortPressureLossData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnesthesiaMachineOxygenWallPortPressureLossData& AnesthesiaMachineOxygenWallPortPressureLossData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnesthesiaMachineOxygenWallPortPressureLossData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base);
  return *internal_default_instance();
}


void AnesthesiaMachineOxygenWallPortPressureLossData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.AnesthesiaMachineOxygenWallPortPressureLossData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && anesthesiamachineaction_ != nullptr) {
    delete anesthesiamachineaction_;
  }
  anesthesiamachineaction_ = nullptr;
  state_ = 0;
  _internal_metadata_.Clear();
}

const char* AnesthesiaMachineOxygenWallPortPressureLossData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_anesthesiamachineaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.eSwitch State = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::pulse::cdm::bind::eSwitch>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnesthesiaMachineOxygenWallPortPressureLossData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.AnesthesiaMachineOxygenWallPortPressureLossData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
  if (this->has_anesthesiamachineaction()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::anesthesiamachineaction(this), target, stream);
  }

  // .pulse.cdm.bind.eSwitch State = 2;
  if (this->state() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.AnesthesiaMachineOxygenWallPortPressureLossData)
  return target;
}

size_t AnesthesiaMachineOxygenWallPortPressureLossData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.AnesthesiaMachineOxygenWallPortPressureLossData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
  if (this->has_anesthesiamachineaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *anesthesiamachineaction_);
  }

  // .pulse.cdm.bind.eSwitch State = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnesthesiaMachineOxygenWallPortPressureLossData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.AnesthesiaMachineOxygenWallPortPressureLossData)
  GOOGLE_DCHECK_NE(&from, this);
  const AnesthesiaMachineOxygenWallPortPressureLossData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnesthesiaMachineOxygenWallPortPressureLossData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.AnesthesiaMachineOxygenWallPortPressureLossData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.AnesthesiaMachineOxygenWallPortPressureLossData)
    MergeFrom(*source);
  }
}

void AnesthesiaMachineOxygenWallPortPressureLossData::MergeFrom(const AnesthesiaMachineOxygenWallPortPressureLossData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.AnesthesiaMachineOxygenWallPortPressureLossData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_anesthesiamachineaction()) {
    _internal_mutable_anesthesiamachineaction()->::pulse::cdm::bind::AnesthesiaMachineActionData::MergeFrom(from._internal_anesthesiamachineaction());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void AnesthesiaMachineOxygenWallPortPressureLossData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.AnesthesiaMachineOxygenWallPortPressureLossData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnesthesiaMachineOxygenWallPortPressureLossData::CopyFrom(const AnesthesiaMachineOxygenWallPortPressureLossData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.AnesthesiaMachineOxygenWallPortPressureLossData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnesthesiaMachineOxygenWallPortPressureLossData::IsInitialized() const {
  return true;
}

void AnesthesiaMachineOxygenWallPortPressureLossData::InternalSwap(AnesthesiaMachineOxygenWallPortPressureLossData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(anesthesiamachineaction_, other->anesthesiamachineaction_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnesthesiaMachineOxygenWallPortPressureLossData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnesthesiaMachineOxygenTankPressureLossData::InitAsDefaultInstance() {
  ::pulse::cdm::bind::_AnesthesiaMachineOxygenTankPressureLossData_default_instance_._instance.get_mutable()->anesthesiamachineaction_ = const_cast< ::pulse::cdm::bind::AnesthesiaMachineActionData*>(
      ::pulse::cdm::bind::AnesthesiaMachineActionData::internal_default_instance());
}
class AnesthesiaMachineOxygenTankPressureLossData::_Internal {
 public:
  static const ::pulse::cdm::bind::AnesthesiaMachineActionData& anesthesiamachineaction(const AnesthesiaMachineOxygenTankPressureLossData* msg);
};

const ::pulse::cdm::bind::AnesthesiaMachineActionData&
AnesthesiaMachineOxygenTankPressureLossData::_Internal::anesthesiamachineaction(const AnesthesiaMachineOxygenTankPressureLossData* msg) {
  return *msg->anesthesiamachineaction_;
}
AnesthesiaMachineOxygenTankPressureLossData::AnesthesiaMachineOxygenTankPressureLossData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pulse.cdm.bind.AnesthesiaMachineOxygenTankPressureLossData)
}
AnesthesiaMachineOxygenTankPressureLossData::AnesthesiaMachineOxygenTankPressureLossData(const AnesthesiaMachineOxygenTankPressureLossData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_anesthesiamachineaction()) {
    anesthesiamachineaction_ = new ::pulse::cdm::bind::AnesthesiaMachineActionData(*from.anesthesiamachineaction_);
  } else {
    anesthesiamachineaction_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.AnesthesiaMachineOxygenTankPressureLossData)
}

void AnesthesiaMachineOxygenTankPressureLossData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnesthesiaMachineOxygenTankPressureLossData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base);
  ::memset(&anesthesiamachineaction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&anesthesiamachineaction_)) + sizeof(state_));
}

AnesthesiaMachineOxygenTankPressureLossData::~AnesthesiaMachineOxygenTankPressureLossData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.AnesthesiaMachineOxygenTankPressureLossData)
  SharedDtor();
}

void AnesthesiaMachineOxygenTankPressureLossData::SharedDtor() {
  if (this != internal_default_instance()) delete anesthesiamachineaction_;
}

void AnesthesiaMachineOxygenTankPressureLossData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnesthesiaMachineOxygenTankPressureLossData& AnesthesiaMachineOxygenTankPressureLossData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnesthesiaMachineOxygenTankPressureLossData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base);
  return *internal_default_instance();
}


void AnesthesiaMachineOxygenTankPressureLossData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.AnesthesiaMachineOxygenTankPressureLossData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && anesthesiamachineaction_ != nullptr) {
    delete anesthesiamachineaction_;
  }
  anesthesiamachineaction_ = nullptr;
  state_ = 0;
  _internal_metadata_.Clear();
}

const char* AnesthesiaMachineOxygenTankPressureLossData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_anesthesiamachineaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.eSwitch State = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::pulse::cdm::bind::eSwitch>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnesthesiaMachineOxygenTankPressureLossData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.AnesthesiaMachineOxygenTankPressureLossData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
  if (this->has_anesthesiamachineaction()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::anesthesiamachineaction(this), target, stream);
  }

  // .pulse.cdm.bind.eSwitch State = 2;
  if (this->state() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.AnesthesiaMachineOxygenTankPressureLossData)
  return target;
}

size_t AnesthesiaMachineOxygenTankPressureLossData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.AnesthesiaMachineOxygenTankPressureLossData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
  if (this->has_anesthesiamachineaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *anesthesiamachineaction_);
  }

  // .pulse.cdm.bind.eSwitch State = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnesthesiaMachineOxygenTankPressureLossData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.AnesthesiaMachineOxygenTankPressureLossData)
  GOOGLE_DCHECK_NE(&from, this);
  const AnesthesiaMachineOxygenTankPressureLossData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnesthesiaMachineOxygenTankPressureLossData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.AnesthesiaMachineOxygenTankPressureLossData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.AnesthesiaMachineOxygenTankPressureLossData)
    MergeFrom(*source);
  }
}

void AnesthesiaMachineOxygenTankPressureLossData::MergeFrom(const AnesthesiaMachineOxygenTankPressureLossData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.AnesthesiaMachineOxygenTankPressureLossData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_anesthesiamachineaction()) {
    _internal_mutable_anesthesiamachineaction()->::pulse::cdm::bind::AnesthesiaMachineActionData::MergeFrom(from._internal_anesthesiamachineaction());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void AnesthesiaMachineOxygenTankPressureLossData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.AnesthesiaMachineOxygenTankPressureLossData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnesthesiaMachineOxygenTankPressureLossData::CopyFrom(const AnesthesiaMachineOxygenTankPressureLossData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.AnesthesiaMachineOxygenTankPressureLossData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnesthesiaMachineOxygenTankPressureLossData::IsInitialized() const {
  return true;
}

void AnesthesiaMachineOxygenTankPressureLossData::InternalSwap(AnesthesiaMachineOxygenTankPressureLossData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(anesthesiamachineaction_, other->anesthesiamachineaction_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnesthesiaMachineOxygenTankPressureLossData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::AnyAnesthesiaMachineActionData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::AnyAnesthesiaMachineActionData >(Arena* arena) {
  return Arena::CreateInternal< ::pulse::cdm::bind::AnyAnesthesiaMachineActionData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::AnesthesiaMachineActionData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::AnesthesiaMachineActionData >(Arena* arena) {
  return Arena::CreateInternal< ::pulse::cdm::bind::AnesthesiaMachineActionData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::AnesthesiaMachineConfigurationData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::AnesthesiaMachineConfigurationData >(Arena* arena) {
  return Arena::CreateInternal< ::pulse::cdm::bind::AnesthesiaMachineConfigurationData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData >(Arena* arena) {
  return Arena::CreateInternal< ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData >(Arena* arena) {
  return Arena::CreateInternal< ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData >(Arena* arena) {
  return Arena::CreateInternal< ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData >(Arena* arena) {
  return Arena::CreateInternal< ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::AnesthesiaMachineMaskLeakData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::AnesthesiaMachineMaskLeakData >(Arena* arena) {
  return Arena::CreateInternal< ::pulse::cdm::bind::AnesthesiaMachineMaskLeakData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData >(Arena* arena) {
  return Arena::CreateInternal< ::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData >(Arena* arena) {
  return Arena::CreateInternal< ::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData >(Arena* arena) {
  return Arena::CreateInternal< ::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData >(Arena* arena) {
  return Arena::CreateInternal< ::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData >(Arena* arena) {
  return Arena::CreateInternal< ::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData >(Arena* arena) {
  return Arena::CreateInternal< ::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData >(Arena* arena) {
  return Arena::CreateInternal< ::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
