// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/Engine.proto

#include "pulse/cdm/bind/Engine.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AdvanceTimeData_pulse_2fcdm_2fbind_2fActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEngine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_AnyActionData_pulse_2fcdm_2fbind_2fEngine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<13> scc_info_AnyAnesthesiaMachineActionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEngine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnyConditionData_pulse_2fcdm_2fbind_2fEngine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnyEnvironmentActionData_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AnyEnvironmentConditionData_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fInhalerActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AnyInhalerActionData_pulse_2fcdm_2fbind_2fInhalerActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<29> scc_info_AnyPatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientConditions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_AnyPatientConditionData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEngine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConditionListData_pulse_2fcdm_2fbind_2fEngine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEngine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DataRequestData_pulse_2fcdm_2fbind_2fEngine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEngine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DecimalFormatData_pulse_2fcdm_2fbind_2fEngine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEngine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse_pulse_2fcdm_2fbind_2fEngine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEngine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DynamicStabilizationEngineConvergenceData_pulse_2fcdm_2fbind_2fEngine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEngine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DynamicStabilizationPropertyConvergenceData_pulse_2fcdm_2fbind_2fEngine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEngine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PatientConfigurationData_pulse_2fcdm_2fbind_2fEngine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatient_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_PatientData_pulse_2fcdm_2fbind_2fPatient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SerializeStateData_pulse_2fcdm_2fbind_2fActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEngine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimedStabilizationData_ConditionStabilizationEntry_DoNotUse_pulse_2fcdm_2fbind_2fEngine_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class DecimalFormatDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DecimalFormatData> _instance;
} _DecimalFormatData_default_instance_;
class DataRequestDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataRequestData> _instance;
} _DataRequestData_default_instance_;
class DataRequestManagerDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataRequestManagerData> _instance;
} _DataRequestManagerData_default_instance_;
class AnyConditionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnyConditionData> _instance;
  const ::pulse::cdm::bind::AnyPatientConditionData* patientcondition_;
  const ::pulse::cdm::bind::AnyEnvironmentConditionData* environmentcondition_;
} _AnyConditionData_default_instance_;
class ConditionListDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConditionListData> _instance;
} _ConditionListData_default_instance_;
class AnyActionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnyActionData> _instance;
  const ::pulse::cdm::bind::AdvanceTimeData* advancetime_;
  const ::pulse::cdm::bind::SerializeStateData* serialize_;
  const ::pulse::cdm::bind::AnyPatientActionData* patientaction_;
  const ::pulse::cdm::bind::AnyEnvironmentActionData* environmentaction_;
  const ::pulse::cdm::bind::AnyAnesthesiaMachineActionData* anesthesiamachineaction_;
  const ::pulse::cdm::bind::AnyInhalerActionData* inhaleraction_;
} _AnyActionData_default_instance_;
class ActionListDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActionListData> _instance;
} _ActionListData_default_instance_;
class EngineInitializationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EngineInitializationData> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enginestatefile_;
  const ::pulse::cdm::bind::PatientConfigurationData* patientconfiguration_;
} _EngineInitializationData_default_instance_;
class PatientConfigurationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatientConfigurationData> _instance;
  const ::pulse::cdm::bind::PatientData* patient_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr patientfile_;
} _PatientConfigurationData_default_instance_;
class AutoSerializationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutoSerializationData> _instance;
} _AutoSerializationData_default_instance_;
class TimedStabilizationData_ConditionStabilizationEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimedStabilizationData_ConditionStabilizationEntry_DoNotUse> _instance;
} _TimedStabilizationData_ConditionStabilizationEntry_DoNotUse_default_instance_;
class TimedStabilizationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimedStabilizationData> _instance;
} _TimedStabilizationData_default_instance_;
class DynamicStabilizationPropertyConvergenceDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DynamicStabilizationPropertyConvergenceData> _instance;
} _DynamicStabilizationPropertyConvergenceData_default_instance_;
class DynamicStabilizationEngineConvergenceDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DynamicStabilizationEngineConvergenceData> _instance;
} _DynamicStabilizationEngineConvergenceData_default_instance_;
class DynamicStabilizationData_ConditionConvergenceEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse> _instance;
} _DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse_default_instance_;
class DynamicStabilizationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DynamicStabilizationData> _instance;
} _DynamicStabilizationData_default_instance_;
class LogMessagesDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogMessagesData> _instance;
} _LogMessagesData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
static void InitDefaultsscc_info_ActionListData_pulse_2fcdm_2fbind_2fEngine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ActionListData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ActionListData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pulse::cdm::bind::ActionListData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActionListData_pulse_2fcdm_2fbind_2fEngine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ActionListData_pulse_2fcdm_2fbind_2fEngine_2eproto}, {
      &scc_info_AnyActionData_pulse_2fcdm_2fbind_2fEngine_2eproto.base,}};

static void InitDefaultsscc_info_AnyActionData_pulse_2fcdm_2fbind_2fEngine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_AnyActionData_default_instance_;
    new (ptr) ::pulse::cdm::bind::AnyActionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pulse::cdm::bind::AnyActionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_AnyActionData_pulse_2fcdm_2fbind_2fEngine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_AnyActionData_pulse_2fcdm_2fbind_2fEngine_2eproto}, {
      &scc_info_AdvanceTimeData_pulse_2fcdm_2fbind_2fActions_2eproto.base,
      &scc_info_SerializeStateData_pulse_2fcdm_2fbind_2fActions_2eproto.base,
      &scc_info_AnyPatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_AnyEnvironmentActionData_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto.base,
      &scc_info_AnyAnesthesiaMachineActionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
      &scc_info_AnyInhalerActionData_pulse_2fcdm_2fbind_2fInhalerActions_2eproto.base,}};

static void InitDefaultsscc_info_AnyConditionData_pulse_2fcdm_2fbind_2fEngine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_AnyConditionData_default_instance_;
    new (ptr) ::pulse::cdm::bind::AnyConditionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pulse::cdm::bind::AnyConditionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnyConditionData_pulse_2fcdm_2fbind_2fEngine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AnyConditionData_pulse_2fcdm_2fbind_2fEngine_2eproto}, {
      &scc_info_AnyPatientConditionData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base,
      &scc_info_AnyEnvironmentConditionData_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto.base,}};

static void InitDefaultsscc_info_AutoSerializationData_pulse_2fcdm_2fbind_2fEngine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_AutoSerializationData_default_instance_;
    new (ptr) ::pulse::cdm::bind::AutoSerializationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pulse::cdm::bind::AutoSerializationData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AutoSerializationData_pulse_2fcdm_2fbind_2fEngine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AutoSerializationData_pulse_2fcdm_2fbind_2fEngine_2eproto}, {
      &scc_info_ScalarTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ConditionListData_pulse_2fcdm_2fbind_2fEngine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ConditionListData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ConditionListData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pulse::cdm::bind::ConditionListData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConditionListData_pulse_2fcdm_2fbind_2fEngine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ConditionListData_pulse_2fcdm_2fbind_2fEngine_2eproto}, {
      &scc_info_AnyConditionData_pulse_2fcdm_2fbind_2fEngine_2eproto.base,}};

static void InitDefaultsscc_info_DataRequestData_pulse_2fcdm_2fbind_2fEngine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_DataRequestData_default_instance_;
    new (ptr) ::pulse::cdm::bind::DataRequestData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pulse::cdm::bind::DataRequestData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DataRequestData_pulse_2fcdm_2fbind_2fEngine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DataRequestData_pulse_2fcdm_2fbind_2fEngine_2eproto}, {
      &scc_info_DecimalFormatData_pulse_2fcdm_2fbind_2fEngine_2eproto.base,}};

static void InitDefaultsscc_info_DataRequestManagerData_pulse_2fcdm_2fbind_2fEngine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_DataRequestManagerData_default_instance_;
    new (ptr) ::pulse::cdm::bind::DataRequestManagerData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pulse::cdm::bind::DataRequestManagerData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DataRequestManagerData_pulse_2fcdm_2fbind_2fEngine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DataRequestManagerData_pulse_2fcdm_2fbind_2fEngine_2eproto}, {
      &scc_info_DecimalFormatData_pulse_2fcdm_2fbind_2fEngine_2eproto.base,
      &scc_info_DataRequestData_pulse_2fcdm_2fbind_2fEngine_2eproto.base,}};

static void InitDefaultsscc_info_DecimalFormatData_pulse_2fcdm_2fbind_2fEngine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_DecimalFormatData_default_instance_;
    new (ptr) ::pulse::cdm::bind::DecimalFormatData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pulse::cdm::bind::DecimalFormatData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DecimalFormatData_pulse_2fcdm_2fbind_2fEngine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DecimalFormatData_pulse_2fcdm_2fbind_2fEngine_2eproto}, {}};

static void InitDefaultsscc_info_DynamicStabilizationData_pulse_2fcdm_2fbind_2fEngine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_DynamicStabilizationData_default_instance_;
    new (ptr) ::pulse::cdm::bind::DynamicStabilizationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pulse::cdm::bind::DynamicStabilizationData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DynamicStabilizationData_pulse_2fcdm_2fbind_2fEngine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DynamicStabilizationData_pulse_2fcdm_2fbind_2fEngine_2eproto}, {
      &scc_info_DynamicStabilizationEngineConvergenceData_pulse_2fcdm_2fbind_2fEngine_2eproto.base,
      &scc_info_DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse_pulse_2fcdm_2fbind_2fEngine_2eproto.base,}};

static void InitDefaultsscc_info_DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse_pulse_2fcdm_2fbind_2fEngine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse_default_instance_;
    new (ptr) ::pulse::cdm::bind::DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse();
  }
  ::pulse::cdm::bind::DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse_pulse_2fcdm_2fbind_2fEngine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse_pulse_2fcdm_2fbind_2fEngine_2eproto}, {
      &scc_info_DynamicStabilizationEngineConvergenceData_pulse_2fcdm_2fbind_2fEngine_2eproto.base,}};

static void InitDefaultsscc_info_DynamicStabilizationEngineConvergenceData_pulse_2fcdm_2fbind_2fEngine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_DynamicStabilizationEngineConvergenceData_default_instance_;
    new (ptr) ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DynamicStabilizationEngineConvergenceData_pulse_2fcdm_2fbind_2fEngine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DynamicStabilizationEngineConvergenceData_pulse_2fcdm_2fbind_2fEngine_2eproto}, {
      &scc_info_ScalarTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_DynamicStabilizationPropertyConvergenceData_pulse_2fcdm_2fbind_2fEngine_2eproto.base,}};

static void InitDefaultsscc_info_DynamicStabilizationPropertyConvergenceData_pulse_2fcdm_2fbind_2fEngine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_DynamicStabilizationPropertyConvergenceData_default_instance_;
    new (ptr) ::pulse::cdm::bind::DynamicStabilizationPropertyConvergenceData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pulse::cdm::bind::DynamicStabilizationPropertyConvergenceData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DynamicStabilizationPropertyConvergenceData_pulse_2fcdm_2fbind_2fEngine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DynamicStabilizationPropertyConvergenceData_pulse_2fcdm_2fbind_2fEngine_2eproto}, {
      &scc_info_DataRequestData_pulse_2fcdm_2fbind_2fEngine_2eproto.base,}};

static void InitDefaultsscc_info_EngineInitializationData_pulse_2fcdm_2fbind_2fEngine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_EngineInitializationData_default_instance_;
    new (ptr) ::pulse::cdm::bind::EngineInitializationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pulse::cdm::bind::EngineInitializationData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EngineInitializationData_pulse_2fcdm_2fbind_2fEngine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EngineInitializationData_pulse_2fcdm_2fbind_2fEngine_2eproto}, {
      &scc_info_PatientConfigurationData_pulse_2fcdm_2fbind_2fEngine_2eproto.base,}};

static void InitDefaultsscc_info_LogMessagesData_pulse_2fcdm_2fbind_2fEngine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_LogMessagesData_default_instance_;
    new (ptr) ::pulse::cdm::bind::LogMessagesData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pulse::cdm::bind::LogMessagesData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogMessagesData_pulse_2fcdm_2fbind_2fEngine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogMessagesData_pulse_2fcdm_2fbind_2fEngine_2eproto}, {}};

static void InitDefaultsscc_info_PatientConfigurationData_pulse_2fcdm_2fbind_2fEngine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_PatientConfigurationData_default_instance_;
    new (ptr) ::pulse::cdm::bind::PatientConfigurationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pulse::cdm::bind::PatientConfigurationData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PatientConfigurationData_pulse_2fcdm_2fbind_2fEngine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PatientConfigurationData_pulse_2fcdm_2fbind_2fEngine_2eproto}, {
      &scc_info_PatientData_pulse_2fcdm_2fbind_2fPatient_2eproto.base,
      &scc_info_ConditionListData_pulse_2fcdm_2fbind_2fEngine_2eproto.base,}};

static void InitDefaultsscc_info_TimedStabilizationData_pulse_2fcdm_2fbind_2fEngine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_TimedStabilizationData_default_instance_;
    new (ptr) ::pulse::cdm::bind::TimedStabilizationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pulse::cdm::bind::TimedStabilizationData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TimedStabilizationData_pulse_2fcdm_2fbind_2fEngine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TimedStabilizationData_pulse_2fcdm_2fbind_2fEngine_2eproto}, {
      &scc_info_ScalarTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_TimedStabilizationData_ConditionStabilizationEntry_DoNotUse_pulse_2fcdm_2fbind_2fEngine_2eproto.base,}};

static void InitDefaultsscc_info_TimedStabilizationData_ConditionStabilizationEntry_DoNotUse_pulse_2fcdm_2fbind_2fEngine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_TimedStabilizationData_ConditionStabilizationEntry_DoNotUse_default_instance_;
    new (ptr) ::pulse::cdm::bind::TimedStabilizationData_ConditionStabilizationEntry_DoNotUse();
  }
  ::pulse::cdm::bind::TimedStabilizationData_ConditionStabilizationEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimedStabilizationData_ConditionStabilizationEntry_DoNotUse_pulse_2fcdm_2fbind_2fEngine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TimedStabilizationData_ConditionStabilizationEntry_DoNotUse_pulse_2fcdm_2fbind_2fEngine_2eproto}, {
      &scc_info_ScalarTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pulse_2fcdm_2fbind_2fEngine_2eproto[17];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_pulse_2fcdm_2fbind_2fEngine_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pulse_2fcdm_2fbind_2fEngine_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pulse_2fcdm_2fbind_2fEngine_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DecimalFormatData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DecimalFormatData, type_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DecimalFormatData, precision_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DataRequestData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DataRequestData, decimalformat_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DataRequestData, category_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DataRequestData, compartmentname_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DataRequestData, substancename_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DataRequestData, propertyname_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DataRequestData, unit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DataRequestManagerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DataRequestManagerData, resultsfilename_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DataRequestManagerData, samplespersecond_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DataRequestManagerData, defaultdecimalformatting_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DataRequestManagerData, overridedecimalformatting_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DataRequestManagerData, datarequest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnyConditionData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnyConditionData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::pulse::cdm::bind::AnyConditionDataDefaultTypeInternal, patientcondition_),
  offsetof(::pulse::cdm::bind::AnyConditionDataDefaultTypeInternal, environmentcondition_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnyConditionData, Condition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ConditionListData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ConditionListData, anycondition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnyActionData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnyActionData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::pulse::cdm::bind::AnyActionDataDefaultTypeInternal, advancetime_),
  offsetof(::pulse::cdm::bind::AnyActionDataDefaultTypeInternal, serialize_),
  offsetof(::pulse::cdm::bind::AnyActionDataDefaultTypeInternal, patientaction_),
  offsetof(::pulse::cdm::bind::AnyActionDataDefaultTypeInternal, environmentaction_),
  offsetof(::pulse::cdm::bind::AnyActionDataDefaultTypeInternal, anesthesiamachineaction_),
  offsetof(::pulse::cdm::bind::AnyActionDataDefaultTypeInternal, inhaleraction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnyActionData, Action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ActionListData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ActionListData, anyaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EngineInitializationData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EngineInitializationData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::pulse::cdm::bind::EngineInitializationDataDefaultTypeInternal, enginestatefile_),
  offsetof(::pulse::cdm::bind::EngineInitializationDataDefaultTypeInternal, patientconfiguration_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EngineInitializationData, logfile_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EngineInitializationData, StartType_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PatientConfigurationData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PatientConfigurationData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::pulse::cdm::bind::PatientConfigurationDataDefaultTypeInternal, patient_),
  offsetof(::pulse::cdm::bind::PatientConfigurationDataDefaultTypeInternal, patientfile_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PatientConfigurationData, conditions_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PatientConfigurationData, PatientType_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AutoSerializationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AutoSerializationData, directory_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AutoSerializationData, filename_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AutoSerializationData, afteractions_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AutoSerializationData, period_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AutoSerializationData, periodtimestamps_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AutoSerializationData, reloadstate_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TimedStabilizationData_ConditionStabilizationEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TimedStabilizationData_ConditionStabilizationEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TimedStabilizationData_ConditionStabilizationEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TimedStabilizationData_ConditionStabilizationEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TimedStabilizationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TimedStabilizationData, trackingstabilization_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TimedStabilizationData, restingstabilizationtime_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TimedStabilizationData, feedbackstabilizationtime_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TimedStabilizationData, conditionstabilization_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DynamicStabilizationPropertyConvergenceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DynamicStabilizationPropertyConvergenceData, datarequest_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DynamicStabilizationPropertyConvergenceData, percentdifference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData, convergencetime_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData, minimumreactiontime_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData, maximumallowedstabilizationtime_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData, propertyconvergence_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DynamicStabilizationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DynamicStabilizationData, trackingstabilization_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DynamicStabilizationData, restingconvergence_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DynamicStabilizationData, feedbackconvergence_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DynamicStabilizationData, conditionconvergence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::LogMessagesData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::LogMessagesData, debugmessages_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::LogMessagesData, infogmessages_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::LogMessagesData, warningmessages_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::LogMessagesData, errormessages_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::LogMessagesData, fatalmessages_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pulse::cdm::bind::DecimalFormatData)},
  { 7, -1, sizeof(::pulse::cdm::bind::DataRequestData)},
  { 18, -1, sizeof(::pulse::cdm::bind::DataRequestManagerData)},
  { 28, -1, sizeof(::pulse::cdm::bind::AnyConditionData)},
  { 36, -1, sizeof(::pulse::cdm::bind::ConditionListData)},
  { 42, -1, sizeof(::pulse::cdm::bind::AnyActionData)},
  { 54, -1, sizeof(::pulse::cdm::bind::ActionListData)},
  { 60, -1, sizeof(::pulse::cdm::bind::EngineInitializationData)},
  { 69, -1, sizeof(::pulse::cdm::bind::PatientConfigurationData)},
  { 78, -1, sizeof(::pulse::cdm::bind::AutoSerializationData)},
  { 89, 96, sizeof(::pulse::cdm::bind::TimedStabilizationData_ConditionStabilizationEntry_DoNotUse)},
  { 98, -1, sizeof(::pulse::cdm::bind::TimedStabilizationData)},
  { 107, -1, sizeof(::pulse::cdm::bind::DynamicStabilizationPropertyConvergenceData)},
  { 114, -1, sizeof(::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData)},
  { 123, 130, sizeof(::pulse::cdm::bind::DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse)},
  { 132, -1, sizeof(::pulse::cdm::bind::DynamicStabilizationData)},
  { 141, -1, sizeof(::pulse::cdm::bind::LogMessagesData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_DecimalFormatData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_DataRequestData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_DataRequestManagerData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_AnyConditionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ConditionListData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_AnyActionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ActionListData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_EngineInitializationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_PatientConfigurationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_AutoSerializationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_TimedStabilizationData_ConditionStabilizationEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_TimedStabilizationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_DynamicStabilizationPropertyConvergenceData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_DynamicStabilizationEngineConvergenceData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_DynamicStabilizationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_LogMessagesData_default_instance_),
};

const char descriptor_table_protodef_pulse_2fcdm_2fbind_2fEngine_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033pulse/cdm/bind/Engine.proto\022\016pulse.cdm"
  ".bind\032\032pulse/cdm/bind/Enums.proto\032\034pulse"
  "/cdm/bind/Actions.proto\032\034pulse/cdm/bind/"
  "Patient.proto\032#pulse/cdm/bind/PatientAct"
  "ions.proto\032&pulse/cdm/bind/PatientCondit"
  "ions.proto\032\'pulse/cdm/bind/EnvironmentAc"
  "tions.proto\032*pulse/cdm/bind/EnvironmentC"
  "onditions.proto\032-pulse/cdm/bind/Anesthes"
  "iaMachineActions.proto\032#pulse/cdm/bind/I"
  "nhalerActions.proto\032\037pulse/cdm/bind/Prop"
  "erties.proto\"\270\001\n\021DecimalFormatData\0225\n\004Ty"
  "pe\030\001 \001(\0162\'.pulse.cdm.bind.DecimalFormatD"
  "ata.eType\022\021\n\tPrecision\030\002 \001(\r\"Y\n\005eType\022\024\n"
  "\020SystemFormatting\020\000\022\020\n\014DefaultFloat\020\001\022\021\n"
  "\rFixedMantissa\020\002\022\025\n\021SignificantDigits\020\003\""
  "\256\003\n\017DataRequestData\0228\n\rDecimalFormat\030\001 \001"
  "(\0132!.pulse.cdm.bind.DecimalFormatData\022;\n"
  "\010Category\030\002 \001(\0162).pulse.cdm.bind.DataReq"
  "uestData.eCategory\022\027\n\017CompartmentName\030\003 "
  "\001(\t\022\025\n\rSubstanceName\030\004 \001(\t\022\024\n\014PropertyNa"
  "me\030\005 \001(\t\022\014\n\004Unit\030\006 \001(\t\"\317\001\n\teCategory\022\013\n\007"
  "Patient\020\000\022\016\n\nPhysiology\020\001\022\017\n\013Environment"
  "\020\002\022\022\n\016GasCompartment\020\003\022\025\n\021LiquidCompartm"
  "ent\020\004\022\026\n\022ThermalCompartment\020\005\022\025\n\021TissueC"
  "ompartment\020\006\022\r\n\tSubstance\020\007\022\025\n\021Anesthesi"
  "aMachine\020\010\022\007\n\003ECG\020\t\022\013\n\007Inhaler\020\n\"\214\002\n\026Dat"
  "aRequestManagerData\022\027\n\017ResultsFilename\030\001"
  " \001(\t\022\030\n\020SamplesPerSecond\030\002 \001(\001\022C\n\030Defaul"
  "tDecimalFormatting\030\003 \001(\0132!.pulse.cdm.bin"
  "d.DecimalFormatData\022D\n\031OverrideDecimalFo"
  "rmatting\030\004 \001(\0132!.pulse.cdm.bind.DecimalF"
  "ormatData\0224\n\013DataRequest\030\005 \003(\0132\037.pulse.c"
  "dm.bind.DataRequestData\"\261\001\n\020AnyCondition"
  "Data\022C\n\020PatientCondition\030\001 \001(\0132\'.pulse.c"
  "dm.bind.AnyPatientConditionDataH\000\022K\n\024Env"
  "ironmentCondition\030\002 \001(\0132+.pulse.cdm.bind"
  ".AnyEnvironmentConditionDataH\000B\013\n\tCondit"
  "ion\"K\n\021ConditionListData\0226\n\014AnyCondition"
  "\030\001 \003(\0132 .pulse.cdm.bind.AnyConditionData"
  "\"\242\003\n\rAnyActionData\0226\n\013AdvanceTime\030\001 \001(\0132"
  "\037.pulse.cdm.bind.AdvanceTimeDataH\000\0227\n\tSe"
  "rialize\030\002 \001(\0132\".pulse.cdm.bind.Serialize"
  "StateDataH\000\022=\n\rPatientAction\030\003 \001(\0132$.pul"
  "se.cdm.bind.AnyPatientActionDataH\000\022E\n\021En"
  "vironmentAction\030\004 \001(\0132(.pulse.cdm.bind.A"
  "nyEnvironmentActionDataH\000\022Q\n\027AnesthesiaM"
  "achineAction\030\005 \001(\0132..pulse.cdm.bind.AnyA"
  "nesthesiaMachineActionDataH\000\022=\n\rInhalerA"
  "ction\030\006 \001(\0132$.pulse.cdm.bind.AnyInhalerA"
  "ctionDataH\000B\010\n\006Action\"B\n\016ActionListData\022"
  "0\n\tAnyAction\030\001 \003(\0132\035.pulse.cdm.bind.AnyA"
  "ctionData\"\235\001\n\030EngineInitializationData\022\031"
  "\n\017EngineStateFile\030\001 \001(\tH\000\022H\n\024PatientConf"
  "iguration\030\002 \001(\0132(.pulse.cdm.bind.Patient"
  "ConfigurationDataH\000\022\017\n\007LogFile\030\003 \001(\tB\013\n\t"
  "StartType\"\247\001\n\030PatientConfigurationData\022."
  "\n\007Patient\030\001 \001(\0132\033.pulse.cdm.bind.Patient"
  "DataH\000\022\025\n\013PatientFile\030\002 \001(\tH\000\0225\n\nConditi"
  "ons\030\003 \001(\0132!.pulse.cdm.bind.ConditionList"
  "DataB\r\n\013PatientType\"\374\001\n\025AutoSerializatio"
  "nData\022\021\n\tDirectory\030\001 \001(\t\022\020\n\010Filename\030\002 \001"
  "(\t\022-\n\014AfterActions\030\003 \001(\0162\027.pulse.cdm.bin"
  "d.eSwitch\022.\n\006Period\030\004 \001(\0132\036.pulse.cdm.bi"
  "nd.ScalarTimeData\0221\n\020PeriodTimeStamps\030\005 "
  "\001(\0162\027.pulse.cdm.bind.eSwitch\022,\n\013ReloadSt"
  "ate\030\006 \001(\0162\027.pulse.cdm.bind.eSwitch\"\230\003\n\026T"
  "imedStabilizationData\0226\n\025TrackingStabili"
  "zation\030\001 \001(\0162\027.pulse.cdm.bind.eSwitch\022@\n"
  "\030RestingStabilizationTime\030\002 \001(\0132\036.pulse."
  "cdm.bind.ScalarTimeData\022A\n\031FeedbackStabi"
  "lizationTime\030\003 \001(\0132\036.pulse.cdm.bind.Scal"
  "arTimeData\022b\n\026ConditionStabilization\030\004 \003"
  "(\0132B.pulse.cdm.bind.TimedStabilizationDa"
  "ta.ConditionStabilizationEntry\032]\n\033Condit"
  "ionStabilizationEntry\022\013\n\003key\030\001 \001(\t\022-\n\005va"
  "lue\030\002 \001(\0132\036.pulse.cdm.bind.ScalarTimeDat"
  "a:\0028\001\"~\n+DynamicStabilizationPropertyCon"
  "vergenceData\0224\n\013DataRequest\030\001 \001(\0132\037.puls"
  "e.cdm.bind.DataRequestData\022\031\n\021PercentDif"
  "ference\030\002 \001(\001\"\304\002\n)DynamicStabilizationEn"
  "gineConvergenceData\0227\n\017ConvergenceTime\030\001"
  " \001(\0132\036.pulse.cdm.bind.ScalarTimeData\022;\n\023"
  "MinimumReactionTime\030\002 \001(\0132\036.pulse.cdm.bi"
  "nd.ScalarTimeData\022G\n\037MaximumAllowedStabi"
  "lizationTime\030\003 \001(\0132\036.pulse.cdm.bind.Scal"
  "arTimeData\022X\n\023PropertyConvergence\030\004 \003(\0132"
  ";.pulse.cdm.bind.DynamicStabilizationPro"
  "pertyConvergenceData\"\333\003\n\030DynamicStabiliz"
  "ationData\0226\n\025TrackingStabilization\030\001 \001(\016"
  "2\027.pulse.cdm.bind.eSwitch\022U\n\022RestingConv"
  "ergence\030\002 \001(\01329.pulse.cdm.bind.DynamicSt"
  "abilizationEngineConvergenceData\022V\n\023Feed"
  "backConvergence\030\003 \001(\01329.pulse.cdm.bind.D"
  "ynamicStabilizationEngineConvergenceData"
  "\022`\n\024ConditionConvergence\030\004 \003(\0132B.pulse.c"
  "dm.bind.DynamicStabilizationData.Conditi"
  "onConvergenceEntry\032v\n\031ConditionConvergen"
  "ceEntry\022\013\n\003key\030\001 \001(\t\022H\n\005value\030\002 \001(\01329.pu"
  "lse.cdm.bind.DynamicStabilizationEngineC"
  "onvergenceData:\0028\001\"\206\001\n\017LogMessagesData\022\025"
  "\n\rDebugMessages\030\001 \003(\t\022\025\n\rInfogMessages\030\002"
  " \003(\t\022\027\n\017WarningMessages\030\003 \003(\t\022\025\n\rErrorMe"
  "ssages\030\004 \003(\t\022\025\n\rFatalMessages\030\005 \003(\tB#\n\016p"
  "ulse.cdm.bindH\001\252\002\016pulse.cdm.bindb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto_deps[10] = {
  &::descriptor_table_pulse_2fcdm_2fbind_2fActions_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fEnums_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fInhalerActions_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fPatient_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fPatientConditions_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto_sccs[17] = {
  &scc_info_ActionListData_pulse_2fcdm_2fbind_2fEngine_2eproto.base,
  &scc_info_AnyActionData_pulse_2fcdm_2fbind_2fEngine_2eproto.base,
  &scc_info_AnyConditionData_pulse_2fcdm_2fbind_2fEngine_2eproto.base,
  &scc_info_AutoSerializationData_pulse_2fcdm_2fbind_2fEngine_2eproto.base,
  &scc_info_ConditionListData_pulse_2fcdm_2fbind_2fEngine_2eproto.base,
  &scc_info_DataRequestData_pulse_2fcdm_2fbind_2fEngine_2eproto.base,
  &scc_info_DataRequestManagerData_pulse_2fcdm_2fbind_2fEngine_2eproto.base,
  &scc_info_DecimalFormatData_pulse_2fcdm_2fbind_2fEngine_2eproto.base,
  &scc_info_DynamicStabilizationData_pulse_2fcdm_2fbind_2fEngine_2eproto.base,
  &scc_info_DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse_pulse_2fcdm_2fbind_2fEngine_2eproto.base,
  &scc_info_DynamicStabilizationEngineConvergenceData_pulse_2fcdm_2fbind_2fEngine_2eproto.base,
  &scc_info_DynamicStabilizationPropertyConvergenceData_pulse_2fcdm_2fbind_2fEngine_2eproto.base,
  &scc_info_EngineInitializationData_pulse_2fcdm_2fbind_2fEngine_2eproto.base,
  &scc_info_LogMessagesData_pulse_2fcdm_2fbind_2fEngine_2eproto.base,
  &scc_info_PatientConfigurationData_pulse_2fcdm_2fbind_2fEngine_2eproto.base,
  &scc_info_TimedStabilizationData_pulse_2fcdm_2fbind_2fEngine_2eproto.base,
  &scc_info_TimedStabilizationData_ConditionStabilizationEntry_DoNotUse_pulse_2fcdm_2fbind_2fEngine_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto_once;
static bool descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto = {
  &descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto_initialized, descriptor_table_protodef_pulse_2fcdm_2fbind_2fEngine_2eproto, "pulse/cdm/bind/Engine.proto", 4160,
  &descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto_once, descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto_sccs, descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto_deps, 17, 10,
  schemas, file_default_instances, TableStruct_pulse_2fcdm_2fbind_2fEngine_2eproto::offsets,
  file_level_metadata_pulse_2fcdm_2fbind_2fEngine_2eproto, 17, file_level_enum_descriptors_pulse_2fcdm_2fbind_2fEngine_2eproto, file_level_service_descriptors_pulse_2fcdm_2fbind_2fEngine_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pulse_2fcdm_2fbind_2fEngine_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto), true);
namespace pulse {
namespace cdm {
namespace bind {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DecimalFormatData_eType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto);
  return file_level_enum_descriptors_pulse_2fcdm_2fbind_2fEngine_2eproto[0];
}
bool DecimalFormatData_eType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DecimalFormatData_eType DecimalFormatData::SystemFormatting;
constexpr DecimalFormatData_eType DecimalFormatData::DefaultFloat;
constexpr DecimalFormatData_eType DecimalFormatData::FixedMantissa;
constexpr DecimalFormatData_eType DecimalFormatData::SignificantDigits;
constexpr DecimalFormatData_eType DecimalFormatData::eType_MIN;
constexpr DecimalFormatData_eType DecimalFormatData::eType_MAX;
constexpr int DecimalFormatData::eType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataRequestData_eCategory_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto);
  return file_level_enum_descriptors_pulse_2fcdm_2fbind_2fEngine_2eproto[1];
}
bool DataRequestData_eCategory_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DataRequestData_eCategory DataRequestData::Patient;
constexpr DataRequestData_eCategory DataRequestData::Physiology;
constexpr DataRequestData_eCategory DataRequestData::Environment;
constexpr DataRequestData_eCategory DataRequestData::GasCompartment;
constexpr DataRequestData_eCategory DataRequestData::LiquidCompartment;
constexpr DataRequestData_eCategory DataRequestData::ThermalCompartment;
constexpr DataRequestData_eCategory DataRequestData::TissueCompartment;
constexpr DataRequestData_eCategory DataRequestData::Substance;
constexpr DataRequestData_eCategory DataRequestData::AnesthesiaMachine;
constexpr DataRequestData_eCategory DataRequestData::ECG;
constexpr DataRequestData_eCategory DataRequestData::Inhaler;
constexpr DataRequestData_eCategory DataRequestData::eCategory_MIN;
constexpr DataRequestData_eCategory DataRequestData::eCategory_MAX;
constexpr int DataRequestData::eCategory_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void DecimalFormatData::InitAsDefaultInstance() {
}
class DecimalFormatData::_Internal {
 public:
};

DecimalFormatData::DecimalFormatData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pulse.cdm.bind.DecimalFormatData)
}
DecimalFormatData::DecimalFormatData(const DecimalFormatData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&precision_) -
    reinterpret_cast<char*>(&type_)) + sizeof(precision_));
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.DecimalFormatData)
}

void DecimalFormatData::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&precision_) -
      reinterpret_cast<char*>(&type_)) + sizeof(precision_));
}

DecimalFormatData::~DecimalFormatData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.DecimalFormatData)
  SharedDtor();
}

void DecimalFormatData::SharedDtor() {
}

void DecimalFormatData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DecimalFormatData& DecimalFormatData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DecimalFormatData_pulse_2fcdm_2fbind_2fEngine_2eproto.base);
  return *internal_default_instance();
}


void DecimalFormatData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.DecimalFormatData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&precision_) -
      reinterpret_cast<char*>(&type_)) + sizeof(precision_));
  _internal_metadata_.Clear();
}

const char* DecimalFormatData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.DecimalFormatData.eType Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::pulse::cdm::bind::DecimalFormatData_eType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 Precision = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          precision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DecimalFormatData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.DecimalFormatData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.DecimalFormatData.eType Type = 1;
  if (this->type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // uint32 Precision = 2;
  if (this->precision() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_precision(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.DecimalFormatData)
  return target;
}

size_t DecimalFormatData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.DecimalFormatData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.DecimalFormatData.eType Type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 Precision = 2;
  if (this->precision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_precision());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DecimalFormatData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.DecimalFormatData)
  GOOGLE_DCHECK_NE(&from, this);
  const DecimalFormatData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DecimalFormatData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.DecimalFormatData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.DecimalFormatData)
    MergeFrom(*source);
  }
}

void DecimalFormatData::MergeFrom(const DecimalFormatData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.DecimalFormatData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.precision() != 0) {
    _internal_set_precision(from._internal_precision());
  }
}

void DecimalFormatData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.DecimalFormatData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecimalFormatData::CopyFrom(const DecimalFormatData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.DecimalFormatData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecimalFormatData::IsInitialized() const {
  return true;
}

void DecimalFormatData::InternalSwap(DecimalFormatData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(precision_, other->precision_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DecimalFormatData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DataRequestData::InitAsDefaultInstance() {
  ::pulse::cdm::bind::_DataRequestData_default_instance_._instance.get_mutable()->decimalformat_ = const_cast< ::pulse::cdm::bind::DecimalFormatData*>(
      ::pulse::cdm::bind::DecimalFormatData::internal_default_instance());
}
class DataRequestData::_Internal {
 public:
  static const ::pulse::cdm::bind::DecimalFormatData& decimalformat(const DataRequestData* msg);
};

const ::pulse::cdm::bind::DecimalFormatData&
DataRequestData::_Internal::decimalformat(const DataRequestData* msg) {
  return *msg->decimalformat_;
}
DataRequestData::DataRequestData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pulse.cdm.bind.DataRequestData)
}
DataRequestData::DataRequestData(const DataRequestData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  compartmentname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_compartmentname().empty()) {
    compartmentname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.compartmentname_);
  }
  substancename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_substancename().empty()) {
    substancename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.substancename_);
  }
  propertyname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_propertyname().empty()) {
    propertyname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.propertyname_);
  }
  unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_unit().empty()) {
    unit_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unit_);
  }
  if (from._internal_has_decimalformat()) {
    decimalformat_ = new ::pulse::cdm::bind::DecimalFormatData(*from.decimalformat_);
  } else {
    decimalformat_ = nullptr;
  }
  category_ = from.category_;
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.DataRequestData)
}

void DataRequestData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataRequestData_pulse_2fcdm_2fbind_2fEngine_2eproto.base);
  compartmentname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  substancename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  propertyname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&decimalformat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&category_) -
      reinterpret_cast<char*>(&decimalformat_)) + sizeof(category_));
}

DataRequestData::~DataRequestData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.DataRequestData)
  SharedDtor();
}

void DataRequestData::SharedDtor() {
  compartmentname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  substancename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  propertyname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete decimalformat_;
}

void DataRequestData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataRequestData& DataRequestData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataRequestData_pulse_2fcdm_2fbind_2fEngine_2eproto.base);
  return *internal_default_instance();
}


void DataRequestData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.DataRequestData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  compartmentname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  substancename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  propertyname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unit_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && decimalformat_ != nullptr) {
    delete decimalformat_;
  }
  decimalformat_ = nullptr;
  category_ = 0;
  _internal_metadata_.Clear();
}

const char* DataRequestData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.DecimalFormatData DecimalFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_decimalformat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.DataRequestData.eCategory Category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_category(static_cast<::pulse::cdm::bind::DataRequestData_eCategory>(val));
        } else goto handle_unusual;
        continue;
      // string CompartmentName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_compartmentname(), ptr, ctx, "pulse.cdm.bind.DataRequestData.CompartmentName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string SubstanceName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_substancename(), ptr, ctx, "pulse.cdm.bind.DataRequestData.SubstanceName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string PropertyName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_propertyname(), ptr, ctx, "pulse.cdm.bind.DataRequestData.PropertyName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Unit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_unit(), ptr, ctx, "pulse.cdm.bind.DataRequestData.Unit");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataRequestData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.DataRequestData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.DecimalFormatData DecimalFormat = 1;
  if (this->has_decimalformat()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::decimalformat(this), target, stream);
  }

  // .pulse.cdm.bind.DataRequestData.eCategory Category = 2;
  if (this->category() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_category(), target);
  }

  // string CompartmentName = 3;
  if (this->compartmentname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_compartmentname().data(), static_cast<int>(this->_internal_compartmentname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.DataRequestData.CompartmentName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_compartmentname(), target);
  }

  // string SubstanceName = 4;
  if (this->substancename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_substancename().data(), static_cast<int>(this->_internal_substancename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.DataRequestData.SubstanceName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_substancename(), target);
  }

  // string PropertyName = 5;
  if (this->propertyname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_propertyname().data(), static_cast<int>(this->_internal_propertyname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.DataRequestData.PropertyName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_propertyname(), target);
  }

  // string Unit = 6;
  if (this->unit().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unit().data(), static_cast<int>(this->_internal_unit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.DataRequestData.Unit");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_unit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.DataRequestData)
  return target;
}

size_t DataRequestData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.DataRequestData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string CompartmentName = 3;
  if (this->compartmentname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_compartmentname());
  }

  // string SubstanceName = 4;
  if (this->substancename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_substancename());
  }

  // string PropertyName = 5;
  if (this->propertyname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_propertyname());
  }

  // string Unit = 6;
  if (this->unit().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unit());
  }

  // .pulse.cdm.bind.DecimalFormatData DecimalFormat = 1;
  if (this->has_decimalformat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *decimalformat_);
  }

  // .pulse.cdm.bind.DataRequestData.eCategory Category = 2;
  if (this->category() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_category());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataRequestData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.DataRequestData)
  GOOGLE_DCHECK_NE(&from, this);
  const DataRequestData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataRequestData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.DataRequestData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.DataRequestData)
    MergeFrom(*source);
  }
}

void DataRequestData::MergeFrom(const DataRequestData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.DataRequestData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.compartmentname().size() > 0) {

    compartmentname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.compartmentname_);
  }
  if (from.substancename().size() > 0) {

    substancename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.substancename_);
  }
  if (from.propertyname().size() > 0) {

    propertyname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.propertyname_);
  }
  if (from.unit().size() > 0) {

    unit_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unit_);
  }
  if (from.has_decimalformat()) {
    _internal_mutable_decimalformat()->::pulse::cdm::bind::DecimalFormatData::MergeFrom(from._internal_decimalformat());
  }
  if (from.category() != 0) {
    _internal_set_category(from._internal_category());
  }
}

void DataRequestData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.DataRequestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataRequestData::CopyFrom(const DataRequestData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.DataRequestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataRequestData::IsInitialized() const {
  return true;
}

void DataRequestData::InternalSwap(DataRequestData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  compartmentname_.Swap(&other->compartmentname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  substancename_.Swap(&other->substancename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  propertyname_.Swap(&other->propertyname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  unit_.Swap(&other->unit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(decimalformat_, other->decimalformat_);
  swap(category_, other->category_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataRequestData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DataRequestManagerData::InitAsDefaultInstance() {
  ::pulse::cdm::bind::_DataRequestManagerData_default_instance_._instance.get_mutable()->defaultdecimalformatting_ = const_cast< ::pulse::cdm::bind::DecimalFormatData*>(
      ::pulse::cdm::bind::DecimalFormatData::internal_default_instance());
  ::pulse::cdm::bind::_DataRequestManagerData_default_instance_._instance.get_mutable()->overridedecimalformatting_ = const_cast< ::pulse::cdm::bind::DecimalFormatData*>(
      ::pulse::cdm::bind::DecimalFormatData::internal_default_instance());
}
class DataRequestManagerData::_Internal {
 public:
  static const ::pulse::cdm::bind::DecimalFormatData& defaultdecimalformatting(const DataRequestManagerData* msg);
  static const ::pulse::cdm::bind::DecimalFormatData& overridedecimalformatting(const DataRequestManagerData* msg);
};

const ::pulse::cdm::bind::DecimalFormatData&
DataRequestManagerData::_Internal::defaultdecimalformatting(const DataRequestManagerData* msg) {
  return *msg->defaultdecimalformatting_;
}
const ::pulse::cdm::bind::DecimalFormatData&
DataRequestManagerData::_Internal::overridedecimalformatting(const DataRequestManagerData* msg) {
  return *msg->overridedecimalformatting_;
}
DataRequestManagerData::DataRequestManagerData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pulse.cdm.bind.DataRequestManagerData)
}
DataRequestManagerData::DataRequestManagerData(const DataRequestManagerData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      datarequest_(from.datarequest_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  resultsfilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resultsfilename().empty()) {
    resultsfilename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resultsfilename_);
  }
  if (from._internal_has_defaultdecimalformatting()) {
    defaultdecimalformatting_ = new ::pulse::cdm::bind::DecimalFormatData(*from.defaultdecimalformatting_);
  } else {
    defaultdecimalformatting_ = nullptr;
  }
  if (from._internal_has_overridedecimalformatting()) {
    overridedecimalformatting_ = new ::pulse::cdm::bind::DecimalFormatData(*from.overridedecimalformatting_);
  } else {
    overridedecimalformatting_ = nullptr;
  }
  samplespersecond_ = from.samplespersecond_;
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.DataRequestManagerData)
}

void DataRequestManagerData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataRequestManagerData_pulse_2fcdm_2fbind_2fEngine_2eproto.base);
  resultsfilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&defaultdecimalformatting_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&samplespersecond_) -
      reinterpret_cast<char*>(&defaultdecimalformatting_)) + sizeof(samplespersecond_));
}

DataRequestManagerData::~DataRequestManagerData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.DataRequestManagerData)
  SharedDtor();
}

void DataRequestManagerData::SharedDtor() {
  resultsfilename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete defaultdecimalformatting_;
  if (this != internal_default_instance()) delete overridedecimalformatting_;
}

void DataRequestManagerData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataRequestManagerData& DataRequestManagerData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataRequestManagerData_pulse_2fcdm_2fbind_2fEngine_2eproto.base);
  return *internal_default_instance();
}


void DataRequestManagerData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.DataRequestManagerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datarequest_.Clear();
  resultsfilename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && defaultdecimalformatting_ != nullptr) {
    delete defaultdecimalformatting_;
  }
  defaultdecimalformatting_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && overridedecimalformatting_ != nullptr) {
    delete overridedecimalformatting_;
  }
  overridedecimalformatting_ = nullptr;
  samplespersecond_ = 0;
  _internal_metadata_.Clear();
}

const char* DataRequestManagerData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ResultsFilename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_resultsfilename(), ptr, ctx, "pulse.cdm.bind.DataRequestManagerData.ResultsFilename");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double SamplesPerSecond = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          samplespersecond_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.DecimalFormatData DefaultDecimalFormatting = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_defaultdecimalformatting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.DecimalFormatData OverrideDecimalFormatting = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_overridedecimalformatting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pulse.cdm.bind.DataRequestData DataRequest = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datarequest(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataRequestManagerData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.DataRequestManagerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ResultsFilename = 1;
  if (this->resultsfilename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resultsfilename().data(), static_cast<int>(this->_internal_resultsfilename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.DataRequestManagerData.ResultsFilename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_resultsfilename(), target);
  }

  // double SamplesPerSecond = 2;
  if (!(this->samplespersecond() <= 0 && this->samplespersecond() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_samplespersecond(), target);
  }

  // .pulse.cdm.bind.DecimalFormatData DefaultDecimalFormatting = 3;
  if (this->has_defaultdecimalformatting()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::defaultdecimalformatting(this), target, stream);
  }

  // .pulse.cdm.bind.DecimalFormatData OverrideDecimalFormatting = 4;
  if (this->has_overridedecimalformatting()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::overridedecimalformatting(this), target, stream);
  }

  // repeated .pulse.cdm.bind.DataRequestData DataRequest = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_datarequest_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(5, this->_internal_datarequest(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.DataRequestManagerData)
  return target;
}

size_t DataRequestManagerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.DataRequestManagerData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pulse.cdm.bind.DataRequestData DataRequest = 5;
  total_size += 1UL * this->_internal_datarequest_size();
  for (const auto& msg : this->datarequest_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string ResultsFilename = 1;
  if (this->resultsfilename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resultsfilename());
  }

  // .pulse.cdm.bind.DecimalFormatData DefaultDecimalFormatting = 3;
  if (this->has_defaultdecimalformatting()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *defaultdecimalformatting_);
  }

  // .pulse.cdm.bind.DecimalFormatData OverrideDecimalFormatting = 4;
  if (this->has_overridedecimalformatting()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *overridedecimalformatting_);
  }

  // double SamplesPerSecond = 2;
  if (!(this->samplespersecond() <= 0 && this->samplespersecond() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataRequestManagerData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.DataRequestManagerData)
  GOOGLE_DCHECK_NE(&from, this);
  const DataRequestManagerData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataRequestManagerData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.DataRequestManagerData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.DataRequestManagerData)
    MergeFrom(*source);
  }
}

void DataRequestManagerData::MergeFrom(const DataRequestManagerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.DataRequestManagerData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  datarequest_.MergeFrom(from.datarequest_);
  if (from.resultsfilename().size() > 0) {

    resultsfilename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resultsfilename_);
  }
  if (from.has_defaultdecimalformatting()) {
    _internal_mutable_defaultdecimalformatting()->::pulse::cdm::bind::DecimalFormatData::MergeFrom(from._internal_defaultdecimalformatting());
  }
  if (from.has_overridedecimalformatting()) {
    _internal_mutable_overridedecimalformatting()->::pulse::cdm::bind::DecimalFormatData::MergeFrom(from._internal_overridedecimalformatting());
  }
  if (!(from.samplespersecond() <= 0 && from.samplespersecond() >= 0)) {
    _internal_set_samplespersecond(from._internal_samplespersecond());
  }
}

void DataRequestManagerData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.DataRequestManagerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataRequestManagerData::CopyFrom(const DataRequestManagerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.DataRequestManagerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataRequestManagerData::IsInitialized() const {
  return true;
}

void DataRequestManagerData::InternalSwap(DataRequestManagerData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  datarequest_.InternalSwap(&other->datarequest_);
  resultsfilename_.Swap(&other->resultsfilename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(defaultdecimalformatting_, other->defaultdecimalformatting_);
  swap(overridedecimalformatting_, other->overridedecimalformatting_);
  swap(samplespersecond_, other->samplespersecond_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataRequestManagerData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnyConditionData::InitAsDefaultInstance() {
  ::pulse::cdm::bind::_AnyConditionData_default_instance_.patientcondition_ = const_cast< ::pulse::cdm::bind::AnyPatientConditionData*>(
      ::pulse::cdm::bind::AnyPatientConditionData::internal_default_instance());
  ::pulse::cdm::bind::_AnyConditionData_default_instance_.environmentcondition_ = const_cast< ::pulse::cdm::bind::AnyEnvironmentConditionData*>(
      ::pulse::cdm::bind::AnyEnvironmentConditionData::internal_default_instance());
}
class AnyConditionData::_Internal {
 public:
  static const ::pulse::cdm::bind::AnyPatientConditionData& patientcondition(const AnyConditionData* msg);
  static const ::pulse::cdm::bind::AnyEnvironmentConditionData& environmentcondition(const AnyConditionData* msg);
};

const ::pulse::cdm::bind::AnyPatientConditionData&
AnyConditionData::_Internal::patientcondition(const AnyConditionData* msg) {
  return *msg->Condition_.patientcondition_;
}
const ::pulse::cdm::bind::AnyEnvironmentConditionData&
AnyConditionData::_Internal::environmentcondition(const AnyConditionData* msg) {
  return *msg->Condition_.environmentcondition_;
}
void AnyConditionData::set_allocated_patientcondition(::pulse::cdm::bind::AnyPatientConditionData* patientcondition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Condition();
  if (patientcondition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      patientcondition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientcondition, submessage_arena);
    }
    set_has_patientcondition();
    Condition_.patientcondition_ = patientcondition;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyConditionData.PatientCondition)
}
void AnyConditionData::clear_patientcondition() {
  if (_internal_has_patientcondition()) {
    delete Condition_.patientcondition_;
    clear_has_Condition();
  }
}
void AnyConditionData::set_allocated_environmentcondition(::pulse::cdm::bind::AnyEnvironmentConditionData* environmentcondition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Condition();
  if (environmentcondition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      environmentcondition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, environmentcondition, submessage_arena);
    }
    set_has_environmentcondition();
    Condition_.environmentcondition_ = environmentcondition;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyConditionData.EnvironmentCondition)
}
void AnyConditionData::clear_environmentcondition() {
  if (_internal_has_environmentcondition()) {
    delete Condition_.environmentcondition_;
    clear_has_Condition();
  }
}
AnyConditionData::AnyConditionData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pulse.cdm.bind.AnyConditionData)
}
AnyConditionData::AnyConditionData(const AnyConditionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_Condition();
  switch (from.Condition_case()) {
    case kPatientCondition: {
      _internal_mutable_patientcondition()->::pulse::cdm::bind::AnyPatientConditionData::MergeFrom(from._internal_patientcondition());
      break;
    }
    case kEnvironmentCondition: {
      _internal_mutable_environmentcondition()->::pulse::cdm::bind::AnyEnvironmentConditionData::MergeFrom(from._internal_environmentcondition());
      break;
    }
    case CONDITION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.AnyConditionData)
}

void AnyConditionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnyConditionData_pulse_2fcdm_2fbind_2fEngine_2eproto.base);
  clear_has_Condition();
}

AnyConditionData::~AnyConditionData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.AnyConditionData)
  SharedDtor();
}

void AnyConditionData::SharedDtor() {
  if (has_Condition()) {
    clear_Condition();
  }
}

void AnyConditionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnyConditionData& AnyConditionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnyConditionData_pulse_2fcdm_2fbind_2fEngine_2eproto.base);
  return *internal_default_instance();
}


void AnyConditionData::clear_Condition() {
// @@protoc_insertion_point(one_of_clear_start:pulse.cdm.bind.AnyConditionData)
  switch (Condition_case()) {
    case kPatientCondition: {
      delete Condition_.patientcondition_;
      break;
    }
    case kEnvironmentCondition: {
      delete Condition_.environmentcondition_;
      break;
    }
    case CONDITION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONDITION_NOT_SET;
}


void AnyConditionData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.AnyConditionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_Condition();
  _internal_metadata_.Clear();
}

const char* AnyConditionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.AnyPatientConditionData PatientCondition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientcondition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.AnyEnvironmentConditionData EnvironmentCondition = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_environmentcondition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnyConditionData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.AnyConditionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.AnyPatientConditionData PatientCondition = 1;
  if (_internal_has_patientcondition()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::patientcondition(this), target, stream);
  }

  // .pulse.cdm.bind.AnyEnvironmentConditionData EnvironmentCondition = 2;
  if (_internal_has_environmentcondition()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::environmentcondition(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.AnyConditionData)
  return target;
}

size_t AnyConditionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.AnyConditionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (Condition_case()) {
    // .pulse.cdm.bind.AnyPatientConditionData PatientCondition = 1;
    case kPatientCondition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Condition_.patientcondition_);
      break;
    }
    // .pulse.cdm.bind.AnyEnvironmentConditionData EnvironmentCondition = 2;
    case kEnvironmentCondition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Condition_.environmentcondition_);
      break;
    }
    case CONDITION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnyConditionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.AnyConditionData)
  GOOGLE_DCHECK_NE(&from, this);
  const AnyConditionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnyConditionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.AnyConditionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.AnyConditionData)
    MergeFrom(*source);
  }
}

void AnyConditionData::MergeFrom(const AnyConditionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.AnyConditionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Condition_case()) {
    case kPatientCondition: {
      _internal_mutable_patientcondition()->::pulse::cdm::bind::AnyPatientConditionData::MergeFrom(from._internal_patientcondition());
      break;
    }
    case kEnvironmentCondition: {
      _internal_mutable_environmentcondition()->::pulse::cdm::bind::AnyEnvironmentConditionData::MergeFrom(from._internal_environmentcondition());
      break;
    }
    case CONDITION_NOT_SET: {
      break;
    }
  }
}

void AnyConditionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.AnyConditionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnyConditionData::CopyFrom(const AnyConditionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.AnyConditionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnyConditionData::IsInitialized() const {
  return true;
}

void AnyConditionData::InternalSwap(AnyConditionData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(Condition_, other->Condition_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnyConditionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConditionListData::InitAsDefaultInstance() {
}
class ConditionListData::_Internal {
 public:
};

ConditionListData::ConditionListData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pulse.cdm.bind.ConditionListData)
}
ConditionListData::ConditionListData(const ConditionListData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      anycondition_(from.anycondition_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ConditionListData)
}

void ConditionListData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConditionListData_pulse_2fcdm_2fbind_2fEngine_2eproto.base);
}

ConditionListData::~ConditionListData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ConditionListData)
  SharedDtor();
}

void ConditionListData::SharedDtor() {
}

void ConditionListData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConditionListData& ConditionListData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConditionListData_pulse_2fcdm_2fbind_2fEngine_2eproto.base);
  return *internal_default_instance();
}


void ConditionListData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ConditionListData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  anycondition_.Clear();
  _internal_metadata_.Clear();
}

const char* ConditionListData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pulse.cdm.bind.AnyConditionData AnyCondition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_anycondition(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConditionListData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ConditionListData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pulse.cdm.bind.AnyConditionData AnyCondition = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_anycondition_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_anycondition(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ConditionListData)
  return target;
}

size_t ConditionListData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ConditionListData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pulse.cdm.bind.AnyConditionData AnyCondition = 1;
  total_size += 1UL * this->_internal_anycondition_size();
  for (const auto& msg : this->anycondition_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConditionListData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ConditionListData)
  GOOGLE_DCHECK_NE(&from, this);
  const ConditionListData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConditionListData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ConditionListData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ConditionListData)
    MergeFrom(*source);
  }
}

void ConditionListData::MergeFrom(const ConditionListData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ConditionListData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  anycondition_.MergeFrom(from.anycondition_);
}

void ConditionListData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ConditionListData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConditionListData::CopyFrom(const ConditionListData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ConditionListData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionListData::IsInitialized() const {
  return true;
}

void ConditionListData::InternalSwap(ConditionListData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  anycondition_.InternalSwap(&other->anycondition_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConditionListData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnyActionData::InitAsDefaultInstance() {
  ::pulse::cdm::bind::_AnyActionData_default_instance_.advancetime_ = const_cast< ::pulse::cdm::bind::AdvanceTimeData*>(
      ::pulse::cdm::bind::AdvanceTimeData::internal_default_instance());
  ::pulse::cdm::bind::_AnyActionData_default_instance_.serialize_ = const_cast< ::pulse::cdm::bind::SerializeStateData*>(
      ::pulse::cdm::bind::SerializeStateData::internal_default_instance());
  ::pulse::cdm::bind::_AnyActionData_default_instance_.patientaction_ = const_cast< ::pulse::cdm::bind::AnyPatientActionData*>(
      ::pulse::cdm::bind::AnyPatientActionData::internal_default_instance());
  ::pulse::cdm::bind::_AnyActionData_default_instance_.environmentaction_ = const_cast< ::pulse::cdm::bind::AnyEnvironmentActionData*>(
      ::pulse::cdm::bind::AnyEnvironmentActionData::internal_default_instance());
  ::pulse::cdm::bind::_AnyActionData_default_instance_.anesthesiamachineaction_ = const_cast< ::pulse::cdm::bind::AnyAnesthesiaMachineActionData*>(
      ::pulse::cdm::bind::AnyAnesthesiaMachineActionData::internal_default_instance());
  ::pulse::cdm::bind::_AnyActionData_default_instance_.inhaleraction_ = const_cast< ::pulse::cdm::bind::AnyInhalerActionData*>(
      ::pulse::cdm::bind::AnyInhalerActionData::internal_default_instance());
}
class AnyActionData::_Internal {
 public:
  static const ::pulse::cdm::bind::AdvanceTimeData& advancetime(const AnyActionData* msg);
  static const ::pulse::cdm::bind::SerializeStateData& serialize(const AnyActionData* msg);
  static const ::pulse::cdm::bind::AnyPatientActionData& patientaction(const AnyActionData* msg);
  static const ::pulse::cdm::bind::AnyEnvironmentActionData& environmentaction(const AnyActionData* msg);
  static const ::pulse::cdm::bind::AnyAnesthesiaMachineActionData& anesthesiamachineaction(const AnyActionData* msg);
  static const ::pulse::cdm::bind::AnyInhalerActionData& inhaleraction(const AnyActionData* msg);
};

const ::pulse::cdm::bind::AdvanceTimeData&
AnyActionData::_Internal::advancetime(const AnyActionData* msg) {
  return *msg->Action_.advancetime_;
}
const ::pulse::cdm::bind::SerializeStateData&
AnyActionData::_Internal::serialize(const AnyActionData* msg) {
  return *msg->Action_.serialize_;
}
const ::pulse::cdm::bind::AnyPatientActionData&
AnyActionData::_Internal::patientaction(const AnyActionData* msg) {
  return *msg->Action_.patientaction_;
}
const ::pulse::cdm::bind::AnyEnvironmentActionData&
AnyActionData::_Internal::environmentaction(const AnyActionData* msg) {
  return *msg->Action_.environmentaction_;
}
const ::pulse::cdm::bind::AnyAnesthesiaMachineActionData&
AnyActionData::_Internal::anesthesiamachineaction(const AnyActionData* msg) {
  return *msg->Action_.anesthesiamachineaction_;
}
const ::pulse::cdm::bind::AnyInhalerActionData&
AnyActionData::_Internal::inhaleraction(const AnyActionData* msg) {
  return *msg->Action_.inhaleraction_;
}
void AnyActionData::set_allocated_advancetime(::pulse::cdm::bind::AdvanceTimeData* advancetime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Action();
  if (advancetime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      advancetime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advancetime, submessage_arena);
    }
    set_has_advancetime();
    Action_.advancetime_ = advancetime;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyActionData.AdvanceTime)
}
void AnyActionData::clear_advancetime() {
  if (_internal_has_advancetime()) {
    delete Action_.advancetime_;
    clear_has_Action();
  }
}
void AnyActionData::set_allocated_serialize(::pulse::cdm::bind::SerializeStateData* serialize) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Action();
  if (serialize) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      serialize = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, serialize, submessage_arena);
    }
    set_has_serialize();
    Action_.serialize_ = serialize;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyActionData.Serialize)
}
void AnyActionData::clear_serialize() {
  if (_internal_has_serialize()) {
    delete Action_.serialize_;
    clear_has_Action();
  }
}
void AnyActionData::set_allocated_patientaction(::pulse::cdm::bind::AnyPatientActionData* patientaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Action();
  if (patientaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      patientaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientaction, submessage_arena);
    }
    set_has_patientaction();
    Action_.patientaction_ = patientaction;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyActionData.PatientAction)
}
void AnyActionData::clear_patientaction() {
  if (_internal_has_patientaction()) {
    delete Action_.patientaction_;
    clear_has_Action();
  }
}
void AnyActionData::set_allocated_environmentaction(::pulse::cdm::bind::AnyEnvironmentActionData* environmentaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Action();
  if (environmentaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      environmentaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, environmentaction, submessage_arena);
    }
    set_has_environmentaction();
    Action_.environmentaction_ = environmentaction;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyActionData.EnvironmentAction)
}
void AnyActionData::clear_environmentaction() {
  if (_internal_has_environmentaction()) {
    delete Action_.environmentaction_;
    clear_has_Action();
  }
}
void AnyActionData::set_allocated_anesthesiamachineaction(::pulse::cdm::bind::AnyAnesthesiaMachineActionData* anesthesiamachineaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Action();
  if (anesthesiamachineaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      anesthesiamachineaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anesthesiamachineaction, submessage_arena);
    }
    set_has_anesthesiamachineaction();
    Action_.anesthesiamachineaction_ = anesthesiamachineaction;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyActionData.AnesthesiaMachineAction)
}
void AnyActionData::clear_anesthesiamachineaction() {
  if (_internal_has_anesthesiamachineaction()) {
    delete Action_.anesthesiamachineaction_;
    clear_has_Action();
  }
}
void AnyActionData::set_allocated_inhaleraction(::pulse::cdm::bind::AnyInhalerActionData* inhaleraction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Action();
  if (inhaleraction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      inhaleraction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inhaleraction, submessage_arena);
    }
    set_has_inhaleraction();
    Action_.inhaleraction_ = inhaleraction;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyActionData.InhalerAction)
}
void AnyActionData::clear_inhaleraction() {
  if (_internal_has_inhaleraction()) {
    delete Action_.inhaleraction_;
    clear_has_Action();
  }
}
AnyActionData::AnyActionData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pulse.cdm.bind.AnyActionData)
}
AnyActionData::AnyActionData(const AnyActionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_Action();
  switch (from.Action_case()) {
    case kAdvanceTime: {
      _internal_mutable_advancetime()->::pulse::cdm::bind::AdvanceTimeData::MergeFrom(from._internal_advancetime());
      break;
    }
    case kSerialize: {
      _internal_mutable_serialize()->::pulse::cdm::bind::SerializeStateData::MergeFrom(from._internal_serialize());
      break;
    }
    case kPatientAction: {
      _internal_mutable_patientaction()->::pulse::cdm::bind::AnyPatientActionData::MergeFrom(from._internal_patientaction());
      break;
    }
    case kEnvironmentAction: {
      _internal_mutable_environmentaction()->::pulse::cdm::bind::AnyEnvironmentActionData::MergeFrom(from._internal_environmentaction());
      break;
    }
    case kAnesthesiaMachineAction: {
      _internal_mutable_anesthesiamachineaction()->::pulse::cdm::bind::AnyAnesthesiaMachineActionData::MergeFrom(from._internal_anesthesiamachineaction());
      break;
    }
    case kInhalerAction: {
      _internal_mutable_inhaleraction()->::pulse::cdm::bind::AnyInhalerActionData::MergeFrom(from._internal_inhaleraction());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.AnyActionData)
}

void AnyActionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnyActionData_pulse_2fcdm_2fbind_2fEngine_2eproto.base);
  clear_has_Action();
}

AnyActionData::~AnyActionData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.AnyActionData)
  SharedDtor();
}

void AnyActionData::SharedDtor() {
  if (has_Action()) {
    clear_Action();
  }
}

void AnyActionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnyActionData& AnyActionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnyActionData_pulse_2fcdm_2fbind_2fEngine_2eproto.base);
  return *internal_default_instance();
}


void AnyActionData::clear_Action() {
// @@protoc_insertion_point(one_of_clear_start:pulse.cdm.bind.AnyActionData)
  switch (Action_case()) {
    case kAdvanceTime: {
      delete Action_.advancetime_;
      break;
    }
    case kSerialize: {
      delete Action_.serialize_;
      break;
    }
    case kPatientAction: {
      delete Action_.patientaction_;
      break;
    }
    case kEnvironmentAction: {
      delete Action_.environmentaction_;
      break;
    }
    case kAnesthesiaMachineAction: {
      delete Action_.anesthesiamachineaction_;
      break;
    }
    case kInhalerAction: {
      delete Action_.inhaleraction_;
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_NOT_SET;
}


void AnyActionData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.AnyActionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_Action();
  _internal_metadata_.Clear();
}

const char* AnyActionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.AdvanceTimeData AdvanceTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_advancetime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.SerializeStateData Serialize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_serialize(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.AnyPatientActionData PatientAction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.AnyEnvironmentActionData EnvironmentAction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_environmentaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.AnyAnesthesiaMachineActionData AnesthesiaMachineAction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_anesthesiamachineaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.AnyInhalerActionData InhalerAction = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_inhaleraction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnyActionData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.AnyActionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.AdvanceTimeData AdvanceTime = 1;
  if (_internal_has_advancetime()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::advancetime(this), target, stream);
  }

  // .pulse.cdm.bind.SerializeStateData Serialize = 2;
  if (_internal_has_serialize()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::serialize(this), target, stream);
  }

  // .pulse.cdm.bind.AnyPatientActionData PatientAction = 3;
  if (_internal_has_patientaction()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::patientaction(this), target, stream);
  }

  // .pulse.cdm.bind.AnyEnvironmentActionData EnvironmentAction = 4;
  if (_internal_has_environmentaction()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::environmentaction(this), target, stream);
  }

  // .pulse.cdm.bind.AnyAnesthesiaMachineActionData AnesthesiaMachineAction = 5;
  if (_internal_has_anesthesiamachineaction()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::anesthesiamachineaction(this), target, stream);
  }

  // .pulse.cdm.bind.AnyInhalerActionData InhalerAction = 6;
  if (_internal_has_inhaleraction()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::inhaleraction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.AnyActionData)
  return target;
}

size_t AnyActionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.AnyActionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (Action_case()) {
    // .pulse.cdm.bind.AdvanceTimeData AdvanceTime = 1;
    case kAdvanceTime: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.advancetime_);
      break;
    }
    // .pulse.cdm.bind.SerializeStateData Serialize = 2;
    case kSerialize: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.serialize_);
      break;
    }
    // .pulse.cdm.bind.AnyPatientActionData PatientAction = 3;
    case kPatientAction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.patientaction_);
      break;
    }
    // .pulse.cdm.bind.AnyEnvironmentActionData EnvironmentAction = 4;
    case kEnvironmentAction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.environmentaction_);
      break;
    }
    // .pulse.cdm.bind.AnyAnesthesiaMachineActionData AnesthesiaMachineAction = 5;
    case kAnesthesiaMachineAction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.anesthesiamachineaction_);
      break;
    }
    // .pulse.cdm.bind.AnyInhalerActionData InhalerAction = 6;
    case kInhalerAction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.inhaleraction_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnyActionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.AnyActionData)
  GOOGLE_DCHECK_NE(&from, this);
  const AnyActionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnyActionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.AnyActionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.AnyActionData)
    MergeFrom(*source);
  }
}

void AnyActionData::MergeFrom(const AnyActionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.AnyActionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Action_case()) {
    case kAdvanceTime: {
      _internal_mutable_advancetime()->::pulse::cdm::bind::AdvanceTimeData::MergeFrom(from._internal_advancetime());
      break;
    }
    case kSerialize: {
      _internal_mutable_serialize()->::pulse::cdm::bind::SerializeStateData::MergeFrom(from._internal_serialize());
      break;
    }
    case kPatientAction: {
      _internal_mutable_patientaction()->::pulse::cdm::bind::AnyPatientActionData::MergeFrom(from._internal_patientaction());
      break;
    }
    case kEnvironmentAction: {
      _internal_mutable_environmentaction()->::pulse::cdm::bind::AnyEnvironmentActionData::MergeFrom(from._internal_environmentaction());
      break;
    }
    case kAnesthesiaMachineAction: {
      _internal_mutable_anesthesiamachineaction()->::pulse::cdm::bind::AnyAnesthesiaMachineActionData::MergeFrom(from._internal_anesthesiamachineaction());
      break;
    }
    case kInhalerAction: {
      _internal_mutable_inhaleraction()->::pulse::cdm::bind::AnyInhalerActionData::MergeFrom(from._internal_inhaleraction());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
}

void AnyActionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.AnyActionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnyActionData::CopyFrom(const AnyActionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.AnyActionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnyActionData::IsInitialized() const {
  return true;
}

void AnyActionData::InternalSwap(AnyActionData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(Action_, other->Action_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnyActionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActionListData::InitAsDefaultInstance() {
}
class ActionListData::_Internal {
 public:
};

ActionListData::ActionListData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pulse.cdm.bind.ActionListData)
}
ActionListData::ActionListData(const ActionListData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      anyaction_(from.anyaction_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ActionListData)
}

void ActionListData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActionListData_pulse_2fcdm_2fbind_2fEngine_2eproto.base);
}

ActionListData::~ActionListData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ActionListData)
  SharedDtor();
}

void ActionListData::SharedDtor() {
}

void ActionListData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActionListData& ActionListData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActionListData_pulse_2fcdm_2fbind_2fEngine_2eproto.base);
  return *internal_default_instance();
}


void ActionListData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ActionListData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  anyaction_.Clear();
  _internal_metadata_.Clear();
}

const char* ActionListData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pulse.cdm.bind.AnyActionData AnyAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_anyaction(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActionListData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ActionListData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pulse.cdm.bind.AnyActionData AnyAction = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_anyaction_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_anyaction(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ActionListData)
  return target;
}

size_t ActionListData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ActionListData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pulse.cdm.bind.AnyActionData AnyAction = 1;
  total_size += 1UL * this->_internal_anyaction_size();
  for (const auto& msg : this->anyaction_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionListData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ActionListData)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionListData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActionListData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ActionListData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ActionListData)
    MergeFrom(*source);
  }
}

void ActionListData::MergeFrom(const ActionListData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ActionListData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  anyaction_.MergeFrom(from.anyaction_);
}

void ActionListData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ActionListData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionListData::CopyFrom(const ActionListData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ActionListData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionListData::IsInitialized() const {
  return true;
}

void ActionListData::InternalSwap(ActionListData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  anyaction_.InternalSwap(&other->anyaction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionListData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EngineInitializationData::InitAsDefaultInstance() {
  ::pulse::cdm::bind::_EngineInitializationData_default_instance_.enginestatefile_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::pulse::cdm::bind::_EngineInitializationData_default_instance_.patientconfiguration_ = const_cast< ::pulse::cdm::bind::PatientConfigurationData*>(
      ::pulse::cdm::bind::PatientConfigurationData::internal_default_instance());
}
class EngineInitializationData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientConfigurationData& patientconfiguration(const EngineInitializationData* msg);
};

const ::pulse::cdm::bind::PatientConfigurationData&
EngineInitializationData::_Internal::patientconfiguration(const EngineInitializationData* msg) {
  return *msg->StartType_.patientconfiguration_;
}
void EngineInitializationData::set_allocated_patientconfiguration(::pulse::cdm::bind::PatientConfigurationData* patientconfiguration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_StartType();
  if (patientconfiguration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      patientconfiguration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientconfiguration, submessage_arena);
    }
    set_has_patientconfiguration();
    StartType_.patientconfiguration_ = patientconfiguration;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.EngineInitializationData.PatientConfiguration)
}
EngineInitializationData::EngineInitializationData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pulse.cdm.bind.EngineInitializationData)
}
EngineInitializationData::EngineInitializationData(const EngineInitializationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  logfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_logfile().empty()) {
    logfile_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.logfile_);
  }
  clear_has_StartType();
  switch (from.StartType_case()) {
    case kEngineStateFile: {
      _internal_set_enginestatefile(from._internal_enginestatefile());
      break;
    }
    case kPatientConfiguration: {
      _internal_mutable_patientconfiguration()->::pulse::cdm::bind::PatientConfigurationData::MergeFrom(from._internal_patientconfiguration());
      break;
    }
    case STARTTYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.EngineInitializationData)
}

void EngineInitializationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EngineInitializationData_pulse_2fcdm_2fbind_2fEngine_2eproto.base);
  logfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_StartType();
}

EngineInitializationData::~EngineInitializationData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.EngineInitializationData)
  SharedDtor();
}

void EngineInitializationData::SharedDtor() {
  logfile_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_StartType()) {
    clear_StartType();
  }
}

void EngineInitializationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EngineInitializationData& EngineInitializationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EngineInitializationData_pulse_2fcdm_2fbind_2fEngine_2eproto.base);
  return *internal_default_instance();
}


void EngineInitializationData::clear_StartType() {
// @@protoc_insertion_point(one_of_clear_start:pulse.cdm.bind.EngineInitializationData)
  switch (StartType_case()) {
    case kEngineStateFile: {
      StartType_.enginestatefile_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kPatientConfiguration: {
      delete StartType_.patientconfiguration_;
      break;
    }
    case STARTTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STARTTYPE_NOT_SET;
}


void EngineInitializationData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.EngineInitializationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logfile_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_StartType();
  _internal_metadata_.Clear();
}

const char* EngineInitializationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string EngineStateFile = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_enginestatefile(), ptr, ctx, "pulse.cdm.bind.EngineInitializationData.EngineStateFile");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.PatientConfigurationData PatientConfiguration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientconfiguration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string LogFile = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_logfile(), ptr, ctx, "pulse.cdm.bind.EngineInitializationData.LogFile");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EngineInitializationData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.EngineInitializationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string EngineStateFile = 1;
  if (_internal_has_enginestatefile()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_enginestatefile().data(), static_cast<int>(this->_internal_enginestatefile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.EngineInitializationData.EngineStateFile");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enginestatefile(), target);
  }

  // .pulse.cdm.bind.PatientConfigurationData PatientConfiguration = 2;
  if (_internal_has_patientconfiguration()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::patientconfiguration(this), target, stream);
  }

  // string LogFile = 3;
  if (this->logfile().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logfile().data(), static_cast<int>(this->_internal_logfile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.EngineInitializationData.LogFile");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_logfile(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.EngineInitializationData)
  return target;
}

size_t EngineInitializationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.EngineInitializationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string LogFile = 3;
  if (this->logfile().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_logfile());
  }

  switch (StartType_case()) {
    // string EngineStateFile = 1;
    case kEngineStateFile: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_enginestatefile());
      break;
    }
    // .pulse.cdm.bind.PatientConfigurationData PatientConfiguration = 2;
    case kPatientConfiguration: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *StartType_.patientconfiguration_);
      break;
    }
    case STARTTYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EngineInitializationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.EngineInitializationData)
  GOOGLE_DCHECK_NE(&from, this);
  const EngineInitializationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EngineInitializationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.EngineInitializationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.EngineInitializationData)
    MergeFrom(*source);
  }
}

void EngineInitializationData::MergeFrom(const EngineInitializationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.EngineInitializationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.logfile().size() > 0) {

    logfile_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.logfile_);
  }
  switch (from.StartType_case()) {
    case kEngineStateFile: {
      _internal_set_enginestatefile(from._internal_enginestatefile());
      break;
    }
    case kPatientConfiguration: {
      _internal_mutable_patientconfiguration()->::pulse::cdm::bind::PatientConfigurationData::MergeFrom(from._internal_patientconfiguration());
      break;
    }
    case STARTTYPE_NOT_SET: {
      break;
    }
  }
}

void EngineInitializationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.EngineInitializationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EngineInitializationData::CopyFrom(const EngineInitializationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.EngineInitializationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EngineInitializationData::IsInitialized() const {
  return true;
}

void EngineInitializationData::InternalSwap(EngineInitializationData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  logfile_.Swap(&other->logfile_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(StartType_, other->StartType_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata EngineInitializationData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PatientConfigurationData::InitAsDefaultInstance() {
  ::pulse::cdm::bind::_PatientConfigurationData_default_instance_.patient_ = const_cast< ::pulse::cdm::bind::PatientData*>(
      ::pulse::cdm::bind::PatientData::internal_default_instance());
  ::pulse::cdm::bind::_PatientConfigurationData_default_instance_.patientfile_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::pulse::cdm::bind::_PatientConfigurationData_default_instance_._instance.get_mutable()->conditions_ = const_cast< ::pulse::cdm::bind::ConditionListData*>(
      ::pulse::cdm::bind::ConditionListData::internal_default_instance());
}
class PatientConfigurationData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientData& patient(const PatientConfigurationData* msg);
  static const ::pulse::cdm::bind::ConditionListData& conditions(const PatientConfigurationData* msg);
};

const ::pulse::cdm::bind::PatientData&
PatientConfigurationData::_Internal::patient(const PatientConfigurationData* msg) {
  return *msg->PatientType_.patient_;
}
const ::pulse::cdm::bind::ConditionListData&
PatientConfigurationData::_Internal::conditions(const PatientConfigurationData* msg) {
  return *msg->conditions_;
}
void PatientConfigurationData::set_allocated_patient(::pulse::cdm::bind::PatientData* patient) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_PatientType();
  if (patient) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      patient = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patient, submessage_arena);
    }
    set_has_patient();
    PatientType_.patient_ = patient;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PatientConfigurationData.Patient)
}
void PatientConfigurationData::clear_patient() {
  if (_internal_has_patient()) {
    delete PatientType_.patient_;
    clear_has_PatientType();
  }
}
PatientConfigurationData::PatientConfigurationData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pulse.cdm.bind.PatientConfigurationData)
}
PatientConfigurationData::PatientConfigurationData(const PatientConfigurationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_conditions()) {
    conditions_ = new ::pulse::cdm::bind::ConditionListData(*from.conditions_);
  } else {
    conditions_ = nullptr;
  }
  clear_has_PatientType();
  switch (from.PatientType_case()) {
    case kPatient: {
      _internal_mutable_patient()->::pulse::cdm::bind::PatientData::MergeFrom(from._internal_patient());
      break;
    }
    case kPatientFile: {
      _internal_set_patientfile(from._internal_patientfile());
      break;
    }
    case PATIENTTYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.PatientConfigurationData)
}

void PatientConfigurationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatientConfigurationData_pulse_2fcdm_2fbind_2fEngine_2eproto.base);
  conditions_ = nullptr;
  clear_has_PatientType();
}

PatientConfigurationData::~PatientConfigurationData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.PatientConfigurationData)
  SharedDtor();
}

void PatientConfigurationData::SharedDtor() {
  if (this != internal_default_instance()) delete conditions_;
  if (has_PatientType()) {
    clear_PatientType();
  }
}

void PatientConfigurationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatientConfigurationData& PatientConfigurationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatientConfigurationData_pulse_2fcdm_2fbind_2fEngine_2eproto.base);
  return *internal_default_instance();
}


void PatientConfigurationData::clear_PatientType() {
// @@protoc_insertion_point(one_of_clear_start:pulse.cdm.bind.PatientConfigurationData)
  switch (PatientType_case()) {
    case kPatient: {
      delete PatientType_.patient_;
      break;
    }
    case kPatientFile: {
      PatientType_.patientfile_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case PATIENTTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PATIENTTYPE_NOT_SET;
}


void PatientConfigurationData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.PatientConfigurationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && conditions_ != nullptr) {
    delete conditions_;
  }
  conditions_ = nullptr;
  clear_PatientType();
  _internal_metadata_.Clear();
}

const char* PatientConfigurationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientData Patient = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string PatientFile = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_patientfile(), ptr, ctx, "pulse.cdm.bind.PatientConfigurationData.PatientFile");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ConditionListData Conditions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_conditions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatientConfigurationData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.PatientConfigurationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientData Patient = 1;
  if (_internal_has_patient()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::patient(this), target, stream);
  }

  // string PatientFile = 2;
  if (_internal_has_patientfile()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_patientfile().data(), static_cast<int>(this->_internal_patientfile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.PatientConfigurationData.PatientFile");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_patientfile(), target);
  }

  // .pulse.cdm.bind.ConditionListData Conditions = 3;
  if (this->has_conditions()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::conditions(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.PatientConfigurationData)
  return target;
}

size_t PatientConfigurationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.PatientConfigurationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ConditionListData Conditions = 3;
  if (this->has_conditions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *conditions_);
  }

  switch (PatientType_case()) {
    // .pulse.cdm.bind.PatientData Patient = 1;
    case kPatient: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *PatientType_.patient_);
      break;
    }
    // string PatientFile = 2;
    case kPatientFile: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_patientfile());
      break;
    }
    case PATIENTTYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatientConfigurationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.PatientConfigurationData)
  GOOGLE_DCHECK_NE(&from, this);
  const PatientConfigurationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatientConfigurationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.PatientConfigurationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.PatientConfigurationData)
    MergeFrom(*source);
  }
}

void PatientConfigurationData::MergeFrom(const PatientConfigurationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.PatientConfigurationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_conditions()) {
    _internal_mutable_conditions()->::pulse::cdm::bind::ConditionListData::MergeFrom(from._internal_conditions());
  }
  switch (from.PatientType_case()) {
    case kPatient: {
      _internal_mutable_patient()->::pulse::cdm::bind::PatientData::MergeFrom(from._internal_patient());
      break;
    }
    case kPatientFile: {
      _internal_set_patientfile(from._internal_patientfile());
      break;
    }
    case PATIENTTYPE_NOT_SET: {
      break;
    }
  }
}

void PatientConfigurationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.PatientConfigurationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatientConfigurationData::CopyFrom(const PatientConfigurationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.PatientConfigurationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatientConfigurationData::IsInitialized() const {
  return true;
}

void PatientConfigurationData::InternalSwap(PatientConfigurationData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(conditions_, other->conditions_);
  swap(PatientType_, other->PatientType_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatientConfigurationData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AutoSerializationData::InitAsDefaultInstance() {
  ::pulse::cdm::bind::_AutoSerializationData_default_instance_._instance.get_mutable()->period_ = const_cast< ::pulse::cdm::bind::ScalarTimeData*>(
      ::pulse::cdm::bind::ScalarTimeData::internal_default_instance());
}
class AutoSerializationData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarTimeData& period(const AutoSerializationData* msg);
};

const ::pulse::cdm::bind::ScalarTimeData&
AutoSerializationData::_Internal::period(const AutoSerializationData* msg) {
  return *msg->period_;
}
void AutoSerializationData::clear_period() {
  if (GetArenaNoVirtual() == nullptr && period_ != nullptr) {
    delete period_;
  }
  period_ = nullptr;
}
AutoSerializationData::AutoSerializationData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pulse.cdm.bind.AutoSerializationData)
}
AutoSerializationData::AutoSerializationData(const AutoSerializationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_directory().empty()) {
    directory_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.directory_);
  }
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from._internal_has_period()) {
    period_ = new ::pulse::cdm::bind::ScalarTimeData(*from.period_);
  } else {
    period_ = nullptr;
  }
  ::memcpy(&afteractions_, &from.afteractions_,
    static_cast<size_t>(reinterpret_cast<char*>(&reloadstate_) -
    reinterpret_cast<char*>(&afteractions_)) + sizeof(reloadstate_));
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.AutoSerializationData)
}

void AutoSerializationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AutoSerializationData_pulse_2fcdm_2fbind_2fEngine_2eproto.base);
  directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&period_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reloadstate_) -
      reinterpret_cast<char*>(&period_)) + sizeof(reloadstate_));
}

AutoSerializationData::~AutoSerializationData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.AutoSerializationData)
  SharedDtor();
}

void AutoSerializationData::SharedDtor() {
  directory_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete period_;
}

void AutoSerializationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutoSerializationData& AutoSerializationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutoSerializationData_pulse_2fcdm_2fbind_2fEngine_2eproto.base);
  return *internal_default_instance();
}


void AutoSerializationData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.AutoSerializationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  directory_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && period_ != nullptr) {
    delete period_;
  }
  period_ = nullptr;
  ::memset(&afteractions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reloadstate_) -
      reinterpret_cast<char*>(&afteractions_)) + sizeof(reloadstate_));
  _internal_metadata_.Clear();
}

const char* AutoSerializationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Directory = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_directory(), ptr, ctx, "pulse.cdm.bind.AutoSerializationData.Directory");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Filename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_filename(), ptr, ctx, "pulse.cdm.bind.AutoSerializationData.Filename");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.eSwitch AfterActions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_afteractions(static_cast<::pulse::cdm::bind::eSwitch>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarTimeData Period = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_period(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.eSwitch PeriodTimeStamps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_periodtimestamps(static_cast<::pulse::cdm::bind::eSwitch>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.eSwitch ReloadState = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_reloadstate(static_cast<::pulse::cdm::bind::eSwitch>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AutoSerializationData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.AutoSerializationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Directory = 1;
  if (this->directory().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_directory().data(), static_cast<int>(this->_internal_directory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.AutoSerializationData.Directory");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_directory(), target);
  }

  // string Filename = 2;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.AutoSerializationData.Filename");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_filename(), target);
  }

  // .pulse.cdm.bind.eSwitch AfterActions = 3;
  if (this->afteractions() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_afteractions(), target);
  }

  // .pulse.cdm.bind.ScalarTimeData Period = 4;
  if (this->has_period()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::period(this), target, stream);
  }

  // .pulse.cdm.bind.eSwitch PeriodTimeStamps = 5;
  if (this->periodtimestamps() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_periodtimestamps(), target);
  }

  // .pulse.cdm.bind.eSwitch ReloadState = 6;
  if (this->reloadstate() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_reloadstate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.AutoSerializationData)
  return target;
}

size_t AutoSerializationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.AutoSerializationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Directory = 1;
  if (this->directory().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_directory());
  }

  // string Filename = 2;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // .pulse.cdm.bind.ScalarTimeData Period = 4;
  if (this->has_period()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *period_);
  }

  // .pulse.cdm.bind.eSwitch AfterActions = 3;
  if (this->afteractions() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_afteractions());
  }

  // .pulse.cdm.bind.eSwitch PeriodTimeStamps = 5;
  if (this->periodtimestamps() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_periodtimestamps());
  }

  // .pulse.cdm.bind.eSwitch ReloadState = 6;
  if (this->reloadstate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reloadstate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutoSerializationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.AutoSerializationData)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoSerializationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AutoSerializationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.AutoSerializationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.AutoSerializationData)
    MergeFrom(*source);
  }
}

void AutoSerializationData::MergeFrom(const AutoSerializationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.AutoSerializationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.directory().size() > 0) {

    directory_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.directory_);
  }
  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.has_period()) {
    _internal_mutable_period()->::pulse::cdm::bind::ScalarTimeData::MergeFrom(from._internal_period());
  }
  if (from.afteractions() != 0) {
    _internal_set_afteractions(from._internal_afteractions());
  }
  if (from.periodtimestamps() != 0) {
    _internal_set_periodtimestamps(from._internal_periodtimestamps());
  }
  if (from.reloadstate() != 0) {
    _internal_set_reloadstate(from._internal_reloadstate());
  }
}

void AutoSerializationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.AutoSerializationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoSerializationData::CopyFrom(const AutoSerializationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.AutoSerializationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoSerializationData::IsInitialized() const {
  return true;
}

void AutoSerializationData::InternalSwap(AutoSerializationData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  directory_.Swap(&other->directory_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(period_, other->period_);
  swap(afteractions_, other->afteractions_);
  swap(periodtimestamps_, other->periodtimestamps_);
  swap(reloadstate_, other->reloadstate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoSerializationData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

TimedStabilizationData_ConditionStabilizationEntry_DoNotUse::TimedStabilizationData_ConditionStabilizationEntry_DoNotUse() {}
TimedStabilizationData_ConditionStabilizationEntry_DoNotUse::TimedStabilizationData_ConditionStabilizationEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TimedStabilizationData_ConditionStabilizationEntry_DoNotUse::MergeFrom(const TimedStabilizationData_ConditionStabilizationEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TimedStabilizationData_ConditionStabilizationEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TimedStabilizationData_ConditionStabilizationEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void TimedStabilizationData::InitAsDefaultInstance() {
  ::pulse::cdm::bind::_TimedStabilizationData_default_instance_._instance.get_mutable()->restingstabilizationtime_ = const_cast< ::pulse::cdm::bind::ScalarTimeData*>(
      ::pulse::cdm::bind::ScalarTimeData::internal_default_instance());
  ::pulse::cdm::bind::_TimedStabilizationData_default_instance_._instance.get_mutable()->feedbackstabilizationtime_ = const_cast< ::pulse::cdm::bind::ScalarTimeData*>(
      ::pulse::cdm::bind::ScalarTimeData::internal_default_instance());
}
class TimedStabilizationData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarTimeData& restingstabilizationtime(const TimedStabilizationData* msg);
  static const ::pulse::cdm::bind::ScalarTimeData& feedbackstabilizationtime(const TimedStabilizationData* msg);
};

const ::pulse::cdm::bind::ScalarTimeData&
TimedStabilizationData::_Internal::restingstabilizationtime(const TimedStabilizationData* msg) {
  return *msg->restingstabilizationtime_;
}
const ::pulse::cdm::bind::ScalarTimeData&
TimedStabilizationData::_Internal::feedbackstabilizationtime(const TimedStabilizationData* msg) {
  return *msg->feedbackstabilizationtime_;
}
void TimedStabilizationData::clear_restingstabilizationtime() {
  if (GetArenaNoVirtual() == nullptr && restingstabilizationtime_ != nullptr) {
    delete restingstabilizationtime_;
  }
  restingstabilizationtime_ = nullptr;
}
void TimedStabilizationData::clear_feedbackstabilizationtime() {
  if (GetArenaNoVirtual() == nullptr && feedbackstabilizationtime_ != nullptr) {
    delete feedbackstabilizationtime_;
  }
  feedbackstabilizationtime_ = nullptr;
}
void TimedStabilizationData::clear_conditionstabilization() {
  conditionstabilization_.Clear();
}
TimedStabilizationData::TimedStabilizationData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pulse.cdm.bind.TimedStabilizationData)
}
TimedStabilizationData::TimedStabilizationData(const TimedStabilizationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  conditionstabilization_.MergeFrom(from.conditionstabilization_);
  if (from._internal_has_restingstabilizationtime()) {
    restingstabilizationtime_ = new ::pulse::cdm::bind::ScalarTimeData(*from.restingstabilizationtime_);
  } else {
    restingstabilizationtime_ = nullptr;
  }
  if (from._internal_has_feedbackstabilizationtime()) {
    feedbackstabilizationtime_ = new ::pulse::cdm::bind::ScalarTimeData(*from.feedbackstabilizationtime_);
  } else {
    feedbackstabilizationtime_ = nullptr;
  }
  trackingstabilization_ = from.trackingstabilization_;
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.TimedStabilizationData)
}

void TimedStabilizationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TimedStabilizationData_pulse_2fcdm_2fbind_2fEngine_2eproto.base);
  ::memset(&restingstabilizationtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trackingstabilization_) -
      reinterpret_cast<char*>(&restingstabilizationtime_)) + sizeof(trackingstabilization_));
}

TimedStabilizationData::~TimedStabilizationData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.TimedStabilizationData)
  SharedDtor();
}

void TimedStabilizationData::SharedDtor() {
  if (this != internal_default_instance()) delete restingstabilizationtime_;
  if (this != internal_default_instance()) delete feedbackstabilizationtime_;
}

void TimedStabilizationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimedStabilizationData& TimedStabilizationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimedStabilizationData_pulse_2fcdm_2fbind_2fEngine_2eproto.base);
  return *internal_default_instance();
}


void TimedStabilizationData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.TimedStabilizationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  conditionstabilization_.Clear();
  if (GetArenaNoVirtual() == nullptr && restingstabilizationtime_ != nullptr) {
    delete restingstabilizationtime_;
  }
  restingstabilizationtime_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && feedbackstabilizationtime_ != nullptr) {
    delete feedbackstabilizationtime_;
  }
  feedbackstabilizationtime_ = nullptr;
  trackingstabilization_ = 0;
  _internal_metadata_.Clear();
}

const char* TimedStabilizationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.eSwitch TrackingStabilization = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_trackingstabilization(static_cast<::pulse::cdm::bind::eSwitch>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarTimeData RestingStabilizationTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_restingstabilizationtime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarTimeData FeedbackStabilizationTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_feedbackstabilizationtime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .pulse.cdm.bind.ScalarTimeData> ConditionStabilization = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&conditionstabilization_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimedStabilizationData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.TimedStabilizationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.eSwitch TrackingStabilization = 1;
  if (this->trackingstabilization() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_trackingstabilization(), target);
  }

  // .pulse.cdm.bind.ScalarTimeData RestingStabilizationTime = 2;
  if (this->has_restingstabilizationtime()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::restingstabilizationtime(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarTimeData FeedbackStabilizationTime = 3;
  if (this->has_feedbackstabilizationtime()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::feedbackstabilizationtime(this), target, stream);
  }

  // map<string, .pulse.cdm.bind.ScalarTimeData> ConditionStabilization = 4;
  if (!this->_internal_conditionstabilization().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pulse::cdm::bind::ScalarTimeData >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "pulse.cdm.bind.TimedStabilizationData.ConditionStabilizationEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_conditionstabilization().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_conditionstabilization().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pulse::cdm::bind::ScalarTimeData >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pulse::cdm::bind::ScalarTimeData >::const_iterator
          it = this->_internal_conditionstabilization().begin();
          it != this->_internal_conditionstabilization().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TimedStabilizationData_ConditionStabilizationEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pulse::cdm::bind::ScalarTimeData >::const_iterator
          it = this->_internal_conditionstabilization().begin();
          it != this->_internal_conditionstabilization().end(); ++it) {
        target = TimedStabilizationData_ConditionStabilizationEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.TimedStabilizationData)
  return target;
}

size_t TimedStabilizationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.TimedStabilizationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .pulse.cdm.bind.ScalarTimeData> ConditionStabilization = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_conditionstabilization_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pulse::cdm::bind::ScalarTimeData >::const_iterator
      it = this->_internal_conditionstabilization().begin();
      it != this->_internal_conditionstabilization().end(); ++it) {
    total_size += TimedStabilizationData_ConditionStabilizationEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .pulse.cdm.bind.ScalarTimeData RestingStabilizationTime = 2;
  if (this->has_restingstabilizationtime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *restingstabilizationtime_);
  }

  // .pulse.cdm.bind.ScalarTimeData FeedbackStabilizationTime = 3;
  if (this->has_feedbackstabilizationtime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *feedbackstabilizationtime_);
  }

  // .pulse.cdm.bind.eSwitch TrackingStabilization = 1;
  if (this->trackingstabilization() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_trackingstabilization());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimedStabilizationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.TimedStabilizationData)
  GOOGLE_DCHECK_NE(&from, this);
  const TimedStabilizationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimedStabilizationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.TimedStabilizationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.TimedStabilizationData)
    MergeFrom(*source);
  }
}

void TimedStabilizationData::MergeFrom(const TimedStabilizationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.TimedStabilizationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  conditionstabilization_.MergeFrom(from.conditionstabilization_);
  if (from.has_restingstabilizationtime()) {
    _internal_mutable_restingstabilizationtime()->::pulse::cdm::bind::ScalarTimeData::MergeFrom(from._internal_restingstabilizationtime());
  }
  if (from.has_feedbackstabilizationtime()) {
    _internal_mutable_feedbackstabilizationtime()->::pulse::cdm::bind::ScalarTimeData::MergeFrom(from._internal_feedbackstabilizationtime());
  }
  if (from.trackingstabilization() != 0) {
    _internal_set_trackingstabilization(from._internal_trackingstabilization());
  }
}

void TimedStabilizationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.TimedStabilizationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimedStabilizationData::CopyFrom(const TimedStabilizationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.TimedStabilizationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimedStabilizationData::IsInitialized() const {
  return true;
}

void TimedStabilizationData::InternalSwap(TimedStabilizationData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  conditionstabilization_.Swap(&other->conditionstabilization_);
  swap(restingstabilizationtime_, other->restingstabilizationtime_);
  swap(feedbackstabilizationtime_, other->feedbackstabilizationtime_);
  swap(trackingstabilization_, other->trackingstabilization_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimedStabilizationData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DynamicStabilizationPropertyConvergenceData::InitAsDefaultInstance() {
  ::pulse::cdm::bind::_DynamicStabilizationPropertyConvergenceData_default_instance_._instance.get_mutable()->datarequest_ = const_cast< ::pulse::cdm::bind::DataRequestData*>(
      ::pulse::cdm::bind::DataRequestData::internal_default_instance());
}
class DynamicStabilizationPropertyConvergenceData::_Internal {
 public:
  static const ::pulse::cdm::bind::DataRequestData& datarequest(const DynamicStabilizationPropertyConvergenceData* msg);
};

const ::pulse::cdm::bind::DataRequestData&
DynamicStabilizationPropertyConvergenceData::_Internal::datarequest(const DynamicStabilizationPropertyConvergenceData* msg) {
  return *msg->datarequest_;
}
DynamicStabilizationPropertyConvergenceData::DynamicStabilizationPropertyConvergenceData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pulse.cdm.bind.DynamicStabilizationPropertyConvergenceData)
}
DynamicStabilizationPropertyConvergenceData::DynamicStabilizationPropertyConvergenceData(const DynamicStabilizationPropertyConvergenceData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_datarequest()) {
    datarequest_ = new ::pulse::cdm::bind::DataRequestData(*from.datarequest_);
  } else {
    datarequest_ = nullptr;
  }
  percentdifference_ = from.percentdifference_;
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.DynamicStabilizationPropertyConvergenceData)
}

void DynamicStabilizationPropertyConvergenceData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DynamicStabilizationPropertyConvergenceData_pulse_2fcdm_2fbind_2fEngine_2eproto.base);
  ::memset(&datarequest_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&percentdifference_) -
      reinterpret_cast<char*>(&datarequest_)) + sizeof(percentdifference_));
}

DynamicStabilizationPropertyConvergenceData::~DynamicStabilizationPropertyConvergenceData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.DynamicStabilizationPropertyConvergenceData)
  SharedDtor();
}

void DynamicStabilizationPropertyConvergenceData::SharedDtor() {
  if (this != internal_default_instance()) delete datarequest_;
}

void DynamicStabilizationPropertyConvergenceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DynamicStabilizationPropertyConvergenceData& DynamicStabilizationPropertyConvergenceData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DynamicStabilizationPropertyConvergenceData_pulse_2fcdm_2fbind_2fEngine_2eproto.base);
  return *internal_default_instance();
}


void DynamicStabilizationPropertyConvergenceData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.DynamicStabilizationPropertyConvergenceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && datarequest_ != nullptr) {
    delete datarequest_;
  }
  datarequest_ = nullptr;
  percentdifference_ = 0;
  _internal_metadata_.Clear();
}

const char* DynamicStabilizationPropertyConvergenceData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.DataRequestData DataRequest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_datarequest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double PercentDifference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          percentdifference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DynamicStabilizationPropertyConvergenceData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.DynamicStabilizationPropertyConvergenceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.DataRequestData DataRequest = 1;
  if (this->has_datarequest()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::datarequest(this), target, stream);
  }

  // double PercentDifference = 2;
  if (!(this->percentdifference() <= 0 && this->percentdifference() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_percentdifference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.DynamicStabilizationPropertyConvergenceData)
  return target;
}

size_t DynamicStabilizationPropertyConvergenceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.DynamicStabilizationPropertyConvergenceData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.DataRequestData DataRequest = 1;
  if (this->has_datarequest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *datarequest_);
  }

  // double PercentDifference = 2;
  if (!(this->percentdifference() <= 0 && this->percentdifference() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DynamicStabilizationPropertyConvergenceData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.DynamicStabilizationPropertyConvergenceData)
  GOOGLE_DCHECK_NE(&from, this);
  const DynamicStabilizationPropertyConvergenceData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DynamicStabilizationPropertyConvergenceData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.DynamicStabilizationPropertyConvergenceData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.DynamicStabilizationPropertyConvergenceData)
    MergeFrom(*source);
  }
}

void DynamicStabilizationPropertyConvergenceData::MergeFrom(const DynamicStabilizationPropertyConvergenceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.DynamicStabilizationPropertyConvergenceData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_datarequest()) {
    _internal_mutable_datarequest()->::pulse::cdm::bind::DataRequestData::MergeFrom(from._internal_datarequest());
  }
  if (!(from.percentdifference() <= 0 && from.percentdifference() >= 0)) {
    _internal_set_percentdifference(from._internal_percentdifference());
  }
}

void DynamicStabilizationPropertyConvergenceData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.DynamicStabilizationPropertyConvergenceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynamicStabilizationPropertyConvergenceData::CopyFrom(const DynamicStabilizationPropertyConvergenceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.DynamicStabilizationPropertyConvergenceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicStabilizationPropertyConvergenceData::IsInitialized() const {
  return true;
}

void DynamicStabilizationPropertyConvergenceData::InternalSwap(DynamicStabilizationPropertyConvergenceData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(datarequest_, other->datarequest_);
  swap(percentdifference_, other->percentdifference_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DynamicStabilizationPropertyConvergenceData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DynamicStabilizationEngineConvergenceData::InitAsDefaultInstance() {
  ::pulse::cdm::bind::_DynamicStabilizationEngineConvergenceData_default_instance_._instance.get_mutable()->convergencetime_ = const_cast< ::pulse::cdm::bind::ScalarTimeData*>(
      ::pulse::cdm::bind::ScalarTimeData::internal_default_instance());
  ::pulse::cdm::bind::_DynamicStabilizationEngineConvergenceData_default_instance_._instance.get_mutable()->minimumreactiontime_ = const_cast< ::pulse::cdm::bind::ScalarTimeData*>(
      ::pulse::cdm::bind::ScalarTimeData::internal_default_instance());
  ::pulse::cdm::bind::_DynamicStabilizationEngineConvergenceData_default_instance_._instance.get_mutable()->maximumallowedstabilizationtime_ = const_cast< ::pulse::cdm::bind::ScalarTimeData*>(
      ::pulse::cdm::bind::ScalarTimeData::internal_default_instance());
}
class DynamicStabilizationEngineConvergenceData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarTimeData& convergencetime(const DynamicStabilizationEngineConvergenceData* msg);
  static const ::pulse::cdm::bind::ScalarTimeData& minimumreactiontime(const DynamicStabilizationEngineConvergenceData* msg);
  static const ::pulse::cdm::bind::ScalarTimeData& maximumallowedstabilizationtime(const DynamicStabilizationEngineConvergenceData* msg);
};

const ::pulse::cdm::bind::ScalarTimeData&
DynamicStabilizationEngineConvergenceData::_Internal::convergencetime(const DynamicStabilizationEngineConvergenceData* msg) {
  return *msg->convergencetime_;
}
const ::pulse::cdm::bind::ScalarTimeData&
DynamicStabilizationEngineConvergenceData::_Internal::minimumreactiontime(const DynamicStabilizationEngineConvergenceData* msg) {
  return *msg->minimumreactiontime_;
}
const ::pulse::cdm::bind::ScalarTimeData&
DynamicStabilizationEngineConvergenceData::_Internal::maximumallowedstabilizationtime(const DynamicStabilizationEngineConvergenceData* msg) {
  return *msg->maximumallowedstabilizationtime_;
}
void DynamicStabilizationEngineConvergenceData::clear_convergencetime() {
  if (GetArenaNoVirtual() == nullptr && convergencetime_ != nullptr) {
    delete convergencetime_;
  }
  convergencetime_ = nullptr;
}
void DynamicStabilizationEngineConvergenceData::clear_minimumreactiontime() {
  if (GetArenaNoVirtual() == nullptr && minimumreactiontime_ != nullptr) {
    delete minimumreactiontime_;
  }
  minimumreactiontime_ = nullptr;
}
void DynamicStabilizationEngineConvergenceData::clear_maximumallowedstabilizationtime() {
  if (GetArenaNoVirtual() == nullptr && maximumallowedstabilizationtime_ != nullptr) {
    delete maximumallowedstabilizationtime_;
  }
  maximumallowedstabilizationtime_ = nullptr;
}
DynamicStabilizationEngineConvergenceData::DynamicStabilizationEngineConvergenceData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pulse.cdm.bind.DynamicStabilizationEngineConvergenceData)
}
DynamicStabilizationEngineConvergenceData::DynamicStabilizationEngineConvergenceData(const DynamicStabilizationEngineConvergenceData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      propertyconvergence_(from.propertyconvergence_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_convergencetime()) {
    convergencetime_ = new ::pulse::cdm::bind::ScalarTimeData(*from.convergencetime_);
  } else {
    convergencetime_ = nullptr;
  }
  if (from._internal_has_minimumreactiontime()) {
    minimumreactiontime_ = new ::pulse::cdm::bind::ScalarTimeData(*from.minimumreactiontime_);
  } else {
    minimumreactiontime_ = nullptr;
  }
  if (from._internal_has_maximumallowedstabilizationtime()) {
    maximumallowedstabilizationtime_ = new ::pulse::cdm::bind::ScalarTimeData(*from.maximumallowedstabilizationtime_);
  } else {
    maximumallowedstabilizationtime_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.DynamicStabilizationEngineConvergenceData)
}

void DynamicStabilizationEngineConvergenceData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DynamicStabilizationEngineConvergenceData_pulse_2fcdm_2fbind_2fEngine_2eproto.base);
  ::memset(&convergencetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maximumallowedstabilizationtime_) -
      reinterpret_cast<char*>(&convergencetime_)) + sizeof(maximumallowedstabilizationtime_));
}

DynamicStabilizationEngineConvergenceData::~DynamicStabilizationEngineConvergenceData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.DynamicStabilizationEngineConvergenceData)
  SharedDtor();
}

void DynamicStabilizationEngineConvergenceData::SharedDtor() {
  if (this != internal_default_instance()) delete convergencetime_;
  if (this != internal_default_instance()) delete minimumreactiontime_;
  if (this != internal_default_instance()) delete maximumallowedstabilizationtime_;
}

void DynamicStabilizationEngineConvergenceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DynamicStabilizationEngineConvergenceData& DynamicStabilizationEngineConvergenceData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DynamicStabilizationEngineConvergenceData_pulse_2fcdm_2fbind_2fEngine_2eproto.base);
  return *internal_default_instance();
}


void DynamicStabilizationEngineConvergenceData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.DynamicStabilizationEngineConvergenceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  propertyconvergence_.Clear();
  if (GetArenaNoVirtual() == nullptr && convergencetime_ != nullptr) {
    delete convergencetime_;
  }
  convergencetime_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && minimumreactiontime_ != nullptr) {
    delete minimumreactiontime_;
  }
  minimumreactiontime_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && maximumallowedstabilizationtime_ != nullptr) {
    delete maximumallowedstabilizationtime_;
  }
  maximumallowedstabilizationtime_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DynamicStabilizationEngineConvergenceData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarTimeData ConvergenceTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_convergencetime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarTimeData MinimumReactionTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_minimumreactiontime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarTimeData MaximumAllowedStabilizationTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_maximumallowedstabilizationtime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pulse.cdm.bind.DynamicStabilizationPropertyConvergenceData PropertyConvergence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_propertyconvergence(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DynamicStabilizationEngineConvergenceData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.DynamicStabilizationEngineConvergenceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarTimeData ConvergenceTime = 1;
  if (this->has_convergencetime()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::convergencetime(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarTimeData MinimumReactionTime = 2;
  if (this->has_minimumreactiontime()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::minimumreactiontime(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarTimeData MaximumAllowedStabilizationTime = 3;
  if (this->has_maximumallowedstabilizationtime()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::maximumallowedstabilizationtime(this), target, stream);
  }

  // repeated .pulse.cdm.bind.DynamicStabilizationPropertyConvergenceData PropertyConvergence = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_propertyconvergence_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(4, this->_internal_propertyconvergence(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.DynamicStabilizationEngineConvergenceData)
  return target;
}

size_t DynamicStabilizationEngineConvergenceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.DynamicStabilizationEngineConvergenceData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pulse.cdm.bind.DynamicStabilizationPropertyConvergenceData PropertyConvergence = 4;
  total_size += 1UL * this->_internal_propertyconvergence_size();
  for (const auto& msg : this->propertyconvergence_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .pulse.cdm.bind.ScalarTimeData ConvergenceTime = 1;
  if (this->has_convergencetime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *convergencetime_);
  }

  // .pulse.cdm.bind.ScalarTimeData MinimumReactionTime = 2;
  if (this->has_minimumreactiontime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *minimumreactiontime_);
  }

  // .pulse.cdm.bind.ScalarTimeData MaximumAllowedStabilizationTime = 3;
  if (this->has_maximumallowedstabilizationtime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *maximumallowedstabilizationtime_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DynamicStabilizationEngineConvergenceData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.DynamicStabilizationEngineConvergenceData)
  GOOGLE_DCHECK_NE(&from, this);
  const DynamicStabilizationEngineConvergenceData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DynamicStabilizationEngineConvergenceData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.DynamicStabilizationEngineConvergenceData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.DynamicStabilizationEngineConvergenceData)
    MergeFrom(*source);
  }
}

void DynamicStabilizationEngineConvergenceData::MergeFrom(const DynamicStabilizationEngineConvergenceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.DynamicStabilizationEngineConvergenceData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  propertyconvergence_.MergeFrom(from.propertyconvergence_);
  if (from.has_convergencetime()) {
    _internal_mutable_convergencetime()->::pulse::cdm::bind::ScalarTimeData::MergeFrom(from._internal_convergencetime());
  }
  if (from.has_minimumreactiontime()) {
    _internal_mutable_minimumreactiontime()->::pulse::cdm::bind::ScalarTimeData::MergeFrom(from._internal_minimumreactiontime());
  }
  if (from.has_maximumallowedstabilizationtime()) {
    _internal_mutable_maximumallowedstabilizationtime()->::pulse::cdm::bind::ScalarTimeData::MergeFrom(from._internal_maximumallowedstabilizationtime());
  }
}

void DynamicStabilizationEngineConvergenceData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.DynamicStabilizationEngineConvergenceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynamicStabilizationEngineConvergenceData::CopyFrom(const DynamicStabilizationEngineConvergenceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.DynamicStabilizationEngineConvergenceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicStabilizationEngineConvergenceData::IsInitialized() const {
  return true;
}

void DynamicStabilizationEngineConvergenceData::InternalSwap(DynamicStabilizationEngineConvergenceData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  propertyconvergence_.InternalSwap(&other->propertyconvergence_);
  swap(convergencetime_, other->convergencetime_);
  swap(minimumreactiontime_, other->minimumreactiontime_);
  swap(maximumallowedstabilizationtime_, other->maximumallowedstabilizationtime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DynamicStabilizationEngineConvergenceData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse::DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse() {}
DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse::DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse::MergeFrom(const DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void DynamicStabilizationData::InitAsDefaultInstance() {
  ::pulse::cdm::bind::_DynamicStabilizationData_default_instance_._instance.get_mutable()->restingconvergence_ = const_cast< ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData*>(
      ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData::internal_default_instance());
  ::pulse::cdm::bind::_DynamicStabilizationData_default_instance_._instance.get_mutable()->feedbackconvergence_ = const_cast< ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData*>(
      ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData::internal_default_instance());
}
class DynamicStabilizationData::_Internal {
 public:
  static const ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData& restingconvergence(const DynamicStabilizationData* msg);
  static const ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData& feedbackconvergence(const DynamicStabilizationData* msg);
};

const ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData&
DynamicStabilizationData::_Internal::restingconvergence(const DynamicStabilizationData* msg) {
  return *msg->restingconvergence_;
}
const ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData&
DynamicStabilizationData::_Internal::feedbackconvergence(const DynamicStabilizationData* msg) {
  return *msg->feedbackconvergence_;
}
DynamicStabilizationData::DynamicStabilizationData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pulse.cdm.bind.DynamicStabilizationData)
}
DynamicStabilizationData::DynamicStabilizationData(const DynamicStabilizationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  conditionconvergence_.MergeFrom(from.conditionconvergence_);
  if (from._internal_has_restingconvergence()) {
    restingconvergence_ = new ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData(*from.restingconvergence_);
  } else {
    restingconvergence_ = nullptr;
  }
  if (from._internal_has_feedbackconvergence()) {
    feedbackconvergence_ = new ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData(*from.feedbackconvergence_);
  } else {
    feedbackconvergence_ = nullptr;
  }
  trackingstabilization_ = from.trackingstabilization_;
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.DynamicStabilizationData)
}

void DynamicStabilizationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DynamicStabilizationData_pulse_2fcdm_2fbind_2fEngine_2eproto.base);
  ::memset(&restingconvergence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trackingstabilization_) -
      reinterpret_cast<char*>(&restingconvergence_)) + sizeof(trackingstabilization_));
}

DynamicStabilizationData::~DynamicStabilizationData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.DynamicStabilizationData)
  SharedDtor();
}

void DynamicStabilizationData::SharedDtor() {
  if (this != internal_default_instance()) delete restingconvergence_;
  if (this != internal_default_instance()) delete feedbackconvergence_;
}

void DynamicStabilizationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DynamicStabilizationData& DynamicStabilizationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DynamicStabilizationData_pulse_2fcdm_2fbind_2fEngine_2eproto.base);
  return *internal_default_instance();
}


void DynamicStabilizationData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.DynamicStabilizationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  conditionconvergence_.Clear();
  if (GetArenaNoVirtual() == nullptr && restingconvergence_ != nullptr) {
    delete restingconvergence_;
  }
  restingconvergence_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && feedbackconvergence_ != nullptr) {
    delete feedbackconvergence_;
  }
  feedbackconvergence_ = nullptr;
  trackingstabilization_ = 0;
  _internal_metadata_.Clear();
}

const char* DynamicStabilizationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.eSwitch TrackingStabilization = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_trackingstabilization(static_cast<::pulse::cdm::bind::eSwitch>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.DynamicStabilizationEngineConvergenceData RestingConvergence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_restingconvergence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.DynamicStabilizationEngineConvergenceData FeedbackConvergence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_feedbackconvergence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .pulse.cdm.bind.DynamicStabilizationEngineConvergenceData> ConditionConvergence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&conditionconvergence_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DynamicStabilizationData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.DynamicStabilizationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.eSwitch TrackingStabilization = 1;
  if (this->trackingstabilization() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_trackingstabilization(), target);
  }

  // .pulse.cdm.bind.DynamicStabilizationEngineConvergenceData RestingConvergence = 2;
  if (this->has_restingconvergence()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::restingconvergence(this), target, stream);
  }

  // .pulse.cdm.bind.DynamicStabilizationEngineConvergenceData FeedbackConvergence = 3;
  if (this->has_feedbackconvergence()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::feedbackconvergence(this), target, stream);
  }

  // map<string, .pulse.cdm.bind.DynamicStabilizationEngineConvergenceData> ConditionConvergence = 4;
  if (!this->_internal_conditionconvergence().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "pulse.cdm.bind.DynamicStabilizationData.ConditionConvergenceEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_conditionconvergence().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_conditionconvergence().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData >::const_iterator
          it = this->_internal_conditionconvergence().begin();
          it != this->_internal_conditionconvergence().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData >::const_iterator
          it = this->_internal_conditionconvergence().begin();
          it != this->_internal_conditionconvergence().end(); ++it) {
        target = DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.DynamicStabilizationData)
  return target;
}

size_t DynamicStabilizationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.DynamicStabilizationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .pulse.cdm.bind.DynamicStabilizationEngineConvergenceData> ConditionConvergence = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_conditionconvergence_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData >::const_iterator
      it = this->_internal_conditionconvergence().begin();
      it != this->_internal_conditionconvergence().end(); ++it) {
    total_size += DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .pulse.cdm.bind.DynamicStabilizationEngineConvergenceData RestingConvergence = 2;
  if (this->has_restingconvergence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *restingconvergence_);
  }

  // .pulse.cdm.bind.DynamicStabilizationEngineConvergenceData FeedbackConvergence = 3;
  if (this->has_feedbackconvergence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *feedbackconvergence_);
  }

  // .pulse.cdm.bind.eSwitch TrackingStabilization = 1;
  if (this->trackingstabilization() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_trackingstabilization());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DynamicStabilizationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.DynamicStabilizationData)
  GOOGLE_DCHECK_NE(&from, this);
  const DynamicStabilizationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DynamicStabilizationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.DynamicStabilizationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.DynamicStabilizationData)
    MergeFrom(*source);
  }
}

void DynamicStabilizationData::MergeFrom(const DynamicStabilizationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.DynamicStabilizationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  conditionconvergence_.MergeFrom(from.conditionconvergence_);
  if (from.has_restingconvergence()) {
    _internal_mutable_restingconvergence()->::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData::MergeFrom(from._internal_restingconvergence());
  }
  if (from.has_feedbackconvergence()) {
    _internal_mutable_feedbackconvergence()->::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData::MergeFrom(from._internal_feedbackconvergence());
  }
  if (from.trackingstabilization() != 0) {
    _internal_set_trackingstabilization(from._internal_trackingstabilization());
  }
}

void DynamicStabilizationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.DynamicStabilizationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynamicStabilizationData::CopyFrom(const DynamicStabilizationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.DynamicStabilizationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicStabilizationData::IsInitialized() const {
  return true;
}

void DynamicStabilizationData::InternalSwap(DynamicStabilizationData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  conditionconvergence_.Swap(&other->conditionconvergence_);
  swap(restingconvergence_, other->restingconvergence_);
  swap(feedbackconvergence_, other->feedbackconvergence_);
  swap(trackingstabilization_, other->trackingstabilization_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DynamicStabilizationData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogMessagesData::InitAsDefaultInstance() {
}
class LogMessagesData::_Internal {
 public:
};

LogMessagesData::LogMessagesData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pulse.cdm.bind.LogMessagesData)
}
LogMessagesData::LogMessagesData(const LogMessagesData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      debugmessages_(from.debugmessages_),
      infogmessages_(from.infogmessages_),
      warningmessages_(from.warningmessages_),
      errormessages_(from.errormessages_),
      fatalmessages_(from.fatalmessages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.LogMessagesData)
}

void LogMessagesData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogMessagesData_pulse_2fcdm_2fbind_2fEngine_2eproto.base);
}

LogMessagesData::~LogMessagesData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.LogMessagesData)
  SharedDtor();
}

void LogMessagesData::SharedDtor() {
}

void LogMessagesData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogMessagesData& LogMessagesData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogMessagesData_pulse_2fcdm_2fbind_2fEngine_2eproto.base);
  return *internal_default_instance();
}


void LogMessagesData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.LogMessagesData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  debugmessages_.Clear();
  infogmessages_.Clear();
  warningmessages_.Clear();
  errormessages_.Clear();
  fatalmessages_.Clear();
  _internal_metadata_.Clear();
}

const char* LogMessagesData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string DebugMessages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_debugmessages(), ptr, ctx, "pulse.cdm.bind.LogMessagesData.DebugMessages");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string InfogMessages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_infogmessages(), ptr, ctx, "pulse.cdm.bind.LogMessagesData.InfogMessages");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string WarningMessages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_warningmessages(), ptr, ctx, "pulse.cdm.bind.LogMessagesData.WarningMessages");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string ErrorMessages = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_errormessages(), ptr, ctx, "pulse.cdm.bind.LogMessagesData.ErrorMessages");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string FatalMessages = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_fatalmessages(), ptr, ctx, "pulse.cdm.bind.LogMessagesData.FatalMessages");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogMessagesData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.LogMessagesData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string DebugMessages = 1;
  for (int i = 0, n = this->_internal_debugmessages_size(); i < n; i++) {
    const auto& s = this->_internal_debugmessages(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.LogMessagesData.DebugMessages");
    target = stream->WriteString(1, s, target);
  }

  // repeated string InfogMessages = 2;
  for (int i = 0, n = this->_internal_infogmessages_size(); i < n; i++) {
    const auto& s = this->_internal_infogmessages(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.LogMessagesData.InfogMessages");
    target = stream->WriteString(2, s, target);
  }

  // repeated string WarningMessages = 3;
  for (int i = 0, n = this->_internal_warningmessages_size(); i < n; i++) {
    const auto& s = this->_internal_warningmessages(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.LogMessagesData.WarningMessages");
    target = stream->WriteString(3, s, target);
  }

  // repeated string ErrorMessages = 4;
  for (int i = 0, n = this->_internal_errormessages_size(); i < n; i++) {
    const auto& s = this->_internal_errormessages(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.LogMessagesData.ErrorMessages");
    target = stream->WriteString(4, s, target);
  }

  // repeated string FatalMessages = 5;
  for (int i = 0, n = this->_internal_fatalmessages_size(); i < n; i++) {
    const auto& s = this->_internal_fatalmessages(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.LogMessagesData.FatalMessages");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.LogMessagesData)
  return target;
}

size_t LogMessagesData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.LogMessagesData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string DebugMessages = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(debugmessages_.size());
  for (int i = 0, n = debugmessages_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      debugmessages_.Get(i));
  }

  // repeated string InfogMessages = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(infogmessages_.size());
  for (int i = 0, n = infogmessages_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      infogmessages_.Get(i));
  }

  // repeated string WarningMessages = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(warningmessages_.size());
  for (int i = 0, n = warningmessages_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      warningmessages_.Get(i));
  }

  // repeated string ErrorMessages = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(errormessages_.size());
  for (int i = 0, n = errormessages_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      errormessages_.Get(i));
  }

  // repeated string FatalMessages = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(fatalmessages_.size());
  for (int i = 0, n = fatalmessages_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      fatalmessages_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogMessagesData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.LogMessagesData)
  GOOGLE_DCHECK_NE(&from, this);
  const LogMessagesData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogMessagesData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.LogMessagesData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.LogMessagesData)
    MergeFrom(*source);
  }
}

void LogMessagesData::MergeFrom(const LogMessagesData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.LogMessagesData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  debugmessages_.MergeFrom(from.debugmessages_);
  infogmessages_.MergeFrom(from.infogmessages_);
  warningmessages_.MergeFrom(from.warningmessages_);
  errormessages_.MergeFrom(from.errormessages_);
  fatalmessages_.MergeFrom(from.fatalmessages_);
}

void LogMessagesData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.LogMessagesData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogMessagesData::CopyFrom(const LogMessagesData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.LogMessagesData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogMessagesData::IsInitialized() const {
  return true;
}

void LogMessagesData::InternalSwap(LogMessagesData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  debugmessages_.InternalSwap(&other->debugmessages_);
  infogmessages_.InternalSwap(&other->infogmessages_);
  warningmessages_.InternalSwap(&other->warningmessages_);
  errormessages_.InternalSwap(&other->errormessages_);
  fatalmessages_.InternalSwap(&other->fatalmessages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogMessagesData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::DecimalFormatData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::DecimalFormatData >(Arena* arena) {
  return Arena::CreateInternal< ::pulse::cdm::bind::DecimalFormatData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::DataRequestData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::DataRequestData >(Arena* arena) {
  return Arena::CreateInternal< ::pulse::cdm::bind::DataRequestData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::DataRequestManagerData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::DataRequestManagerData >(Arena* arena) {
  return Arena::CreateInternal< ::pulse::cdm::bind::DataRequestManagerData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::AnyConditionData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::AnyConditionData >(Arena* arena) {
  return Arena::CreateInternal< ::pulse::cdm::bind::AnyConditionData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ConditionListData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ConditionListData >(Arena* arena) {
  return Arena::CreateInternal< ::pulse::cdm::bind::ConditionListData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::AnyActionData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::AnyActionData >(Arena* arena) {
  return Arena::CreateInternal< ::pulse::cdm::bind::AnyActionData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ActionListData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ActionListData >(Arena* arena) {
  return Arena::CreateInternal< ::pulse::cdm::bind::ActionListData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::EngineInitializationData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::EngineInitializationData >(Arena* arena) {
  return Arena::CreateInternal< ::pulse::cdm::bind::EngineInitializationData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::PatientConfigurationData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::PatientConfigurationData >(Arena* arena) {
  return Arena::CreateInternal< ::pulse::cdm::bind::PatientConfigurationData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::AutoSerializationData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::AutoSerializationData >(Arena* arena) {
  return Arena::CreateInternal< ::pulse::cdm::bind::AutoSerializationData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::TimedStabilizationData_ConditionStabilizationEntry_DoNotUse* Arena::CreateMaybeMessage< ::pulse::cdm::bind::TimedStabilizationData_ConditionStabilizationEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::pulse::cdm::bind::TimedStabilizationData_ConditionStabilizationEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::TimedStabilizationData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::TimedStabilizationData >(Arena* arena) {
  return Arena::CreateInternal< ::pulse::cdm::bind::TimedStabilizationData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::DynamicStabilizationPropertyConvergenceData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::DynamicStabilizationPropertyConvergenceData >(Arena* arena) {
  return Arena::CreateInternal< ::pulse::cdm::bind::DynamicStabilizationPropertyConvergenceData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData >(Arena* arena) {
  return Arena::CreateInternal< ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse* Arena::CreateMaybeMessage< ::pulse::cdm::bind::DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::pulse::cdm::bind::DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::DynamicStabilizationData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::DynamicStabilizationData >(Arena* arena) {
  return Arena::CreateInternal< ::pulse::cdm::bind::DynamicStabilizationData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::LogMessagesData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::LogMessagesData >(Arena* arena) {
  return Arena::CreateInternal< ::pulse::cdm::bind::LogMessagesData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
