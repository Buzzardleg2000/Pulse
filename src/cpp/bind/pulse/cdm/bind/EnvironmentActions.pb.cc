// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/EnvironmentActions.proto

#include "pulse/cdm/bind/EnvironmentActions.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActionData_pulse_2fcdm_2fbind_2fActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEnvironment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ActiveConditioningData_pulse_2fcdm_2fbind_2fEnvironment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEnvironment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AppliedTemperatureData_pulse_2fcdm_2fbind_2fEnvironment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChangeEnvironmentalConditionsData_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EnvironmentActionData_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEnvironment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_EnvironmentalConditionsData_pulse_2fcdm_2fbind_2fEnvironment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ThermalApplicationData_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class AnyEnvironmentActionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnyEnvironmentActionData> _instance;
  const ::pulse::cdm::bind::ChangeEnvironmentalConditionsData* changeenvironmentalconditions_;
  const ::pulse::cdm::bind::ThermalApplicationData* thermalapplication_;
} _AnyEnvironmentActionData_default_instance_;
class EnvironmentActionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnvironmentActionData> _instance;
} _EnvironmentActionData_default_instance_;
class ChangeEnvironmentalConditionsDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChangeEnvironmentalConditionsData> _instance;
  const ::pulse::cdm::bind::EnvironmentalConditionsData* environmentalconditions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr environmentalconditionsfile_;
} _ChangeEnvironmentalConditionsData_default_instance_;
class ThermalApplicationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ThermalApplicationData> _instance;
} _ThermalApplicationData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
static void InitDefaultsscc_info_AnyEnvironmentActionData_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_AnyEnvironmentActionData_default_instance_;
    new (ptr) ::pulse::cdm::bind::AnyEnvironmentActionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pulse::cdm::bind::AnyEnvironmentActionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnyEnvironmentActionData_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AnyEnvironmentActionData_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto}, {
      &scc_info_ChangeEnvironmentalConditionsData_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto.base,
      &scc_info_ThermalApplicationData_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto.base,}};

static void InitDefaultsscc_info_ChangeEnvironmentalConditionsData_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ChangeEnvironmentalConditionsData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ChangeEnvironmentalConditionsData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pulse::cdm::bind::ChangeEnvironmentalConditionsData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChangeEnvironmentalConditionsData_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ChangeEnvironmentalConditionsData_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto}, {
      &scc_info_EnvironmentActionData_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto.base,
      &scc_info_EnvironmentalConditionsData_pulse_2fcdm_2fbind_2fEnvironment_2eproto.base,}};

static void InitDefaultsscc_info_EnvironmentActionData_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_EnvironmentActionData_default_instance_;
    new (ptr) ::pulse::cdm::bind::EnvironmentActionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pulse::cdm::bind::EnvironmentActionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EnvironmentActionData_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EnvironmentActionData_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto}, {
      &scc_info_ActionData_pulse_2fcdm_2fbind_2fActions_2eproto.base,}};

static void InitDefaultsscc_info_ThermalApplicationData_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ThermalApplicationData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ThermalApplicationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pulse::cdm::bind::ThermalApplicationData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ThermalApplicationData_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ThermalApplicationData_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto}, {
      &scc_info_EnvironmentActionData_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto.base,
      &scc_info_ActiveConditioningData_pulse_2fcdm_2fbind_2fEnvironment_2eproto.base,
      &scc_info_AppliedTemperatureData_pulse_2fcdm_2fbind_2fEnvironment_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnyEnvironmentActionData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnyEnvironmentActionData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::pulse::cdm::bind::AnyEnvironmentActionDataDefaultTypeInternal, changeenvironmentalconditions_),
  offsetof(::pulse::cdm::bind::AnyEnvironmentActionDataDefaultTypeInternal, thermalapplication_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnyEnvironmentActionData, Action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EnvironmentActionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EnvironmentActionData, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ChangeEnvironmentalConditionsData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ChangeEnvironmentalConditionsData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ChangeEnvironmentalConditionsData, environmentaction_),
  offsetof(::pulse::cdm::bind::ChangeEnvironmentalConditionsDataDefaultTypeInternal, environmentalconditions_),
  offsetof(::pulse::cdm::bind::ChangeEnvironmentalConditionsDataDefaultTypeInternal, environmentalconditionsfile_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ChangeEnvironmentalConditionsData, Option_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ThermalApplicationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ThermalApplicationData, environmentaction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ThermalApplicationData, activeheating_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ThermalApplicationData, activecooling_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ThermalApplicationData, appliedtemperature_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ThermalApplicationData, appendtoprevious_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pulse::cdm::bind::AnyEnvironmentActionData)},
  { 8, -1, sizeof(::pulse::cdm::bind::EnvironmentActionData)},
  { 14, -1, sizeof(::pulse::cdm::bind::ChangeEnvironmentalConditionsData)},
  { 23, -1, sizeof(::pulse::cdm::bind::ThermalApplicationData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_AnyEnvironmentActionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_EnvironmentActionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ChangeEnvironmentalConditionsData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ThermalApplicationData_default_instance_),
};

const char descriptor_table_protodef_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'pulse/cdm/bind/EnvironmentActions.prot"
  "o\022\016pulse.cdm.bind\032 pulse/cdm/bind/Enviro"
  "nment.proto\032\034pulse/cdm/bind/Actions.prot"
  "o\"\306\001\n\030AnyEnvironmentActionData\022Z\n\035Change"
  "EnvironmentalConditions\030\001 \001(\01321.pulse.cd"
  "m.bind.ChangeEnvironmentalConditionsData"
  "H\000\022D\n\022ThermalApplication\030\002 \001(\0132&.pulse.c"
  "dm.bind.ThermalApplicationDataH\000B\010\n\006Acti"
  "on\"C\n\025EnvironmentActionData\022*\n\006Action\030\001 "
  "\001(\0132\032.pulse.cdm.bind.ActionData\"\346\001\n!Chan"
  "geEnvironmentalConditionsData\022@\n\021Environ"
  "mentAction\030\001 \001(\0132%.pulse.cdm.bind.Enviro"
  "nmentActionData\022N\n\027EnvironmentalConditio"
  "ns\030\002 \001(\0132+.pulse.cdm.bind.EnvironmentalC"
  "onditionsDataH\000\022%\n\033EnvironmentalConditio"
  "nsFile\030\003 \001(\tH\000B\010\n\006Option\"\266\002\n\026ThermalAppl"
  "icationData\022@\n\021EnvironmentAction\030\001 \001(\0132%"
  ".pulse.cdm.bind.EnvironmentActionData\022=\n"
  "\rActiveHeating\030\002 \001(\0132&.pulse.cdm.bind.Ac"
  "tiveConditioningData\022=\n\rActiveCooling\030\003 "
  "\001(\0132&.pulse.cdm.bind.ActiveConditioningD"
  "ata\022B\n\022AppliedTemperature\030\004 \001(\0132&.pulse."
  "cdm.bind.AppliedTemperatureData\022\030\n\020Appen"
  "dToPrevious\030\005 \001(\010B#\n\016pulse.cdm.bindH\001\252\002\016"
  "pulse.cdm.bindb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto_deps[2] = {
  &::descriptor_table_pulse_2fcdm_2fbind_2fActions_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fEnvironment_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto_sccs[4] = {
  &scc_info_AnyEnvironmentActionData_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto.base,
  &scc_info_ChangeEnvironmentalConditionsData_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto.base,
  &scc_info_EnvironmentActionData_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto.base,
  &scc_info_ThermalApplicationData_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto_once;
static bool descriptor_table_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto = {
  &descriptor_table_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto_initialized, descriptor_table_protodef_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto, "pulse/cdm/bind/EnvironmentActions.proto", 982,
  &descriptor_table_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto_once, descriptor_table_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto_sccs, descriptor_table_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto_deps, 4, 2,
  schemas, file_default_instances, TableStruct_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto::offsets,
  file_level_metadata_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto, 4, file_level_enum_descriptors_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto, file_level_service_descriptors_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto), true);
namespace pulse {
namespace cdm {
namespace bind {

// ===================================================================

void AnyEnvironmentActionData::InitAsDefaultInstance() {
  ::pulse::cdm::bind::_AnyEnvironmentActionData_default_instance_.changeenvironmentalconditions_ = const_cast< ::pulse::cdm::bind::ChangeEnvironmentalConditionsData*>(
      ::pulse::cdm::bind::ChangeEnvironmentalConditionsData::internal_default_instance());
  ::pulse::cdm::bind::_AnyEnvironmentActionData_default_instance_.thermalapplication_ = const_cast< ::pulse::cdm::bind::ThermalApplicationData*>(
      ::pulse::cdm::bind::ThermalApplicationData::internal_default_instance());
}
class AnyEnvironmentActionData::_Internal {
 public:
  static const ::pulse::cdm::bind::ChangeEnvironmentalConditionsData& changeenvironmentalconditions(const AnyEnvironmentActionData* msg);
  static const ::pulse::cdm::bind::ThermalApplicationData& thermalapplication(const AnyEnvironmentActionData* msg);
};

const ::pulse::cdm::bind::ChangeEnvironmentalConditionsData&
AnyEnvironmentActionData::_Internal::changeenvironmentalconditions(const AnyEnvironmentActionData* msg) {
  return *msg->Action_.changeenvironmentalconditions_;
}
const ::pulse::cdm::bind::ThermalApplicationData&
AnyEnvironmentActionData::_Internal::thermalapplication(const AnyEnvironmentActionData* msg) {
  return *msg->Action_.thermalapplication_;
}
void AnyEnvironmentActionData::set_allocated_changeenvironmentalconditions(::pulse::cdm::bind::ChangeEnvironmentalConditionsData* changeenvironmentalconditions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Action();
  if (changeenvironmentalconditions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      changeenvironmentalconditions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, changeenvironmentalconditions, submessage_arena);
    }
    set_has_changeenvironmentalconditions();
    Action_.changeenvironmentalconditions_ = changeenvironmentalconditions;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyEnvironmentActionData.ChangeEnvironmentalConditions)
}
void AnyEnvironmentActionData::set_allocated_thermalapplication(::pulse::cdm::bind::ThermalApplicationData* thermalapplication) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Action();
  if (thermalapplication) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      thermalapplication = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thermalapplication, submessage_arena);
    }
    set_has_thermalapplication();
    Action_.thermalapplication_ = thermalapplication;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyEnvironmentActionData.ThermalApplication)
}
AnyEnvironmentActionData::AnyEnvironmentActionData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pulse.cdm.bind.AnyEnvironmentActionData)
}
AnyEnvironmentActionData::AnyEnvironmentActionData(const AnyEnvironmentActionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_Action();
  switch (from.Action_case()) {
    case kChangeEnvironmentalConditions: {
      _internal_mutable_changeenvironmentalconditions()->::pulse::cdm::bind::ChangeEnvironmentalConditionsData::MergeFrom(from._internal_changeenvironmentalconditions());
      break;
    }
    case kThermalApplication: {
      _internal_mutable_thermalapplication()->::pulse::cdm::bind::ThermalApplicationData::MergeFrom(from._internal_thermalapplication());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.AnyEnvironmentActionData)
}

void AnyEnvironmentActionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnyEnvironmentActionData_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto.base);
  clear_has_Action();
}

AnyEnvironmentActionData::~AnyEnvironmentActionData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.AnyEnvironmentActionData)
  SharedDtor();
}

void AnyEnvironmentActionData::SharedDtor() {
  if (has_Action()) {
    clear_Action();
  }
}

void AnyEnvironmentActionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnyEnvironmentActionData& AnyEnvironmentActionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnyEnvironmentActionData_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto.base);
  return *internal_default_instance();
}


void AnyEnvironmentActionData::clear_Action() {
// @@protoc_insertion_point(one_of_clear_start:pulse.cdm.bind.AnyEnvironmentActionData)
  switch (Action_case()) {
    case kChangeEnvironmentalConditions: {
      delete Action_.changeenvironmentalconditions_;
      break;
    }
    case kThermalApplication: {
      delete Action_.thermalapplication_;
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_NOT_SET;
}


void AnyEnvironmentActionData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.AnyEnvironmentActionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_Action();
  _internal_metadata_.Clear();
}

const char* AnyEnvironmentActionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ChangeEnvironmentalConditionsData ChangeEnvironmentalConditions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_changeenvironmentalconditions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ThermalApplicationData ThermalApplication = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_thermalapplication(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnyEnvironmentActionData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.AnyEnvironmentActionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ChangeEnvironmentalConditionsData ChangeEnvironmentalConditions = 1;
  if (_internal_has_changeenvironmentalconditions()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::changeenvironmentalconditions(this), target, stream);
  }

  // .pulse.cdm.bind.ThermalApplicationData ThermalApplication = 2;
  if (_internal_has_thermalapplication()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::thermalapplication(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.AnyEnvironmentActionData)
  return target;
}

size_t AnyEnvironmentActionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.AnyEnvironmentActionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (Action_case()) {
    // .pulse.cdm.bind.ChangeEnvironmentalConditionsData ChangeEnvironmentalConditions = 1;
    case kChangeEnvironmentalConditions: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.changeenvironmentalconditions_);
      break;
    }
    // .pulse.cdm.bind.ThermalApplicationData ThermalApplication = 2;
    case kThermalApplication: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.thermalapplication_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnyEnvironmentActionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.AnyEnvironmentActionData)
  GOOGLE_DCHECK_NE(&from, this);
  const AnyEnvironmentActionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnyEnvironmentActionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.AnyEnvironmentActionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.AnyEnvironmentActionData)
    MergeFrom(*source);
  }
}

void AnyEnvironmentActionData::MergeFrom(const AnyEnvironmentActionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.AnyEnvironmentActionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Action_case()) {
    case kChangeEnvironmentalConditions: {
      _internal_mutable_changeenvironmentalconditions()->::pulse::cdm::bind::ChangeEnvironmentalConditionsData::MergeFrom(from._internal_changeenvironmentalconditions());
      break;
    }
    case kThermalApplication: {
      _internal_mutable_thermalapplication()->::pulse::cdm::bind::ThermalApplicationData::MergeFrom(from._internal_thermalapplication());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
}

void AnyEnvironmentActionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.AnyEnvironmentActionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnyEnvironmentActionData::CopyFrom(const AnyEnvironmentActionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.AnyEnvironmentActionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnyEnvironmentActionData::IsInitialized() const {
  return true;
}

void AnyEnvironmentActionData::InternalSwap(AnyEnvironmentActionData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(Action_, other->Action_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnyEnvironmentActionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnvironmentActionData::InitAsDefaultInstance() {
  ::pulse::cdm::bind::_EnvironmentActionData_default_instance_._instance.get_mutable()->action_ = const_cast< ::pulse::cdm::bind::ActionData*>(
      ::pulse::cdm::bind::ActionData::internal_default_instance());
}
class EnvironmentActionData::_Internal {
 public:
  static const ::pulse::cdm::bind::ActionData& action(const EnvironmentActionData* msg);
};

const ::pulse::cdm::bind::ActionData&
EnvironmentActionData::_Internal::action(const EnvironmentActionData* msg) {
  return *msg->action_;
}
void EnvironmentActionData::clear_action() {
  if (GetArenaNoVirtual() == nullptr && action_ != nullptr) {
    delete action_;
  }
  action_ = nullptr;
}
EnvironmentActionData::EnvironmentActionData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pulse.cdm.bind.EnvironmentActionData)
}
EnvironmentActionData::EnvironmentActionData(const EnvironmentActionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_action()) {
    action_ = new ::pulse::cdm::bind::ActionData(*from.action_);
  } else {
    action_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.EnvironmentActionData)
}

void EnvironmentActionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnvironmentActionData_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto.base);
  action_ = nullptr;
}

EnvironmentActionData::~EnvironmentActionData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.EnvironmentActionData)
  SharedDtor();
}

void EnvironmentActionData::SharedDtor() {
  if (this != internal_default_instance()) delete action_;
}

void EnvironmentActionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnvironmentActionData& EnvironmentActionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnvironmentActionData_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto.base);
  return *internal_default_instance();
}


void EnvironmentActionData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.EnvironmentActionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && action_ != nullptr) {
    delete action_;
  }
  action_ = nullptr;
  _internal_metadata_.Clear();
}

const char* EnvironmentActionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ActionData Action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnvironmentActionData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.EnvironmentActionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ActionData Action = 1;
  if (this->has_action()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::action(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.EnvironmentActionData)
  return target;
}

size_t EnvironmentActionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.EnvironmentActionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ActionData Action = 1;
  if (this->has_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnvironmentActionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.EnvironmentActionData)
  GOOGLE_DCHECK_NE(&from, this);
  const EnvironmentActionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnvironmentActionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.EnvironmentActionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.EnvironmentActionData)
    MergeFrom(*source);
  }
}

void EnvironmentActionData::MergeFrom(const EnvironmentActionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.EnvironmentActionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_action()) {
    _internal_mutable_action()->::pulse::cdm::bind::ActionData::MergeFrom(from._internal_action());
  }
}

void EnvironmentActionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.EnvironmentActionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvironmentActionData::CopyFrom(const EnvironmentActionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.EnvironmentActionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvironmentActionData::IsInitialized() const {
  return true;
}

void EnvironmentActionData::InternalSwap(EnvironmentActionData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(action_, other->action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnvironmentActionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChangeEnvironmentalConditionsData::InitAsDefaultInstance() {
  ::pulse::cdm::bind::_ChangeEnvironmentalConditionsData_default_instance_._instance.get_mutable()->environmentaction_ = const_cast< ::pulse::cdm::bind::EnvironmentActionData*>(
      ::pulse::cdm::bind::EnvironmentActionData::internal_default_instance());
  ::pulse::cdm::bind::_ChangeEnvironmentalConditionsData_default_instance_.environmentalconditions_ = const_cast< ::pulse::cdm::bind::EnvironmentalConditionsData*>(
      ::pulse::cdm::bind::EnvironmentalConditionsData::internal_default_instance());
  ::pulse::cdm::bind::_ChangeEnvironmentalConditionsData_default_instance_.environmentalconditionsfile_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class ChangeEnvironmentalConditionsData::_Internal {
 public:
  static const ::pulse::cdm::bind::EnvironmentActionData& environmentaction(const ChangeEnvironmentalConditionsData* msg);
  static const ::pulse::cdm::bind::EnvironmentalConditionsData& environmentalconditions(const ChangeEnvironmentalConditionsData* msg);
};

const ::pulse::cdm::bind::EnvironmentActionData&
ChangeEnvironmentalConditionsData::_Internal::environmentaction(const ChangeEnvironmentalConditionsData* msg) {
  return *msg->environmentaction_;
}
const ::pulse::cdm::bind::EnvironmentalConditionsData&
ChangeEnvironmentalConditionsData::_Internal::environmentalconditions(const ChangeEnvironmentalConditionsData* msg) {
  return *msg->Option_.environmentalconditions_;
}
void ChangeEnvironmentalConditionsData::set_allocated_environmentalconditions(::pulse::cdm::bind::EnvironmentalConditionsData* environmentalconditions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Option();
  if (environmentalconditions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      environmentalconditions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, environmentalconditions, submessage_arena);
    }
    set_has_environmentalconditions();
    Option_.environmentalconditions_ = environmentalconditions;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ChangeEnvironmentalConditionsData.EnvironmentalConditions)
}
void ChangeEnvironmentalConditionsData::clear_environmentalconditions() {
  if (_internal_has_environmentalconditions()) {
    delete Option_.environmentalconditions_;
    clear_has_Option();
  }
}
ChangeEnvironmentalConditionsData::ChangeEnvironmentalConditionsData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pulse.cdm.bind.ChangeEnvironmentalConditionsData)
}
ChangeEnvironmentalConditionsData::ChangeEnvironmentalConditionsData(const ChangeEnvironmentalConditionsData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_environmentaction()) {
    environmentaction_ = new ::pulse::cdm::bind::EnvironmentActionData(*from.environmentaction_);
  } else {
    environmentaction_ = nullptr;
  }
  clear_has_Option();
  switch (from.Option_case()) {
    case kEnvironmentalConditions: {
      _internal_mutable_environmentalconditions()->::pulse::cdm::bind::EnvironmentalConditionsData::MergeFrom(from._internal_environmentalconditions());
      break;
    }
    case kEnvironmentalConditionsFile: {
      _internal_set_environmentalconditionsfile(from._internal_environmentalconditionsfile());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ChangeEnvironmentalConditionsData)
}

void ChangeEnvironmentalConditionsData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChangeEnvironmentalConditionsData_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto.base);
  environmentaction_ = nullptr;
  clear_has_Option();
}

ChangeEnvironmentalConditionsData::~ChangeEnvironmentalConditionsData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ChangeEnvironmentalConditionsData)
  SharedDtor();
}

void ChangeEnvironmentalConditionsData::SharedDtor() {
  if (this != internal_default_instance()) delete environmentaction_;
  if (has_Option()) {
    clear_Option();
  }
}

void ChangeEnvironmentalConditionsData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChangeEnvironmentalConditionsData& ChangeEnvironmentalConditionsData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChangeEnvironmentalConditionsData_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto.base);
  return *internal_default_instance();
}


void ChangeEnvironmentalConditionsData::clear_Option() {
// @@protoc_insertion_point(one_of_clear_start:pulse.cdm.bind.ChangeEnvironmentalConditionsData)
  switch (Option_case()) {
    case kEnvironmentalConditions: {
      delete Option_.environmentalconditions_;
      break;
    }
    case kEnvironmentalConditionsFile: {
      Option_.environmentalconditionsfile_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPTION_NOT_SET;
}


void ChangeEnvironmentalConditionsData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ChangeEnvironmentalConditionsData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && environmentaction_ != nullptr) {
    delete environmentaction_;
  }
  environmentaction_ = nullptr;
  clear_Option();
  _internal_metadata_.Clear();
}

const char* ChangeEnvironmentalConditionsData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.EnvironmentActionData EnvironmentAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_environmentaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.EnvironmentalConditionsData EnvironmentalConditions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_environmentalconditions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string EnvironmentalConditionsFile = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_environmentalconditionsfile(), ptr, ctx, "pulse.cdm.bind.ChangeEnvironmentalConditionsData.EnvironmentalConditionsFile");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeEnvironmentalConditionsData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ChangeEnvironmentalConditionsData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.EnvironmentActionData EnvironmentAction = 1;
  if (this->has_environmentaction()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::environmentaction(this), target, stream);
  }

  // .pulse.cdm.bind.EnvironmentalConditionsData EnvironmentalConditions = 2;
  if (_internal_has_environmentalconditions()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::environmentalconditions(this), target, stream);
  }

  // string EnvironmentalConditionsFile = 3;
  if (_internal_has_environmentalconditionsfile()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_environmentalconditionsfile().data(), static_cast<int>(this->_internal_environmentalconditionsfile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.ChangeEnvironmentalConditionsData.EnvironmentalConditionsFile");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_environmentalconditionsfile(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ChangeEnvironmentalConditionsData)
  return target;
}

size_t ChangeEnvironmentalConditionsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ChangeEnvironmentalConditionsData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.EnvironmentActionData EnvironmentAction = 1;
  if (this->has_environmentaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *environmentaction_);
  }

  switch (Option_case()) {
    // .pulse.cdm.bind.EnvironmentalConditionsData EnvironmentalConditions = 2;
    case kEnvironmentalConditions: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Option_.environmentalconditions_);
      break;
    }
    // string EnvironmentalConditionsFile = 3;
    case kEnvironmentalConditionsFile: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_environmentalconditionsfile());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeEnvironmentalConditionsData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ChangeEnvironmentalConditionsData)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeEnvironmentalConditionsData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangeEnvironmentalConditionsData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ChangeEnvironmentalConditionsData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ChangeEnvironmentalConditionsData)
    MergeFrom(*source);
  }
}

void ChangeEnvironmentalConditionsData::MergeFrom(const ChangeEnvironmentalConditionsData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ChangeEnvironmentalConditionsData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_environmentaction()) {
    _internal_mutable_environmentaction()->::pulse::cdm::bind::EnvironmentActionData::MergeFrom(from._internal_environmentaction());
  }
  switch (from.Option_case()) {
    case kEnvironmentalConditions: {
      _internal_mutable_environmentalconditions()->::pulse::cdm::bind::EnvironmentalConditionsData::MergeFrom(from._internal_environmentalconditions());
      break;
    }
    case kEnvironmentalConditionsFile: {
      _internal_set_environmentalconditionsfile(from._internal_environmentalconditionsfile());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
}

void ChangeEnvironmentalConditionsData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ChangeEnvironmentalConditionsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeEnvironmentalConditionsData::CopyFrom(const ChangeEnvironmentalConditionsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ChangeEnvironmentalConditionsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeEnvironmentalConditionsData::IsInitialized() const {
  return true;
}

void ChangeEnvironmentalConditionsData::InternalSwap(ChangeEnvironmentalConditionsData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(environmentaction_, other->environmentaction_);
  swap(Option_, other->Option_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeEnvironmentalConditionsData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ThermalApplicationData::InitAsDefaultInstance() {
  ::pulse::cdm::bind::_ThermalApplicationData_default_instance_._instance.get_mutable()->environmentaction_ = const_cast< ::pulse::cdm::bind::EnvironmentActionData*>(
      ::pulse::cdm::bind::EnvironmentActionData::internal_default_instance());
  ::pulse::cdm::bind::_ThermalApplicationData_default_instance_._instance.get_mutable()->activeheating_ = const_cast< ::pulse::cdm::bind::ActiveConditioningData*>(
      ::pulse::cdm::bind::ActiveConditioningData::internal_default_instance());
  ::pulse::cdm::bind::_ThermalApplicationData_default_instance_._instance.get_mutable()->activecooling_ = const_cast< ::pulse::cdm::bind::ActiveConditioningData*>(
      ::pulse::cdm::bind::ActiveConditioningData::internal_default_instance());
  ::pulse::cdm::bind::_ThermalApplicationData_default_instance_._instance.get_mutable()->appliedtemperature_ = const_cast< ::pulse::cdm::bind::AppliedTemperatureData*>(
      ::pulse::cdm::bind::AppliedTemperatureData::internal_default_instance());
}
class ThermalApplicationData::_Internal {
 public:
  static const ::pulse::cdm::bind::EnvironmentActionData& environmentaction(const ThermalApplicationData* msg);
  static const ::pulse::cdm::bind::ActiveConditioningData& activeheating(const ThermalApplicationData* msg);
  static const ::pulse::cdm::bind::ActiveConditioningData& activecooling(const ThermalApplicationData* msg);
  static const ::pulse::cdm::bind::AppliedTemperatureData& appliedtemperature(const ThermalApplicationData* msg);
};

const ::pulse::cdm::bind::EnvironmentActionData&
ThermalApplicationData::_Internal::environmentaction(const ThermalApplicationData* msg) {
  return *msg->environmentaction_;
}
const ::pulse::cdm::bind::ActiveConditioningData&
ThermalApplicationData::_Internal::activeheating(const ThermalApplicationData* msg) {
  return *msg->activeheating_;
}
const ::pulse::cdm::bind::ActiveConditioningData&
ThermalApplicationData::_Internal::activecooling(const ThermalApplicationData* msg) {
  return *msg->activecooling_;
}
const ::pulse::cdm::bind::AppliedTemperatureData&
ThermalApplicationData::_Internal::appliedtemperature(const ThermalApplicationData* msg) {
  return *msg->appliedtemperature_;
}
void ThermalApplicationData::clear_activeheating() {
  if (GetArenaNoVirtual() == nullptr && activeheating_ != nullptr) {
    delete activeheating_;
  }
  activeheating_ = nullptr;
}
void ThermalApplicationData::clear_activecooling() {
  if (GetArenaNoVirtual() == nullptr && activecooling_ != nullptr) {
    delete activecooling_;
  }
  activecooling_ = nullptr;
}
void ThermalApplicationData::clear_appliedtemperature() {
  if (GetArenaNoVirtual() == nullptr && appliedtemperature_ != nullptr) {
    delete appliedtemperature_;
  }
  appliedtemperature_ = nullptr;
}
ThermalApplicationData::ThermalApplicationData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pulse.cdm.bind.ThermalApplicationData)
}
ThermalApplicationData::ThermalApplicationData(const ThermalApplicationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_environmentaction()) {
    environmentaction_ = new ::pulse::cdm::bind::EnvironmentActionData(*from.environmentaction_);
  } else {
    environmentaction_ = nullptr;
  }
  if (from._internal_has_activeheating()) {
    activeheating_ = new ::pulse::cdm::bind::ActiveConditioningData(*from.activeheating_);
  } else {
    activeheating_ = nullptr;
  }
  if (from._internal_has_activecooling()) {
    activecooling_ = new ::pulse::cdm::bind::ActiveConditioningData(*from.activecooling_);
  } else {
    activecooling_ = nullptr;
  }
  if (from._internal_has_appliedtemperature()) {
    appliedtemperature_ = new ::pulse::cdm::bind::AppliedTemperatureData(*from.appliedtemperature_);
  } else {
    appliedtemperature_ = nullptr;
  }
  appendtoprevious_ = from.appendtoprevious_;
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ThermalApplicationData)
}

void ThermalApplicationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ThermalApplicationData_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto.base);
  ::memset(&environmentaction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&appendtoprevious_) -
      reinterpret_cast<char*>(&environmentaction_)) + sizeof(appendtoprevious_));
}

ThermalApplicationData::~ThermalApplicationData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ThermalApplicationData)
  SharedDtor();
}

void ThermalApplicationData::SharedDtor() {
  if (this != internal_default_instance()) delete environmentaction_;
  if (this != internal_default_instance()) delete activeheating_;
  if (this != internal_default_instance()) delete activecooling_;
  if (this != internal_default_instance()) delete appliedtemperature_;
}

void ThermalApplicationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ThermalApplicationData& ThermalApplicationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ThermalApplicationData_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto.base);
  return *internal_default_instance();
}


void ThermalApplicationData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ThermalApplicationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && environmentaction_ != nullptr) {
    delete environmentaction_;
  }
  environmentaction_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && activeheating_ != nullptr) {
    delete activeheating_;
  }
  activeheating_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && activecooling_ != nullptr) {
    delete activecooling_;
  }
  activecooling_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && appliedtemperature_ != nullptr) {
    delete appliedtemperature_;
  }
  appliedtemperature_ = nullptr;
  appendtoprevious_ = false;
  _internal_metadata_.Clear();
}

const char* ThermalApplicationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.EnvironmentActionData EnvironmentAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_environmentaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ActiveConditioningData ActiveHeating = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_activeheating(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ActiveConditioningData ActiveCooling = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_activecooling(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.AppliedTemperatureData AppliedTemperature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_appliedtemperature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool AppendToPrevious = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          appendtoprevious_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ThermalApplicationData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ThermalApplicationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.EnvironmentActionData EnvironmentAction = 1;
  if (this->has_environmentaction()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::environmentaction(this), target, stream);
  }

  // .pulse.cdm.bind.ActiveConditioningData ActiveHeating = 2;
  if (this->has_activeheating()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::activeheating(this), target, stream);
  }

  // .pulse.cdm.bind.ActiveConditioningData ActiveCooling = 3;
  if (this->has_activecooling()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::activecooling(this), target, stream);
  }

  // .pulse.cdm.bind.AppliedTemperatureData AppliedTemperature = 4;
  if (this->has_appliedtemperature()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::appliedtemperature(this), target, stream);
  }

  // bool AppendToPrevious = 5;
  if (this->appendtoprevious() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_appendtoprevious(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ThermalApplicationData)
  return target;
}

size_t ThermalApplicationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ThermalApplicationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.EnvironmentActionData EnvironmentAction = 1;
  if (this->has_environmentaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *environmentaction_);
  }

  // .pulse.cdm.bind.ActiveConditioningData ActiveHeating = 2;
  if (this->has_activeheating()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *activeheating_);
  }

  // .pulse.cdm.bind.ActiveConditioningData ActiveCooling = 3;
  if (this->has_activecooling()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *activecooling_);
  }

  // .pulse.cdm.bind.AppliedTemperatureData AppliedTemperature = 4;
  if (this->has_appliedtemperature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *appliedtemperature_);
  }

  // bool AppendToPrevious = 5;
  if (this->appendtoprevious() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThermalApplicationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ThermalApplicationData)
  GOOGLE_DCHECK_NE(&from, this);
  const ThermalApplicationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ThermalApplicationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ThermalApplicationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ThermalApplicationData)
    MergeFrom(*source);
  }
}

void ThermalApplicationData::MergeFrom(const ThermalApplicationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ThermalApplicationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_environmentaction()) {
    _internal_mutable_environmentaction()->::pulse::cdm::bind::EnvironmentActionData::MergeFrom(from._internal_environmentaction());
  }
  if (from.has_activeheating()) {
    _internal_mutable_activeheating()->::pulse::cdm::bind::ActiveConditioningData::MergeFrom(from._internal_activeheating());
  }
  if (from.has_activecooling()) {
    _internal_mutable_activecooling()->::pulse::cdm::bind::ActiveConditioningData::MergeFrom(from._internal_activecooling());
  }
  if (from.has_appliedtemperature()) {
    _internal_mutable_appliedtemperature()->::pulse::cdm::bind::AppliedTemperatureData::MergeFrom(from._internal_appliedtemperature());
  }
  if (from.appendtoprevious() != 0) {
    _internal_set_appendtoprevious(from._internal_appendtoprevious());
  }
}

void ThermalApplicationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ThermalApplicationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThermalApplicationData::CopyFrom(const ThermalApplicationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ThermalApplicationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThermalApplicationData::IsInitialized() const {
  return true;
}

void ThermalApplicationData::InternalSwap(ThermalApplicationData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(environmentaction_, other->environmentaction_);
  swap(activeheating_, other->activeheating_);
  swap(activecooling_, other->activecooling_);
  swap(appliedtemperature_, other->appliedtemperature_);
  swap(appendtoprevious_, other->appendtoprevious_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ThermalApplicationData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::AnyEnvironmentActionData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::AnyEnvironmentActionData >(Arena* arena) {
  return Arena::CreateInternal< ::pulse::cdm::bind::AnyEnvironmentActionData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::EnvironmentActionData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::EnvironmentActionData >(Arena* arena) {
  return Arena::CreateInternal< ::pulse::cdm::bind::EnvironmentActionData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ChangeEnvironmentalConditionsData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ChangeEnvironmentalConditionsData >(Arena* arena) {
  return Arena::CreateInternal< ::pulse::cdm::bind::ChangeEnvironmentalConditionsData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ThermalApplicationData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ThermalApplicationData >(Arena* arena) {
  return Arena::CreateInternal< ::pulse::cdm::bind::ThermalApplicationData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
