// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/EnvironmentConditions.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "pulse/cdm/bind/Environment.pb.h"
#include "pulse/cdm/bind/Conditions.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class AnyEnvironmentConditionData;
class AnyEnvironmentConditionDataDefaultTypeInternal;
extern AnyEnvironmentConditionDataDefaultTypeInternal _AnyEnvironmentConditionData_default_instance_;
class EnvironmentConditionData;
class EnvironmentConditionDataDefaultTypeInternal;
extern EnvironmentConditionDataDefaultTypeInternal _EnvironmentConditionData_default_instance_;
class InitialEnvironmentalConditionsData;
class InitialEnvironmentalConditionsDataDefaultTypeInternal;
extern InitialEnvironmentalConditionsDataDefaultTypeInternal _InitialEnvironmentalConditionsData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> ::pulse::cdm::bind::AnyEnvironmentConditionData* Arena::CreateMaybeMessage<::pulse::cdm::bind::AnyEnvironmentConditionData>(Arena*);
template<> ::pulse::cdm::bind::EnvironmentConditionData* Arena::CreateMaybeMessage<::pulse::cdm::bind::EnvironmentConditionData>(Arena*);
template<> ::pulse::cdm::bind::InitialEnvironmentalConditionsData* Arena::CreateMaybeMessage<::pulse::cdm::bind::InitialEnvironmentalConditionsData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pulse {
namespace cdm {
namespace bind {

// ===================================================================

class AnyEnvironmentConditionData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.AnyEnvironmentConditionData) */ {
 public:
  AnyEnvironmentConditionData();
  virtual ~AnyEnvironmentConditionData();

  AnyEnvironmentConditionData(const AnyEnvironmentConditionData& from);
  AnyEnvironmentConditionData(AnyEnvironmentConditionData&& from) noexcept
    : AnyEnvironmentConditionData() {
    *this = ::std::move(from);
  }

  inline AnyEnvironmentConditionData& operator=(const AnyEnvironmentConditionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnyEnvironmentConditionData& operator=(AnyEnvironmentConditionData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnyEnvironmentConditionData& default_instance();

  enum ConditionCase {
    kInitialEnvironmentalConditions = 1,
    CONDITION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnyEnvironmentConditionData* internal_default_instance() {
    return reinterpret_cast<const AnyEnvironmentConditionData*>(
               &_AnyEnvironmentConditionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AnyEnvironmentConditionData& a, AnyEnvironmentConditionData& b) {
    a.Swap(&b);
  }
  inline void Swap(AnyEnvironmentConditionData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnyEnvironmentConditionData* New() const final {
    return CreateMaybeMessage<AnyEnvironmentConditionData>(nullptr);
  }

  AnyEnvironmentConditionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnyEnvironmentConditionData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnyEnvironmentConditionData& from);
  void MergeFrom(const AnyEnvironmentConditionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnyEnvironmentConditionData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.AnyEnvironmentConditionData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInitialEnvironmentalConditionsFieldNumber = 1,
  };
  // .pulse.cdm.bind.InitialEnvironmentalConditionsData InitialEnvironmentalConditions = 1;
  bool has_initialenvironmentalconditions() const;
  private:
  bool _internal_has_initialenvironmentalconditions() const;
  public:
  void clear_initialenvironmentalconditions();
  const ::pulse::cdm::bind::InitialEnvironmentalConditionsData& initialenvironmentalconditions() const;
  ::pulse::cdm::bind::InitialEnvironmentalConditionsData* release_initialenvironmentalconditions();
  ::pulse::cdm::bind::InitialEnvironmentalConditionsData* mutable_initialenvironmentalconditions();
  void set_allocated_initialenvironmentalconditions(::pulse::cdm::bind::InitialEnvironmentalConditionsData* initialenvironmentalconditions);
  private:
  const ::pulse::cdm::bind::InitialEnvironmentalConditionsData& _internal_initialenvironmentalconditions() const;
  ::pulse::cdm::bind::InitialEnvironmentalConditionsData* _internal_mutable_initialenvironmentalconditions();
  public:

  void clear_Condition();
  ConditionCase Condition_case() const;
  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.AnyEnvironmentConditionData)
 private:
  class _Internal;
  void set_has_initialenvironmentalconditions();

  inline bool has_Condition() const;
  inline void clear_has_Condition();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union ConditionUnion {
    ConditionUnion() {}
    ::pulse::cdm::bind::InitialEnvironmentalConditionsData* initialenvironmentalconditions_;
  } Condition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto;
};
// -------------------------------------------------------------------

class EnvironmentConditionData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.EnvironmentConditionData) */ {
 public:
  EnvironmentConditionData();
  virtual ~EnvironmentConditionData();

  EnvironmentConditionData(const EnvironmentConditionData& from);
  EnvironmentConditionData(EnvironmentConditionData&& from) noexcept
    : EnvironmentConditionData() {
    *this = ::std::move(from);
  }

  inline EnvironmentConditionData& operator=(const EnvironmentConditionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnvironmentConditionData& operator=(EnvironmentConditionData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnvironmentConditionData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnvironmentConditionData* internal_default_instance() {
    return reinterpret_cast<const EnvironmentConditionData*>(
               &_EnvironmentConditionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EnvironmentConditionData& a, EnvironmentConditionData& b) {
    a.Swap(&b);
  }
  inline void Swap(EnvironmentConditionData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnvironmentConditionData* New() const final {
    return CreateMaybeMessage<EnvironmentConditionData>(nullptr);
  }

  EnvironmentConditionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnvironmentConditionData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnvironmentConditionData& from);
  void MergeFrom(const EnvironmentConditionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnvironmentConditionData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.EnvironmentConditionData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConditionFieldNumber = 1,
  };
  // .pulse.cdm.bind.ConditionData Condition = 1;
  bool has_condition() const;
  private:
  bool _internal_has_condition() const;
  public:
  void clear_condition();
  const ::pulse::cdm::bind::ConditionData& condition() const;
  ::pulse::cdm::bind::ConditionData* release_condition();
  ::pulse::cdm::bind::ConditionData* mutable_condition();
  void set_allocated_condition(::pulse::cdm::bind::ConditionData* condition);
  private:
  const ::pulse::cdm::bind::ConditionData& _internal_condition() const;
  ::pulse::cdm::bind::ConditionData* _internal_mutable_condition();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.EnvironmentConditionData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ConditionData* condition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto;
};
// -------------------------------------------------------------------

class InitialEnvironmentalConditionsData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.InitialEnvironmentalConditionsData) */ {
 public:
  InitialEnvironmentalConditionsData();
  virtual ~InitialEnvironmentalConditionsData();

  InitialEnvironmentalConditionsData(const InitialEnvironmentalConditionsData& from);
  InitialEnvironmentalConditionsData(InitialEnvironmentalConditionsData&& from) noexcept
    : InitialEnvironmentalConditionsData() {
    *this = ::std::move(from);
  }

  inline InitialEnvironmentalConditionsData& operator=(const InitialEnvironmentalConditionsData& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitialEnvironmentalConditionsData& operator=(InitialEnvironmentalConditionsData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InitialEnvironmentalConditionsData& default_instance();

  enum OptionCase {
    kEnvironmentalConditions = 2,
    kEnvironmentalConditionsFile = 3,
    OPTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InitialEnvironmentalConditionsData* internal_default_instance() {
    return reinterpret_cast<const InitialEnvironmentalConditionsData*>(
               &_InitialEnvironmentalConditionsData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InitialEnvironmentalConditionsData& a, InitialEnvironmentalConditionsData& b) {
    a.Swap(&b);
  }
  inline void Swap(InitialEnvironmentalConditionsData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InitialEnvironmentalConditionsData* New() const final {
    return CreateMaybeMessage<InitialEnvironmentalConditionsData>(nullptr);
  }

  InitialEnvironmentalConditionsData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InitialEnvironmentalConditionsData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InitialEnvironmentalConditionsData& from);
  void MergeFrom(const InitialEnvironmentalConditionsData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitialEnvironmentalConditionsData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.InitialEnvironmentalConditionsData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnvironmentConditionFieldNumber = 1,
    kEnvironmentalConditionsFieldNumber = 2,
    kEnvironmentalConditionsFileFieldNumber = 3,
  };
  // .pulse.cdm.bind.EnvironmentConditionData EnvironmentCondition = 1;
  bool has_environmentcondition() const;
  private:
  bool _internal_has_environmentcondition() const;
  public:
  void clear_environmentcondition();
  const ::pulse::cdm::bind::EnvironmentConditionData& environmentcondition() const;
  ::pulse::cdm::bind::EnvironmentConditionData* release_environmentcondition();
  ::pulse::cdm::bind::EnvironmentConditionData* mutable_environmentcondition();
  void set_allocated_environmentcondition(::pulse::cdm::bind::EnvironmentConditionData* environmentcondition);
  private:
  const ::pulse::cdm::bind::EnvironmentConditionData& _internal_environmentcondition() const;
  ::pulse::cdm::bind::EnvironmentConditionData* _internal_mutable_environmentcondition();
  public:

  // .pulse.cdm.bind.EnvironmentalConditionsData EnvironmentalConditions = 2;
  bool has_environmentalconditions() const;
  private:
  bool _internal_has_environmentalconditions() const;
  public:
  void clear_environmentalconditions();
  const ::pulse::cdm::bind::EnvironmentalConditionsData& environmentalconditions() const;
  ::pulse::cdm::bind::EnvironmentalConditionsData* release_environmentalconditions();
  ::pulse::cdm::bind::EnvironmentalConditionsData* mutable_environmentalconditions();
  void set_allocated_environmentalconditions(::pulse::cdm::bind::EnvironmentalConditionsData* environmentalconditions);
  private:
  const ::pulse::cdm::bind::EnvironmentalConditionsData& _internal_environmentalconditions() const;
  ::pulse::cdm::bind::EnvironmentalConditionsData* _internal_mutable_environmentalconditions();
  public:

  // string EnvironmentalConditionsFile = 3;
  private:
  bool _internal_has_environmentalconditionsfile() const;
  public:
  void clear_environmentalconditionsfile();
  const std::string& environmentalconditionsfile() const;
  void set_environmentalconditionsfile(const std::string& value);
  void set_environmentalconditionsfile(std::string&& value);
  void set_environmentalconditionsfile(const char* value);
  void set_environmentalconditionsfile(const char* value, size_t size);
  std::string* mutable_environmentalconditionsfile();
  std::string* release_environmentalconditionsfile();
  void set_allocated_environmentalconditionsfile(std::string* environmentalconditionsfile);
  private:
  const std::string& _internal_environmentalconditionsfile() const;
  void _internal_set_environmentalconditionsfile(const std::string& value);
  std::string* _internal_mutable_environmentalconditionsfile();
  public:

  void clear_Option();
  OptionCase Option_case() const;
  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.InitialEnvironmentalConditionsData)
 private:
  class _Internal;
  void set_has_environmentalconditions();
  void set_has_environmentalconditionsfile();

  inline bool has_Option() const;
  inline void clear_has_Option();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::EnvironmentConditionData* environmentcondition_;
  union OptionUnion {
    OptionUnion() {}
    ::pulse::cdm::bind::EnvironmentalConditionsData* environmentalconditions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr environmentalconditionsfile_;
  } Option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AnyEnvironmentConditionData

// .pulse.cdm.bind.InitialEnvironmentalConditionsData InitialEnvironmentalConditions = 1;
inline bool AnyEnvironmentConditionData::_internal_has_initialenvironmentalconditions() const {
  return Condition_case() == kInitialEnvironmentalConditions;
}
inline bool AnyEnvironmentConditionData::has_initialenvironmentalconditions() const {
  return _internal_has_initialenvironmentalconditions();
}
inline void AnyEnvironmentConditionData::set_has_initialenvironmentalconditions() {
  _oneof_case_[0] = kInitialEnvironmentalConditions;
}
inline void AnyEnvironmentConditionData::clear_initialenvironmentalconditions() {
  if (_internal_has_initialenvironmentalconditions()) {
    delete Condition_.initialenvironmentalconditions_;
    clear_has_Condition();
  }
}
inline ::pulse::cdm::bind::InitialEnvironmentalConditionsData* AnyEnvironmentConditionData::release_initialenvironmentalconditions() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyEnvironmentConditionData.InitialEnvironmentalConditions)
  if (has_initialenvironmentalconditions()) {
    clear_has_Condition();
      ::pulse::cdm::bind::InitialEnvironmentalConditionsData* temp = Condition_.initialenvironmentalconditions_;
    Condition_.initialenvironmentalconditions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::InitialEnvironmentalConditionsData& AnyEnvironmentConditionData::_internal_initialenvironmentalconditions() const {
  return _internal_has_initialenvironmentalconditions()
      ? *Condition_.initialenvironmentalconditions_
      : *reinterpret_cast< ::pulse::cdm::bind::InitialEnvironmentalConditionsData*>(&::pulse::cdm::bind::_InitialEnvironmentalConditionsData_default_instance_);
}
inline const ::pulse::cdm::bind::InitialEnvironmentalConditionsData& AnyEnvironmentConditionData::initialenvironmentalconditions() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyEnvironmentConditionData.InitialEnvironmentalConditions)
  return _internal_initialenvironmentalconditions();
}
inline ::pulse::cdm::bind::InitialEnvironmentalConditionsData* AnyEnvironmentConditionData::_internal_mutable_initialenvironmentalconditions() {
  if (!_internal_has_initialenvironmentalconditions()) {
    clear_Condition();
    set_has_initialenvironmentalconditions();
    Condition_.initialenvironmentalconditions_ = CreateMaybeMessage< ::pulse::cdm::bind::InitialEnvironmentalConditionsData >(
        GetArenaNoVirtual());
  }
  return Condition_.initialenvironmentalconditions_;
}
inline ::pulse::cdm::bind::InitialEnvironmentalConditionsData* AnyEnvironmentConditionData::mutable_initialenvironmentalconditions() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyEnvironmentConditionData.InitialEnvironmentalConditions)
  return _internal_mutable_initialenvironmentalconditions();
}

inline bool AnyEnvironmentConditionData::has_Condition() const {
  return Condition_case() != CONDITION_NOT_SET;
}
inline void AnyEnvironmentConditionData::clear_has_Condition() {
  _oneof_case_[0] = CONDITION_NOT_SET;
}
inline AnyEnvironmentConditionData::ConditionCase AnyEnvironmentConditionData::Condition_case() const {
  return AnyEnvironmentConditionData::ConditionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// EnvironmentConditionData

// .pulse.cdm.bind.ConditionData Condition = 1;
inline bool EnvironmentConditionData::_internal_has_condition() const {
  return this != internal_default_instance() && condition_ != nullptr;
}
inline bool EnvironmentConditionData::has_condition() const {
  return _internal_has_condition();
}
inline const ::pulse::cdm::bind::ConditionData& EnvironmentConditionData::_internal_condition() const {
  const ::pulse::cdm::bind::ConditionData* p = condition_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ConditionData*>(
      &::pulse::cdm::bind::_ConditionData_default_instance_);
}
inline const ::pulse::cdm::bind::ConditionData& EnvironmentConditionData::condition() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EnvironmentConditionData.Condition)
  return _internal_condition();
}
inline ::pulse::cdm::bind::ConditionData* EnvironmentConditionData::release_condition() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.EnvironmentConditionData.Condition)
  
  ::pulse::cdm::bind::ConditionData* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ConditionData* EnvironmentConditionData::_internal_mutable_condition() {
  
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ConditionData>(GetArenaNoVirtual());
    condition_ = p;
  }
  return condition_;
}
inline ::pulse::cdm::bind::ConditionData* EnvironmentConditionData::mutable_condition() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EnvironmentConditionData.Condition)
  return _internal_mutable_condition();
}
inline void EnvironmentConditionData::set_allocated_condition(::pulse::cdm::bind::ConditionData* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(condition_);
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    
  } else {
    
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.EnvironmentConditionData.Condition)
}

// -------------------------------------------------------------------

// InitialEnvironmentalConditionsData

// .pulse.cdm.bind.EnvironmentConditionData EnvironmentCondition = 1;
inline bool InitialEnvironmentalConditionsData::_internal_has_environmentcondition() const {
  return this != internal_default_instance() && environmentcondition_ != nullptr;
}
inline bool InitialEnvironmentalConditionsData::has_environmentcondition() const {
  return _internal_has_environmentcondition();
}
inline void InitialEnvironmentalConditionsData::clear_environmentcondition() {
  if (GetArenaNoVirtual() == nullptr && environmentcondition_ != nullptr) {
    delete environmentcondition_;
  }
  environmentcondition_ = nullptr;
}
inline const ::pulse::cdm::bind::EnvironmentConditionData& InitialEnvironmentalConditionsData::_internal_environmentcondition() const {
  const ::pulse::cdm::bind::EnvironmentConditionData* p = environmentcondition_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::EnvironmentConditionData*>(
      &::pulse::cdm::bind::_EnvironmentConditionData_default_instance_);
}
inline const ::pulse::cdm::bind::EnvironmentConditionData& InitialEnvironmentalConditionsData::environmentcondition() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.InitialEnvironmentalConditionsData.EnvironmentCondition)
  return _internal_environmentcondition();
}
inline ::pulse::cdm::bind::EnvironmentConditionData* InitialEnvironmentalConditionsData::release_environmentcondition() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.InitialEnvironmentalConditionsData.EnvironmentCondition)
  
  ::pulse::cdm::bind::EnvironmentConditionData* temp = environmentcondition_;
  environmentcondition_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::EnvironmentConditionData* InitialEnvironmentalConditionsData::_internal_mutable_environmentcondition() {
  
  if (environmentcondition_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::EnvironmentConditionData>(GetArenaNoVirtual());
    environmentcondition_ = p;
  }
  return environmentcondition_;
}
inline ::pulse::cdm::bind::EnvironmentConditionData* InitialEnvironmentalConditionsData::mutable_environmentcondition() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.InitialEnvironmentalConditionsData.EnvironmentCondition)
  return _internal_mutable_environmentcondition();
}
inline void InitialEnvironmentalConditionsData::set_allocated_environmentcondition(::pulse::cdm::bind::EnvironmentConditionData* environmentcondition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete environmentcondition_;
  }
  if (environmentcondition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      environmentcondition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, environmentcondition, submessage_arena);
    }
    
  } else {
    
  }
  environmentcondition_ = environmentcondition;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.InitialEnvironmentalConditionsData.EnvironmentCondition)
}

// .pulse.cdm.bind.EnvironmentalConditionsData EnvironmentalConditions = 2;
inline bool InitialEnvironmentalConditionsData::_internal_has_environmentalconditions() const {
  return Option_case() == kEnvironmentalConditions;
}
inline bool InitialEnvironmentalConditionsData::has_environmentalconditions() const {
  return _internal_has_environmentalconditions();
}
inline void InitialEnvironmentalConditionsData::set_has_environmentalconditions() {
  _oneof_case_[0] = kEnvironmentalConditions;
}
inline ::pulse::cdm::bind::EnvironmentalConditionsData* InitialEnvironmentalConditionsData::release_environmentalconditions() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.InitialEnvironmentalConditionsData.EnvironmentalConditions)
  if (has_environmentalconditions()) {
    clear_has_Option();
      ::pulse::cdm::bind::EnvironmentalConditionsData* temp = Option_.environmentalconditions_;
    Option_.environmentalconditions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::EnvironmentalConditionsData& InitialEnvironmentalConditionsData::_internal_environmentalconditions() const {
  return _internal_has_environmentalconditions()
      ? *Option_.environmentalconditions_
      : *reinterpret_cast< ::pulse::cdm::bind::EnvironmentalConditionsData*>(&::pulse::cdm::bind::_EnvironmentalConditionsData_default_instance_);
}
inline const ::pulse::cdm::bind::EnvironmentalConditionsData& InitialEnvironmentalConditionsData::environmentalconditions() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.InitialEnvironmentalConditionsData.EnvironmentalConditions)
  return _internal_environmentalconditions();
}
inline ::pulse::cdm::bind::EnvironmentalConditionsData* InitialEnvironmentalConditionsData::_internal_mutable_environmentalconditions() {
  if (!_internal_has_environmentalconditions()) {
    clear_Option();
    set_has_environmentalconditions();
    Option_.environmentalconditions_ = CreateMaybeMessage< ::pulse::cdm::bind::EnvironmentalConditionsData >(
        GetArenaNoVirtual());
  }
  return Option_.environmentalconditions_;
}
inline ::pulse::cdm::bind::EnvironmentalConditionsData* InitialEnvironmentalConditionsData::mutable_environmentalconditions() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.InitialEnvironmentalConditionsData.EnvironmentalConditions)
  return _internal_mutable_environmentalconditions();
}

// string EnvironmentalConditionsFile = 3;
inline bool InitialEnvironmentalConditionsData::_internal_has_environmentalconditionsfile() const {
  return Option_case() == kEnvironmentalConditionsFile;
}
inline void InitialEnvironmentalConditionsData::set_has_environmentalconditionsfile() {
  _oneof_case_[0] = kEnvironmentalConditionsFile;
}
inline void InitialEnvironmentalConditionsData::clear_environmentalconditionsfile() {
  if (_internal_has_environmentalconditionsfile()) {
    Option_.environmentalconditionsfile_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_Option();
  }
}
inline const std::string& InitialEnvironmentalConditionsData::environmentalconditionsfile() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.InitialEnvironmentalConditionsData.EnvironmentalConditionsFile)
  return _internal_environmentalconditionsfile();
}
inline void InitialEnvironmentalConditionsData::set_environmentalconditionsfile(const std::string& value) {
  _internal_set_environmentalconditionsfile(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.InitialEnvironmentalConditionsData.EnvironmentalConditionsFile)
}
inline std::string* InitialEnvironmentalConditionsData::mutable_environmentalconditionsfile() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.InitialEnvironmentalConditionsData.EnvironmentalConditionsFile)
  return _internal_mutable_environmentalconditionsfile();
}
inline const std::string& InitialEnvironmentalConditionsData::_internal_environmentalconditionsfile() const {
  if (_internal_has_environmentalconditionsfile()) {
    return Option_.environmentalconditionsfile_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void InitialEnvironmentalConditionsData::_internal_set_environmentalconditionsfile(const std::string& value) {
  if (!_internal_has_environmentalconditionsfile()) {
    clear_Option();
    set_has_environmentalconditionsfile();
    Option_.environmentalconditionsfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Option_.environmentalconditionsfile_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InitialEnvironmentalConditionsData::set_environmentalconditionsfile(std::string&& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.InitialEnvironmentalConditionsData.EnvironmentalConditionsFile)
  if (!_internal_has_environmentalconditionsfile()) {
    clear_Option();
    set_has_environmentalconditionsfile();
    Option_.environmentalconditionsfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Option_.environmentalconditionsfile_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.InitialEnvironmentalConditionsData.EnvironmentalConditionsFile)
}
inline void InitialEnvironmentalConditionsData::set_environmentalconditionsfile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_environmentalconditionsfile()) {
    clear_Option();
    set_has_environmentalconditionsfile();
    Option_.environmentalconditionsfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Option_.environmentalconditionsfile_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.InitialEnvironmentalConditionsData.EnvironmentalConditionsFile)
}
inline void InitialEnvironmentalConditionsData::set_environmentalconditionsfile(const char* value, size_t size) {
  if (!_internal_has_environmentalconditionsfile()) {
    clear_Option();
    set_has_environmentalconditionsfile();
    Option_.environmentalconditionsfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Option_.environmentalconditionsfile_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.InitialEnvironmentalConditionsData.EnvironmentalConditionsFile)
}
inline std::string* InitialEnvironmentalConditionsData::_internal_mutable_environmentalconditionsfile() {
  if (!_internal_has_environmentalconditionsfile()) {
    clear_Option();
    set_has_environmentalconditionsfile();
    Option_.environmentalconditionsfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return Option_.environmentalconditionsfile_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InitialEnvironmentalConditionsData::release_environmentalconditionsfile() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.InitialEnvironmentalConditionsData.EnvironmentalConditionsFile)
  if (_internal_has_environmentalconditionsfile()) {
    clear_has_Option();
    return Option_.environmentalconditionsfile_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void InitialEnvironmentalConditionsData::set_allocated_environmentalconditionsfile(std::string* environmentalconditionsfile) {
  if (has_Option()) {
    clear_Option();
  }
  if (environmentalconditionsfile != nullptr) {
    set_has_environmentalconditionsfile();
    Option_.environmentalconditionsfile_.UnsafeSetDefault(environmentalconditionsfile);
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.InitialEnvironmentalConditionsData.EnvironmentalConditionsFile)
}

inline bool InitialEnvironmentalConditionsData::has_Option() const {
  return Option_case() != OPTION_NOT_SET;
}
inline void InitialEnvironmentalConditionsData::clear_has_Option() {
  _oneof_case_[0] = OPTION_NOT_SET;
}
inline InitialEnvironmentalConditionsData::OptionCase InitialEnvironmentalConditionsData::Option_case() const {
  return InitialEnvironmentalConditionsData::OptionCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bind
}  // namespace cdm
}  // namespace pulse

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto
