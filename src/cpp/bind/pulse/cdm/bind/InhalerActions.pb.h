// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/InhalerActions.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fInhalerActions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fInhalerActions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "pulse/cdm/bind/Inhaler.pb.h"
#include "pulse/cdm/bind/Actions.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fInhalerActions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pulse_2fcdm_2fbind_2fInhalerActions_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fInhalerActions_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class AnyInhalerActionData;
class AnyInhalerActionDataDefaultTypeInternal;
extern AnyInhalerActionDataDefaultTypeInternal _AnyInhalerActionData_default_instance_;
class InhalerActionData;
class InhalerActionDataDefaultTypeInternal;
extern InhalerActionDataDefaultTypeInternal _InhalerActionData_default_instance_;
class InhalerConfigurationData;
class InhalerConfigurationDataDefaultTypeInternal;
extern InhalerConfigurationDataDefaultTypeInternal _InhalerConfigurationData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> ::pulse::cdm::bind::AnyInhalerActionData* Arena::CreateMaybeMessage<::pulse::cdm::bind::AnyInhalerActionData>(Arena*);
template<> ::pulse::cdm::bind::InhalerActionData* Arena::CreateMaybeMessage<::pulse::cdm::bind::InhalerActionData>(Arena*);
template<> ::pulse::cdm::bind::InhalerConfigurationData* Arena::CreateMaybeMessage<::pulse::cdm::bind::InhalerConfigurationData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pulse {
namespace cdm {
namespace bind {

// ===================================================================

class AnyInhalerActionData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.AnyInhalerActionData) */ {
 public:
  AnyInhalerActionData();
  virtual ~AnyInhalerActionData();

  AnyInhalerActionData(const AnyInhalerActionData& from);
  AnyInhalerActionData(AnyInhalerActionData&& from) noexcept
    : AnyInhalerActionData() {
    *this = ::std::move(from);
  }

  inline AnyInhalerActionData& operator=(const AnyInhalerActionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnyInhalerActionData& operator=(AnyInhalerActionData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnyInhalerActionData& default_instance();

  enum ActionCase {
    kConfiguration = 1,
    ACTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnyInhalerActionData* internal_default_instance() {
    return reinterpret_cast<const AnyInhalerActionData*>(
               &_AnyInhalerActionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AnyInhalerActionData& a, AnyInhalerActionData& b) {
    a.Swap(&b);
  }
  inline void Swap(AnyInhalerActionData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnyInhalerActionData* New() const final {
    return CreateMaybeMessage<AnyInhalerActionData>(nullptr);
  }

  AnyInhalerActionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnyInhalerActionData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnyInhalerActionData& from);
  void MergeFrom(const AnyInhalerActionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnyInhalerActionData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.AnyInhalerActionData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fInhalerActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fInhalerActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigurationFieldNumber = 1,
  };
  // .pulse.cdm.bind.InhalerConfigurationData Configuration = 1;
  bool has_configuration() const;
  private:
  bool _internal_has_configuration() const;
  public:
  void clear_configuration();
  const ::pulse::cdm::bind::InhalerConfigurationData& configuration() const;
  ::pulse::cdm::bind::InhalerConfigurationData* release_configuration();
  ::pulse::cdm::bind::InhalerConfigurationData* mutable_configuration();
  void set_allocated_configuration(::pulse::cdm::bind::InhalerConfigurationData* configuration);
  private:
  const ::pulse::cdm::bind::InhalerConfigurationData& _internal_configuration() const;
  ::pulse::cdm::bind::InhalerConfigurationData* _internal_mutable_configuration();
  public:

  void clear_Action();
  ActionCase Action_case() const;
  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.AnyInhalerActionData)
 private:
  class _Internal;
  void set_has_configuration();

  inline bool has_Action() const;
  inline void clear_has_Action();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union ActionUnion {
    ActionUnion() {}
    ::pulse::cdm::bind::InhalerConfigurationData* configuration_;
  } Action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fInhalerActions_2eproto;
};
// -------------------------------------------------------------------

class InhalerActionData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.InhalerActionData) */ {
 public:
  InhalerActionData();
  virtual ~InhalerActionData();

  InhalerActionData(const InhalerActionData& from);
  InhalerActionData(InhalerActionData&& from) noexcept
    : InhalerActionData() {
    *this = ::std::move(from);
  }

  inline InhalerActionData& operator=(const InhalerActionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline InhalerActionData& operator=(InhalerActionData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InhalerActionData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InhalerActionData* internal_default_instance() {
    return reinterpret_cast<const InhalerActionData*>(
               &_InhalerActionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InhalerActionData& a, InhalerActionData& b) {
    a.Swap(&b);
  }
  inline void Swap(InhalerActionData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InhalerActionData* New() const final {
    return CreateMaybeMessage<InhalerActionData>(nullptr);
  }

  InhalerActionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InhalerActionData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InhalerActionData& from);
  void MergeFrom(const InhalerActionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InhalerActionData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.InhalerActionData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fInhalerActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fInhalerActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
  };
  // .pulse.cdm.bind.ActionData Action = 1;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  const ::pulse::cdm::bind::ActionData& action() const;
  ::pulse::cdm::bind::ActionData* release_action();
  ::pulse::cdm::bind::ActionData* mutable_action();
  void set_allocated_action(::pulse::cdm::bind::ActionData* action);
  private:
  const ::pulse::cdm::bind::ActionData& _internal_action() const;
  ::pulse::cdm::bind::ActionData* _internal_mutable_action();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.InhalerActionData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ActionData* action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fInhalerActions_2eproto;
};
// -------------------------------------------------------------------

class InhalerConfigurationData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.InhalerConfigurationData) */ {
 public:
  InhalerConfigurationData();
  virtual ~InhalerConfigurationData();

  InhalerConfigurationData(const InhalerConfigurationData& from);
  InhalerConfigurationData(InhalerConfigurationData&& from) noexcept
    : InhalerConfigurationData() {
    *this = ::std::move(from);
  }

  inline InhalerConfigurationData& operator=(const InhalerConfigurationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline InhalerConfigurationData& operator=(InhalerConfigurationData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InhalerConfigurationData& default_instance();

  enum OptionCase {
    kConfiguration = 2,
    kConfigurationFile = 3,
    OPTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InhalerConfigurationData* internal_default_instance() {
    return reinterpret_cast<const InhalerConfigurationData*>(
               &_InhalerConfigurationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InhalerConfigurationData& a, InhalerConfigurationData& b) {
    a.Swap(&b);
  }
  inline void Swap(InhalerConfigurationData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InhalerConfigurationData* New() const final {
    return CreateMaybeMessage<InhalerConfigurationData>(nullptr);
  }

  InhalerConfigurationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InhalerConfigurationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InhalerConfigurationData& from);
  void MergeFrom(const InhalerConfigurationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InhalerConfigurationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.InhalerConfigurationData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fInhalerActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fInhalerActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInhalerActionFieldNumber = 1,
    kConfigurationFieldNumber = 2,
    kConfigurationFileFieldNumber = 3,
  };
  // .pulse.cdm.bind.InhalerActionData InhalerAction = 1;
  bool has_inhaleraction() const;
  private:
  bool _internal_has_inhaleraction() const;
  public:
  void clear_inhaleraction();
  const ::pulse::cdm::bind::InhalerActionData& inhaleraction() const;
  ::pulse::cdm::bind::InhalerActionData* release_inhaleraction();
  ::pulse::cdm::bind::InhalerActionData* mutable_inhaleraction();
  void set_allocated_inhaleraction(::pulse::cdm::bind::InhalerActionData* inhaleraction);
  private:
  const ::pulse::cdm::bind::InhalerActionData& _internal_inhaleraction() const;
  ::pulse::cdm::bind::InhalerActionData* _internal_mutable_inhaleraction();
  public:

  // .pulse.cdm.bind.InhalerData Configuration = 2;
  bool has_configuration() const;
  private:
  bool _internal_has_configuration() const;
  public:
  void clear_configuration();
  const ::pulse::cdm::bind::InhalerData& configuration() const;
  ::pulse::cdm::bind::InhalerData* release_configuration();
  ::pulse::cdm::bind::InhalerData* mutable_configuration();
  void set_allocated_configuration(::pulse::cdm::bind::InhalerData* configuration);
  private:
  const ::pulse::cdm::bind::InhalerData& _internal_configuration() const;
  ::pulse::cdm::bind::InhalerData* _internal_mutable_configuration();
  public:

  // string ConfigurationFile = 3;
  private:
  bool _internal_has_configurationfile() const;
  public:
  void clear_configurationfile();
  const std::string& configurationfile() const;
  void set_configurationfile(const std::string& value);
  void set_configurationfile(std::string&& value);
  void set_configurationfile(const char* value);
  void set_configurationfile(const char* value, size_t size);
  std::string* mutable_configurationfile();
  std::string* release_configurationfile();
  void set_allocated_configurationfile(std::string* configurationfile);
  private:
  const std::string& _internal_configurationfile() const;
  void _internal_set_configurationfile(const std::string& value);
  std::string* _internal_mutable_configurationfile();
  public:

  void clear_Option();
  OptionCase Option_case() const;
  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.InhalerConfigurationData)
 private:
  class _Internal;
  void set_has_configuration();
  void set_has_configurationfile();

  inline bool has_Option() const;
  inline void clear_has_Option();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::InhalerActionData* inhaleraction_;
  union OptionUnion {
    OptionUnion() {}
    ::pulse::cdm::bind::InhalerData* configuration_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr configurationfile_;
  } Option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fInhalerActions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AnyInhalerActionData

// .pulse.cdm.bind.InhalerConfigurationData Configuration = 1;
inline bool AnyInhalerActionData::_internal_has_configuration() const {
  return Action_case() == kConfiguration;
}
inline bool AnyInhalerActionData::has_configuration() const {
  return _internal_has_configuration();
}
inline void AnyInhalerActionData::set_has_configuration() {
  _oneof_case_[0] = kConfiguration;
}
inline void AnyInhalerActionData::clear_configuration() {
  if (_internal_has_configuration()) {
    delete Action_.configuration_;
    clear_has_Action();
  }
}
inline ::pulse::cdm::bind::InhalerConfigurationData* AnyInhalerActionData::release_configuration() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyInhalerActionData.Configuration)
  if (has_configuration()) {
    clear_has_Action();
      ::pulse::cdm::bind::InhalerConfigurationData* temp = Action_.configuration_;
    Action_.configuration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::InhalerConfigurationData& AnyInhalerActionData::_internal_configuration() const {
  return _internal_has_configuration()
      ? *Action_.configuration_
      : *reinterpret_cast< ::pulse::cdm::bind::InhalerConfigurationData*>(&::pulse::cdm::bind::_InhalerConfigurationData_default_instance_);
}
inline const ::pulse::cdm::bind::InhalerConfigurationData& AnyInhalerActionData::configuration() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyInhalerActionData.Configuration)
  return _internal_configuration();
}
inline ::pulse::cdm::bind::InhalerConfigurationData* AnyInhalerActionData::_internal_mutable_configuration() {
  if (!_internal_has_configuration()) {
    clear_Action();
    set_has_configuration();
    Action_.configuration_ = CreateMaybeMessage< ::pulse::cdm::bind::InhalerConfigurationData >(
        GetArenaNoVirtual());
  }
  return Action_.configuration_;
}
inline ::pulse::cdm::bind::InhalerConfigurationData* AnyInhalerActionData::mutable_configuration() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyInhalerActionData.Configuration)
  return _internal_mutable_configuration();
}

inline bool AnyInhalerActionData::has_Action() const {
  return Action_case() != ACTION_NOT_SET;
}
inline void AnyInhalerActionData::clear_has_Action() {
  _oneof_case_[0] = ACTION_NOT_SET;
}
inline AnyInhalerActionData::ActionCase AnyInhalerActionData::Action_case() const {
  return AnyInhalerActionData::ActionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// InhalerActionData

// .pulse.cdm.bind.ActionData Action = 1;
inline bool InhalerActionData::_internal_has_action() const {
  return this != internal_default_instance() && action_ != nullptr;
}
inline bool InhalerActionData::has_action() const {
  return _internal_has_action();
}
inline const ::pulse::cdm::bind::ActionData& InhalerActionData::_internal_action() const {
  const ::pulse::cdm::bind::ActionData* p = action_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ActionData*>(
      &::pulse::cdm::bind::_ActionData_default_instance_);
}
inline const ::pulse::cdm::bind::ActionData& InhalerActionData::action() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.InhalerActionData.Action)
  return _internal_action();
}
inline ::pulse::cdm::bind::ActionData* InhalerActionData::release_action() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.InhalerActionData.Action)
  
  ::pulse::cdm::bind::ActionData* temp = action_;
  action_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ActionData* InhalerActionData::_internal_mutable_action() {
  
  if (action_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ActionData>(GetArenaNoVirtual());
    action_ = p;
  }
  return action_;
}
inline ::pulse::cdm::bind::ActionData* InhalerActionData::mutable_action() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.InhalerActionData.Action)
  return _internal_mutable_action();
}
inline void InhalerActionData::set_allocated_action(::pulse::cdm::bind::ActionData* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_);
  }
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    
  } else {
    
  }
  action_ = action;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.InhalerActionData.Action)
}

// -------------------------------------------------------------------

// InhalerConfigurationData

// .pulse.cdm.bind.InhalerActionData InhalerAction = 1;
inline bool InhalerConfigurationData::_internal_has_inhaleraction() const {
  return this != internal_default_instance() && inhaleraction_ != nullptr;
}
inline bool InhalerConfigurationData::has_inhaleraction() const {
  return _internal_has_inhaleraction();
}
inline void InhalerConfigurationData::clear_inhaleraction() {
  if (GetArenaNoVirtual() == nullptr && inhaleraction_ != nullptr) {
    delete inhaleraction_;
  }
  inhaleraction_ = nullptr;
}
inline const ::pulse::cdm::bind::InhalerActionData& InhalerConfigurationData::_internal_inhaleraction() const {
  const ::pulse::cdm::bind::InhalerActionData* p = inhaleraction_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::InhalerActionData*>(
      &::pulse::cdm::bind::_InhalerActionData_default_instance_);
}
inline const ::pulse::cdm::bind::InhalerActionData& InhalerConfigurationData::inhaleraction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.InhalerConfigurationData.InhalerAction)
  return _internal_inhaleraction();
}
inline ::pulse::cdm::bind::InhalerActionData* InhalerConfigurationData::release_inhaleraction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.InhalerConfigurationData.InhalerAction)
  
  ::pulse::cdm::bind::InhalerActionData* temp = inhaleraction_;
  inhaleraction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::InhalerActionData* InhalerConfigurationData::_internal_mutable_inhaleraction() {
  
  if (inhaleraction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::InhalerActionData>(GetArenaNoVirtual());
    inhaleraction_ = p;
  }
  return inhaleraction_;
}
inline ::pulse::cdm::bind::InhalerActionData* InhalerConfigurationData::mutable_inhaleraction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.InhalerConfigurationData.InhalerAction)
  return _internal_mutable_inhaleraction();
}
inline void InhalerConfigurationData::set_allocated_inhaleraction(::pulse::cdm::bind::InhalerActionData* inhaleraction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete inhaleraction_;
  }
  if (inhaleraction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      inhaleraction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inhaleraction, submessage_arena);
    }
    
  } else {
    
  }
  inhaleraction_ = inhaleraction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.InhalerConfigurationData.InhalerAction)
}

// .pulse.cdm.bind.InhalerData Configuration = 2;
inline bool InhalerConfigurationData::_internal_has_configuration() const {
  return Option_case() == kConfiguration;
}
inline bool InhalerConfigurationData::has_configuration() const {
  return _internal_has_configuration();
}
inline void InhalerConfigurationData::set_has_configuration() {
  _oneof_case_[0] = kConfiguration;
}
inline ::pulse::cdm::bind::InhalerData* InhalerConfigurationData::release_configuration() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.InhalerConfigurationData.Configuration)
  if (has_configuration()) {
    clear_has_Option();
      ::pulse::cdm::bind::InhalerData* temp = Option_.configuration_;
    Option_.configuration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::InhalerData& InhalerConfigurationData::_internal_configuration() const {
  return _internal_has_configuration()
      ? *Option_.configuration_
      : *reinterpret_cast< ::pulse::cdm::bind::InhalerData*>(&::pulse::cdm::bind::_InhalerData_default_instance_);
}
inline const ::pulse::cdm::bind::InhalerData& InhalerConfigurationData::configuration() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.InhalerConfigurationData.Configuration)
  return _internal_configuration();
}
inline ::pulse::cdm::bind::InhalerData* InhalerConfigurationData::_internal_mutable_configuration() {
  if (!_internal_has_configuration()) {
    clear_Option();
    set_has_configuration();
    Option_.configuration_ = CreateMaybeMessage< ::pulse::cdm::bind::InhalerData >(
        GetArenaNoVirtual());
  }
  return Option_.configuration_;
}
inline ::pulse::cdm::bind::InhalerData* InhalerConfigurationData::mutable_configuration() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.InhalerConfigurationData.Configuration)
  return _internal_mutable_configuration();
}

// string ConfigurationFile = 3;
inline bool InhalerConfigurationData::_internal_has_configurationfile() const {
  return Option_case() == kConfigurationFile;
}
inline void InhalerConfigurationData::set_has_configurationfile() {
  _oneof_case_[0] = kConfigurationFile;
}
inline void InhalerConfigurationData::clear_configurationfile() {
  if (_internal_has_configurationfile()) {
    Option_.configurationfile_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_Option();
  }
}
inline const std::string& InhalerConfigurationData::configurationfile() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.InhalerConfigurationData.ConfigurationFile)
  return _internal_configurationfile();
}
inline void InhalerConfigurationData::set_configurationfile(const std::string& value) {
  _internal_set_configurationfile(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.InhalerConfigurationData.ConfigurationFile)
}
inline std::string* InhalerConfigurationData::mutable_configurationfile() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.InhalerConfigurationData.ConfigurationFile)
  return _internal_mutable_configurationfile();
}
inline const std::string& InhalerConfigurationData::_internal_configurationfile() const {
  if (_internal_has_configurationfile()) {
    return Option_.configurationfile_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void InhalerConfigurationData::_internal_set_configurationfile(const std::string& value) {
  if (!_internal_has_configurationfile()) {
    clear_Option();
    set_has_configurationfile();
    Option_.configurationfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Option_.configurationfile_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InhalerConfigurationData::set_configurationfile(std::string&& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.InhalerConfigurationData.ConfigurationFile)
  if (!_internal_has_configurationfile()) {
    clear_Option();
    set_has_configurationfile();
    Option_.configurationfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Option_.configurationfile_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.InhalerConfigurationData.ConfigurationFile)
}
inline void InhalerConfigurationData::set_configurationfile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_configurationfile()) {
    clear_Option();
    set_has_configurationfile();
    Option_.configurationfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Option_.configurationfile_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.InhalerConfigurationData.ConfigurationFile)
}
inline void InhalerConfigurationData::set_configurationfile(const char* value, size_t size) {
  if (!_internal_has_configurationfile()) {
    clear_Option();
    set_has_configurationfile();
    Option_.configurationfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Option_.configurationfile_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.InhalerConfigurationData.ConfigurationFile)
}
inline std::string* InhalerConfigurationData::_internal_mutable_configurationfile() {
  if (!_internal_has_configurationfile()) {
    clear_Option();
    set_has_configurationfile();
    Option_.configurationfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return Option_.configurationfile_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InhalerConfigurationData::release_configurationfile() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.InhalerConfigurationData.ConfigurationFile)
  if (_internal_has_configurationfile()) {
    clear_has_Option();
    return Option_.configurationfile_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void InhalerConfigurationData::set_allocated_configurationfile(std::string* configurationfile) {
  if (has_Option()) {
    clear_Option();
  }
  if (configurationfile != nullptr) {
    set_has_configurationfile();
    Option_.configurationfile_.UnsafeSetDefault(configurationfile);
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.InhalerConfigurationData.ConfigurationFile)
}

inline bool InhalerConfigurationData::has_Option() const {
  return Option_case() != OPTION_NOT_SET;
}
inline void InhalerConfigurationData::clear_has_Option() {
  _oneof_case_[0] = OPTION_NOT_SET;
}
inline InhalerConfigurationData::OptionCase InhalerConfigurationData::Option_case() const {
  return InhalerConfigurationData::OptionCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bind
}  // namespace cdm
}  // namespace pulse

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fInhalerActions_2eproto
