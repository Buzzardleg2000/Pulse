// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/Patient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fPatient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fPatient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "pulse/cdm/bind/Properties.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pulse_2fcdm_2fbind_2fPatient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fPatient_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class PatientData;
class PatientDataDefaultTypeInternal;
extern PatientDataDefaultTypeInternal _PatientData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> ::pulse::cdm::bind::PatientData* Arena::CreateMaybeMessage<::pulse::cdm::bind::PatientData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pulse {
namespace cdm {
namespace bind {

enum PatientData_eSex : int {
  PatientData_eSex_Male = 0,
  PatientData_eSex_Female = 1,
  PatientData_eSex_PatientData_eSex_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PatientData_eSex_PatientData_eSex_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PatientData_eSex_IsValid(int value);
constexpr PatientData_eSex PatientData_eSex_eSex_MIN = PatientData_eSex_Male;
constexpr PatientData_eSex PatientData_eSex_eSex_MAX = PatientData_eSex_Female;
constexpr int PatientData_eSex_eSex_ARRAYSIZE = PatientData_eSex_eSex_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PatientData_eSex_descriptor();
template<typename T>
inline const std::string& PatientData_eSex_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PatientData_eSex>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PatientData_eSex_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PatientData_eSex_descriptor(), enum_t_value);
}
inline bool PatientData_eSex_Parse(
    const std::string& name, PatientData_eSex* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PatientData_eSex>(
    PatientData_eSex_descriptor(), name, value);
}
// ===================================================================

class PatientData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.PatientData) */ {
 public:
  PatientData();
  virtual ~PatientData();

  PatientData(const PatientData& from);
  PatientData(PatientData&& from) noexcept
    : PatientData() {
    *this = ::std::move(from);
  }

  inline PatientData& operator=(const PatientData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatientData& operator=(PatientData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PatientData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatientData* internal_default_instance() {
    return reinterpret_cast<const PatientData*>(
               &_PatientData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PatientData& a, PatientData& b) {
    a.Swap(&b);
  }
  inline void Swap(PatientData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PatientData* New() const final {
    return CreateMaybeMessage<PatientData>(nullptr);
  }

  PatientData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PatientData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PatientData& from);
  void MergeFrom(const PatientData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatientData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.PatientData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatient_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PatientData_eSex eSex;
  static constexpr eSex Male =
    PatientData_eSex_Male;
  static constexpr eSex Female =
    PatientData_eSex_Female;
  static inline bool eSex_IsValid(int value) {
    return PatientData_eSex_IsValid(value);
  }
  static constexpr eSex eSex_MIN =
    PatientData_eSex_eSex_MIN;
  static constexpr eSex eSex_MAX =
    PatientData_eSex_eSex_MAX;
  static constexpr int eSex_ARRAYSIZE =
    PatientData_eSex_eSex_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  eSex_descriptor() {
    return PatientData_eSex_descriptor();
  }
  template<typename T>
  static inline const std::string& eSex_Name(T enum_t_value) {
    static_assert(::std::is_same<T, eSex>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function eSex_Name.");
    return PatientData_eSex_Name(enum_t_value);
  }
  static inline bool eSex_Parse(const std::string& name,
      eSex* value) {
    return PatientData_eSex_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAgeFieldNumber = 3,
    kWeightFieldNumber = 4,
    kHeightFieldNumber = 5,
    kBodyDensityFieldNumber = 6,
    kBodyFatFractionFieldNumber = 7,
    kLeanBodyMassFieldNumber = 8,
    kAlveoliSurfaceAreaFieldNumber = 9,
    kRightLungRatioFieldNumber = 10,
    kSkinSurfaceAreaFieldNumber = 11,
    kBasalMetabolicRateFieldNumber = 12,
    kBloodVolumeBaselineFieldNumber = 13,
    kDiastolicArterialPressureBaselineFieldNumber = 14,
    kHeartRateBaselineFieldNumber = 15,
    kMeanArterialPressureBaselineFieldNumber = 16,
    kRespirationRateBaselineFieldNumber = 17,
    kSystolicArterialPressureBaselineFieldNumber = 18,
    kTidalVolumeBaselineFieldNumber = 19,
    kHeartRateMaximumFieldNumber = 20,
    kHeartRateMinimumFieldNumber = 21,
    kExpiratoryReserveVolumeFieldNumber = 22,
    kFunctionalResidualCapacityFieldNumber = 23,
    kInspiratoryCapacityFieldNumber = 24,
    kInspiratoryReserveVolumeFieldNumber = 25,
    kResidualVolumeFieldNumber = 26,
    kTotalLungCapacityFieldNumber = 27,
    kVitalCapacityFieldNumber = 28,
    kIdealBodyWeightFieldNumber = 29,
    kSexFieldNumber = 2,
  };
  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .pulse.cdm.bind.ScalarTimeData Age = 3;
  bool has_age() const;
  private:
  bool _internal_has_age() const;
  public:
  void clear_age();
  const ::pulse::cdm::bind::ScalarTimeData& age() const;
  ::pulse::cdm::bind::ScalarTimeData* release_age();
  ::pulse::cdm::bind::ScalarTimeData* mutable_age();
  void set_allocated_age(::pulse::cdm::bind::ScalarTimeData* age);
  private:
  const ::pulse::cdm::bind::ScalarTimeData& _internal_age() const;
  ::pulse::cdm::bind::ScalarTimeData* _internal_mutable_age();
  public:

  // .pulse.cdm.bind.ScalarMassData Weight = 4;
  bool has_weight() const;
  private:
  bool _internal_has_weight() const;
  public:
  void clear_weight();
  const ::pulse::cdm::bind::ScalarMassData& weight() const;
  ::pulse::cdm::bind::ScalarMassData* release_weight();
  ::pulse::cdm::bind::ScalarMassData* mutable_weight();
  void set_allocated_weight(::pulse::cdm::bind::ScalarMassData* weight);
  private:
  const ::pulse::cdm::bind::ScalarMassData& _internal_weight() const;
  ::pulse::cdm::bind::ScalarMassData* _internal_mutable_weight();
  public:

  // .pulse.cdm.bind.ScalarLengthData Height = 5;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  const ::pulse::cdm::bind::ScalarLengthData& height() const;
  ::pulse::cdm::bind::ScalarLengthData* release_height();
  ::pulse::cdm::bind::ScalarLengthData* mutable_height();
  void set_allocated_height(::pulse::cdm::bind::ScalarLengthData* height);
  private:
  const ::pulse::cdm::bind::ScalarLengthData& _internal_height() const;
  ::pulse::cdm::bind::ScalarLengthData* _internal_mutable_height();
  public:

  // .pulse.cdm.bind.ScalarMassPerVolumeData BodyDensity = 6;
  bool has_bodydensity() const;
  private:
  bool _internal_has_bodydensity() const;
  public:
  void clear_bodydensity();
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& bodydensity() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* release_bodydensity();
  ::pulse::cdm::bind::ScalarMassPerVolumeData* mutable_bodydensity();
  void set_allocated_bodydensity(::pulse::cdm::bind::ScalarMassPerVolumeData* bodydensity);
  private:
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& _internal_bodydensity() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* _internal_mutable_bodydensity();
  public:

  // .pulse.cdm.bind.Scalar0To1Data BodyFatFraction = 7;
  bool has_bodyfatfraction() const;
  private:
  bool _internal_has_bodyfatfraction() const;
  public:
  void clear_bodyfatfraction();
  const ::pulse::cdm::bind::Scalar0To1Data& bodyfatfraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_bodyfatfraction();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_bodyfatfraction();
  void set_allocated_bodyfatfraction(::pulse::cdm::bind::Scalar0To1Data* bodyfatfraction);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_bodyfatfraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_bodyfatfraction();
  public:

  // .pulse.cdm.bind.ScalarMassData LeanBodyMass = 8;
  bool has_leanbodymass() const;
  private:
  bool _internal_has_leanbodymass() const;
  public:
  void clear_leanbodymass();
  const ::pulse::cdm::bind::ScalarMassData& leanbodymass() const;
  ::pulse::cdm::bind::ScalarMassData* release_leanbodymass();
  ::pulse::cdm::bind::ScalarMassData* mutable_leanbodymass();
  void set_allocated_leanbodymass(::pulse::cdm::bind::ScalarMassData* leanbodymass);
  private:
  const ::pulse::cdm::bind::ScalarMassData& _internal_leanbodymass() const;
  ::pulse::cdm::bind::ScalarMassData* _internal_mutable_leanbodymass();
  public:

  // .pulse.cdm.bind.ScalarAreaData AlveoliSurfaceArea = 9;
  bool has_alveolisurfacearea() const;
  private:
  bool _internal_has_alveolisurfacearea() const;
  public:
  void clear_alveolisurfacearea();
  const ::pulse::cdm::bind::ScalarAreaData& alveolisurfacearea() const;
  ::pulse::cdm::bind::ScalarAreaData* release_alveolisurfacearea();
  ::pulse::cdm::bind::ScalarAreaData* mutable_alveolisurfacearea();
  void set_allocated_alveolisurfacearea(::pulse::cdm::bind::ScalarAreaData* alveolisurfacearea);
  private:
  const ::pulse::cdm::bind::ScalarAreaData& _internal_alveolisurfacearea() const;
  ::pulse::cdm::bind::ScalarAreaData* _internal_mutable_alveolisurfacearea();
  public:

  // .pulse.cdm.bind.Scalar0To1Data RightLungRatio = 10;
  bool has_rightlungratio() const;
  private:
  bool _internal_has_rightlungratio() const;
  public:
  void clear_rightlungratio();
  const ::pulse::cdm::bind::Scalar0To1Data& rightlungratio() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_rightlungratio();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_rightlungratio();
  void set_allocated_rightlungratio(::pulse::cdm::bind::Scalar0To1Data* rightlungratio);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_rightlungratio() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_rightlungratio();
  public:

  // .pulse.cdm.bind.ScalarAreaData SkinSurfaceArea = 11;
  bool has_skinsurfacearea() const;
  private:
  bool _internal_has_skinsurfacearea() const;
  public:
  void clear_skinsurfacearea();
  const ::pulse::cdm::bind::ScalarAreaData& skinsurfacearea() const;
  ::pulse::cdm::bind::ScalarAreaData* release_skinsurfacearea();
  ::pulse::cdm::bind::ScalarAreaData* mutable_skinsurfacearea();
  void set_allocated_skinsurfacearea(::pulse::cdm::bind::ScalarAreaData* skinsurfacearea);
  private:
  const ::pulse::cdm::bind::ScalarAreaData& _internal_skinsurfacearea() const;
  ::pulse::cdm::bind::ScalarAreaData* _internal_mutable_skinsurfacearea();
  public:

  // .pulse.cdm.bind.ScalarPowerData BasalMetabolicRate = 12;
  bool has_basalmetabolicrate() const;
  private:
  bool _internal_has_basalmetabolicrate() const;
  public:
  void clear_basalmetabolicrate();
  const ::pulse::cdm::bind::ScalarPowerData& basalmetabolicrate() const;
  ::pulse::cdm::bind::ScalarPowerData* release_basalmetabolicrate();
  ::pulse::cdm::bind::ScalarPowerData* mutable_basalmetabolicrate();
  void set_allocated_basalmetabolicrate(::pulse::cdm::bind::ScalarPowerData* basalmetabolicrate);
  private:
  const ::pulse::cdm::bind::ScalarPowerData& _internal_basalmetabolicrate() const;
  ::pulse::cdm::bind::ScalarPowerData* _internal_mutable_basalmetabolicrate();
  public:

  // .pulse.cdm.bind.ScalarVolumeData BloodVolumeBaseline = 13;
  bool has_bloodvolumebaseline() const;
  private:
  bool _internal_has_bloodvolumebaseline() const;
  public:
  void clear_bloodvolumebaseline();
  const ::pulse::cdm::bind::ScalarVolumeData& bloodvolumebaseline() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_bloodvolumebaseline();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_bloodvolumebaseline();
  void set_allocated_bloodvolumebaseline(::pulse::cdm::bind::ScalarVolumeData* bloodvolumebaseline);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_bloodvolumebaseline() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_bloodvolumebaseline();
  public:

  // .pulse.cdm.bind.ScalarPressureData DiastolicArterialPressureBaseline = 14;
  bool has_diastolicarterialpressurebaseline() const;
  private:
  bool _internal_has_diastolicarterialpressurebaseline() const;
  public:
  void clear_diastolicarterialpressurebaseline();
  const ::pulse::cdm::bind::ScalarPressureData& diastolicarterialpressurebaseline() const;
  ::pulse::cdm::bind::ScalarPressureData* release_diastolicarterialpressurebaseline();
  ::pulse::cdm::bind::ScalarPressureData* mutable_diastolicarterialpressurebaseline();
  void set_allocated_diastolicarterialpressurebaseline(::pulse::cdm::bind::ScalarPressureData* diastolicarterialpressurebaseline);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_diastolicarterialpressurebaseline() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_diastolicarterialpressurebaseline();
  public:

  // .pulse.cdm.bind.ScalarFrequencyData HeartRateBaseline = 15;
  bool has_heartratebaseline() const;
  private:
  bool _internal_has_heartratebaseline() const;
  public:
  void clear_heartratebaseline();
  const ::pulse::cdm::bind::ScalarFrequencyData& heartratebaseline() const;
  ::pulse::cdm::bind::ScalarFrequencyData* release_heartratebaseline();
  ::pulse::cdm::bind::ScalarFrequencyData* mutable_heartratebaseline();
  void set_allocated_heartratebaseline(::pulse::cdm::bind::ScalarFrequencyData* heartratebaseline);
  private:
  const ::pulse::cdm::bind::ScalarFrequencyData& _internal_heartratebaseline() const;
  ::pulse::cdm::bind::ScalarFrequencyData* _internal_mutable_heartratebaseline();
  public:

  // .pulse.cdm.bind.ScalarPressureData MeanArterialPressureBaseline = 16;
  bool has_meanarterialpressurebaseline() const;
  private:
  bool _internal_has_meanarterialpressurebaseline() const;
  public:
  void clear_meanarterialpressurebaseline();
  const ::pulse::cdm::bind::ScalarPressureData& meanarterialpressurebaseline() const;
  ::pulse::cdm::bind::ScalarPressureData* release_meanarterialpressurebaseline();
  ::pulse::cdm::bind::ScalarPressureData* mutable_meanarterialpressurebaseline();
  void set_allocated_meanarterialpressurebaseline(::pulse::cdm::bind::ScalarPressureData* meanarterialpressurebaseline);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_meanarterialpressurebaseline() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_meanarterialpressurebaseline();
  public:

  // .pulse.cdm.bind.ScalarFrequencyData RespirationRateBaseline = 17;
  bool has_respirationratebaseline() const;
  private:
  bool _internal_has_respirationratebaseline() const;
  public:
  void clear_respirationratebaseline();
  const ::pulse::cdm::bind::ScalarFrequencyData& respirationratebaseline() const;
  ::pulse::cdm::bind::ScalarFrequencyData* release_respirationratebaseline();
  ::pulse::cdm::bind::ScalarFrequencyData* mutable_respirationratebaseline();
  void set_allocated_respirationratebaseline(::pulse::cdm::bind::ScalarFrequencyData* respirationratebaseline);
  private:
  const ::pulse::cdm::bind::ScalarFrequencyData& _internal_respirationratebaseline() const;
  ::pulse::cdm::bind::ScalarFrequencyData* _internal_mutable_respirationratebaseline();
  public:

  // .pulse.cdm.bind.ScalarPressureData SystolicArterialPressureBaseline = 18;
  bool has_systolicarterialpressurebaseline() const;
  private:
  bool _internal_has_systolicarterialpressurebaseline() const;
  public:
  void clear_systolicarterialpressurebaseline();
  const ::pulse::cdm::bind::ScalarPressureData& systolicarterialpressurebaseline() const;
  ::pulse::cdm::bind::ScalarPressureData* release_systolicarterialpressurebaseline();
  ::pulse::cdm::bind::ScalarPressureData* mutable_systolicarterialpressurebaseline();
  void set_allocated_systolicarterialpressurebaseline(::pulse::cdm::bind::ScalarPressureData* systolicarterialpressurebaseline);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_systolicarterialpressurebaseline() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_systolicarterialpressurebaseline();
  public:

  // .pulse.cdm.bind.ScalarVolumeData TidalVolumeBaseline = 19;
  bool has_tidalvolumebaseline() const;
  private:
  bool _internal_has_tidalvolumebaseline() const;
  public:
  void clear_tidalvolumebaseline();
  const ::pulse::cdm::bind::ScalarVolumeData& tidalvolumebaseline() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_tidalvolumebaseline();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_tidalvolumebaseline();
  void set_allocated_tidalvolumebaseline(::pulse::cdm::bind::ScalarVolumeData* tidalvolumebaseline);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_tidalvolumebaseline() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_tidalvolumebaseline();
  public:

  // .pulse.cdm.bind.ScalarFrequencyData HeartRateMaximum = 20;
  bool has_heartratemaximum() const;
  private:
  bool _internal_has_heartratemaximum() const;
  public:
  void clear_heartratemaximum();
  const ::pulse::cdm::bind::ScalarFrequencyData& heartratemaximum() const;
  ::pulse::cdm::bind::ScalarFrequencyData* release_heartratemaximum();
  ::pulse::cdm::bind::ScalarFrequencyData* mutable_heartratemaximum();
  void set_allocated_heartratemaximum(::pulse::cdm::bind::ScalarFrequencyData* heartratemaximum);
  private:
  const ::pulse::cdm::bind::ScalarFrequencyData& _internal_heartratemaximum() const;
  ::pulse::cdm::bind::ScalarFrequencyData* _internal_mutable_heartratemaximum();
  public:

  // .pulse.cdm.bind.ScalarFrequencyData HeartRateMinimum = 21;
  bool has_heartrateminimum() const;
  private:
  bool _internal_has_heartrateminimum() const;
  public:
  void clear_heartrateminimum();
  const ::pulse::cdm::bind::ScalarFrequencyData& heartrateminimum() const;
  ::pulse::cdm::bind::ScalarFrequencyData* release_heartrateminimum();
  ::pulse::cdm::bind::ScalarFrequencyData* mutable_heartrateminimum();
  void set_allocated_heartrateminimum(::pulse::cdm::bind::ScalarFrequencyData* heartrateminimum);
  private:
  const ::pulse::cdm::bind::ScalarFrequencyData& _internal_heartrateminimum() const;
  ::pulse::cdm::bind::ScalarFrequencyData* _internal_mutable_heartrateminimum();
  public:

  // .pulse.cdm.bind.ScalarVolumeData ExpiratoryReserveVolume = 22;
  bool has_expiratoryreservevolume() const;
  private:
  bool _internal_has_expiratoryreservevolume() const;
  public:
  void clear_expiratoryreservevolume();
  const ::pulse::cdm::bind::ScalarVolumeData& expiratoryreservevolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_expiratoryreservevolume();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_expiratoryreservevolume();
  void set_allocated_expiratoryreservevolume(::pulse::cdm::bind::ScalarVolumeData* expiratoryreservevolume);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_expiratoryreservevolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_expiratoryreservevolume();
  public:

  // .pulse.cdm.bind.ScalarVolumeData FunctionalResidualCapacity = 23;
  bool has_functionalresidualcapacity() const;
  private:
  bool _internal_has_functionalresidualcapacity() const;
  public:
  void clear_functionalresidualcapacity();
  const ::pulse::cdm::bind::ScalarVolumeData& functionalresidualcapacity() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_functionalresidualcapacity();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_functionalresidualcapacity();
  void set_allocated_functionalresidualcapacity(::pulse::cdm::bind::ScalarVolumeData* functionalresidualcapacity);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_functionalresidualcapacity() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_functionalresidualcapacity();
  public:

  // .pulse.cdm.bind.ScalarVolumeData InspiratoryCapacity = 24;
  bool has_inspiratorycapacity() const;
  private:
  bool _internal_has_inspiratorycapacity() const;
  public:
  void clear_inspiratorycapacity();
  const ::pulse::cdm::bind::ScalarVolumeData& inspiratorycapacity() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_inspiratorycapacity();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_inspiratorycapacity();
  void set_allocated_inspiratorycapacity(::pulse::cdm::bind::ScalarVolumeData* inspiratorycapacity);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_inspiratorycapacity() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_inspiratorycapacity();
  public:

  // .pulse.cdm.bind.ScalarVolumeData InspiratoryReserveVolume = 25;
  bool has_inspiratoryreservevolume() const;
  private:
  bool _internal_has_inspiratoryreservevolume() const;
  public:
  void clear_inspiratoryreservevolume();
  const ::pulse::cdm::bind::ScalarVolumeData& inspiratoryreservevolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_inspiratoryreservevolume();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_inspiratoryreservevolume();
  void set_allocated_inspiratoryreservevolume(::pulse::cdm::bind::ScalarVolumeData* inspiratoryreservevolume);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_inspiratoryreservevolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_inspiratoryreservevolume();
  public:

  // .pulse.cdm.bind.ScalarVolumeData ResidualVolume = 26;
  bool has_residualvolume() const;
  private:
  bool _internal_has_residualvolume() const;
  public:
  void clear_residualvolume();
  const ::pulse::cdm::bind::ScalarVolumeData& residualvolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_residualvolume();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_residualvolume();
  void set_allocated_residualvolume(::pulse::cdm::bind::ScalarVolumeData* residualvolume);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_residualvolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_residualvolume();
  public:

  // .pulse.cdm.bind.ScalarVolumeData TotalLungCapacity = 27;
  bool has_totallungcapacity() const;
  private:
  bool _internal_has_totallungcapacity() const;
  public:
  void clear_totallungcapacity();
  const ::pulse::cdm::bind::ScalarVolumeData& totallungcapacity() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_totallungcapacity();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_totallungcapacity();
  void set_allocated_totallungcapacity(::pulse::cdm::bind::ScalarVolumeData* totallungcapacity);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_totallungcapacity() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_totallungcapacity();
  public:

  // .pulse.cdm.bind.ScalarVolumeData VitalCapacity = 28;
  bool has_vitalcapacity() const;
  private:
  bool _internal_has_vitalcapacity() const;
  public:
  void clear_vitalcapacity();
  const ::pulse::cdm::bind::ScalarVolumeData& vitalcapacity() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_vitalcapacity();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_vitalcapacity();
  void set_allocated_vitalcapacity(::pulse::cdm::bind::ScalarVolumeData* vitalcapacity);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_vitalcapacity() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_vitalcapacity();
  public:

  // .pulse.cdm.bind.ScalarMassData IdealBodyWeight = 29;
  bool has_idealbodyweight() const;
  private:
  bool _internal_has_idealbodyweight() const;
  public:
  void clear_idealbodyweight();
  const ::pulse::cdm::bind::ScalarMassData& idealbodyweight() const;
  ::pulse::cdm::bind::ScalarMassData* release_idealbodyweight();
  ::pulse::cdm::bind::ScalarMassData* mutable_idealbodyweight();
  void set_allocated_idealbodyweight(::pulse::cdm::bind::ScalarMassData* idealbodyweight);
  private:
  const ::pulse::cdm::bind::ScalarMassData& _internal_idealbodyweight() const;
  ::pulse::cdm::bind::ScalarMassData* _internal_mutable_idealbodyweight();
  public:

  // .pulse.cdm.bind.PatientData.eSex Sex = 2;
  void clear_sex();
  ::pulse::cdm::bind::PatientData_eSex sex() const;
  void set_sex(::pulse::cdm::bind::PatientData_eSex value);
  private:
  ::pulse::cdm::bind::PatientData_eSex _internal_sex() const;
  void _internal_set_sex(::pulse::cdm::bind::PatientData_eSex value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.PatientData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::pulse::cdm::bind::ScalarTimeData* age_;
  ::pulse::cdm::bind::ScalarMassData* weight_;
  ::pulse::cdm::bind::ScalarLengthData* height_;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* bodydensity_;
  ::pulse::cdm::bind::Scalar0To1Data* bodyfatfraction_;
  ::pulse::cdm::bind::ScalarMassData* leanbodymass_;
  ::pulse::cdm::bind::ScalarAreaData* alveolisurfacearea_;
  ::pulse::cdm::bind::Scalar0To1Data* rightlungratio_;
  ::pulse::cdm::bind::ScalarAreaData* skinsurfacearea_;
  ::pulse::cdm::bind::ScalarPowerData* basalmetabolicrate_;
  ::pulse::cdm::bind::ScalarVolumeData* bloodvolumebaseline_;
  ::pulse::cdm::bind::ScalarPressureData* diastolicarterialpressurebaseline_;
  ::pulse::cdm::bind::ScalarFrequencyData* heartratebaseline_;
  ::pulse::cdm::bind::ScalarPressureData* meanarterialpressurebaseline_;
  ::pulse::cdm::bind::ScalarFrequencyData* respirationratebaseline_;
  ::pulse::cdm::bind::ScalarPressureData* systolicarterialpressurebaseline_;
  ::pulse::cdm::bind::ScalarVolumeData* tidalvolumebaseline_;
  ::pulse::cdm::bind::ScalarFrequencyData* heartratemaximum_;
  ::pulse::cdm::bind::ScalarFrequencyData* heartrateminimum_;
  ::pulse::cdm::bind::ScalarVolumeData* expiratoryreservevolume_;
  ::pulse::cdm::bind::ScalarVolumeData* functionalresidualcapacity_;
  ::pulse::cdm::bind::ScalarVolumeData* inspiratorycapacity_;
  ::pulse::cdm::bind::ScalarVolumeData* inspiratoryreservevolume_;
  ::pulse::cdm::bind::ScalarVolumeData* residualvolume_;
  ::pulse::cdm::bind::ScalarVolumeData* totallungcapacity_;
  ::pulse::cdm::bind::ScalarVolumeData* vitalcapacity_;
  ::pulse::cdm::bind::ScalarMassData* idealbodyweight_;
  int sex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatient_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PatientData

// string Name = 1;
inline void PatientData::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PatientData::name() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PatientData.Name)
  return _internal_name();
}
inline void PatientData::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.PatientData.Name)
}
inline std::string* PatientData::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PatientData.Name)
  return _internal_mutable_name();
}
inline const std::string& PatientData::_internal_name() const {
  return name_.GetNoArena();
}
inline void PatientData::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PatientData::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.PatientData.Name)
}
inline void PatientData::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.PatientData.Name)
}
inline void PatientData::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.PatientData.Name)
}
inline std::string* PatientData::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PatientData::release_name() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PatientData.Name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PatientData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PatientData.Name)
}

// .pulse.cdm.bind.PatientData.eSex Sex = 2;
inline void PatientData::clear_sex() {
  sex_ = 0;
}
inline ::pulse::cdm::bind::PatientData_eSex PatientData::_internal_sex() const {
  return static_cast< ::pulse::cdm::bind::PatientData_eSex >(sex_);
}
inline ::pulse::cdm::bind::PatientData_eSex PatientData::sex() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PatientData.Sex)
  return _internal_sex();
}
inline void PatientData::_internal_set_sex(::pulse::cdm::bind::PatientData_eSex value) {
  
  sex_ = value;
}
inline void PatientData::set_sex(::pulse::cdm::bind::PatientData_eSex value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.PatientData.Sex)
}

// .pulse.cdm.bind.ScalarTimeData Age = 3;
inline bool PatientData::_internal_has_age() const {
  return this != internal_default_instance() && age_ != nullptr;
}
inline bool PatientData::has_age() const {
  return _internal_has_age();
}
inline const ::pulse::cdm::bind::ScalarTimeData& PatientData::_internal_age() const {
  const ::pulse::cdm::bind::ScalarTimeData* p = age_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarTimeData*>(
      &::pulse::cdm::bind::_ScalarTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarTimeData& PatientData::age() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PatientData.Age)
  return _internal_age();
}
inline ::pulse::cdm::bind::ScalarTimeData* PatientData::release_age() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PatientData.Age)
  
  ::pulse::cdm::bind::ScalarTimeData* temp = age_;
  age_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* PatientData::_internal_mutable_age() {
  
  if (age_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarTimeData>(GetArenaNoVirtual());
    age_ = p;
  }
  return age_;
}
inline ::pulse::cdm::bind::ScalarTimeData* PatientData::mutable_age() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PatientData.Age)
  return _internal_mutable_age();
}
inline void PatientData::set_allocated_age(::pulse::cdm::bind::ScalarTimeData* age) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(age_);
  }
  if (age) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      age = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, age, submessage_arena);
    }
    
  } else {
    
  }
  age_ = age;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PatientData.Age)
}

// .pulse.cdm.bind.ScalarMassData Weight = 4;
inline bool PatientData::_internal_has_weight() const {
  return this != internal_default_instance() && weight_ != nullptr;
}
inline bool PatientData::has_weight() const {
  return _internal_has_weight();
}
inline const ::pulse::cdm::bind::ScalarMassData& PatientData::_internal_weight() const {
  const ::pulse::cdm::bind::ScalarMassData* p = weight_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarMassData*>(
      &::pulse::cdm::bind::_ScalarMassData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassData& PatientData::weight() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PatientData.Weight)
  return _internal_weight();
}
inline ::pulse::cdm::bind::ScalarMassData* PatientData::release_weight() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PatientData.Weight)
  
  ::pulse::cdm::bind::ScalarMassData* temp = weight_;
  weight_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassData* PatientData::_internal_mutable_weight() {
  
  if (weight_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassData>(GetArenaNoVirtual());
    weight_ = p;
  }
  return weight_;
}
inline ::pulse::cdm::bind::ScalarMassData* PatientData::mutable_weight() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PatientData.Weight)
  return _internal_mutable_weight();
}
inline void PatientData::set_allocated_weight(::pulse::cdm::bind::ScalarMassData* weight) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(weight_);
  }
  if (weight) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      weight = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weight, submessage_arena);
    }
    
  } else {
    
  }
  weight_ = weight;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PatientData.Weight)
}

// .pulse.cdm.bind.ScalarLengthData Height = 5;
inline bool PatientData::_internal_has_height() const {
  return this != internal_default_instance() && height_ != nullptr;
}
inline bool PatientData::has_height() const {
  return _internal_has_height();
}
inline const ::pulse::cdm::bind::ScalarLengthData& PatientData::_internal_height() const {
  const ::pulse::cdm::bind::ScalarLengthData* p = height_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarLengthData*>(
      &::pulse::cdm::bind::_ScalarLengthData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarLengthData& PatientData::height() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PatientData.Height)
  return _internal_height();
}
inline ::pulse::cdm::bind::ScalarLengthData* PatientData::release_height() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PatientData.Height)
  
  ::pulse::cdm::bind::ScalarLengthData* temp = height_;
  height_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarLengthData* PatientData::_internal_mutable_height() {
  
  if (height_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarLengthData>(GetArenaNoVirtual());
    height_ = p;
  }
  return height_;
}
inline ::pulse::cdm::bind::ScalarLengthData* PatientData::mutable_height() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PatientData.Height)
  return _internal_mutable_height();
}
inline void PatientData::set_allocated_height(::pulse::cdm::bind::ScalarLengthData* height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(height_);
  }
  if (height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, height, submessage_arena);
    }
    
  } else {
    
  }
  height_ = height;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PatientData.Height)
}

// .pulse.cdm.bind.ScalarMassPerVolumeData BodyDensity = 6;
inline bool PatientData::_internal_has_bodydensity() const {
  return this != internal_default_instance() && bodydensity_ != nullptr;
}
inline bool PatientData::has_bodydensity() const {
  return _internal_has_bodydensity();
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& PatientData::_internal_bodydensity() const {
  const ::pulse::cdm::bind::ScalarMassPerVolumeData* p = bodydensity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerVolumeData*>(
      &::pulse::cdm::bind::_ScalarMassPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& PatientData::bodydensity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PatientData.BodyDensity)
  return _internal_bodydensity();
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* PatientData::release_bodydensity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PatientData.BodyDensity)
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = bodydensity_;
  bodydensity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* PatientData::_internal_mutable_bodydensity() {
  
  if (bodydensity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerVolumeData>(GetArenaNoVirtual());
    bodydensity_ = p;
  }
  return bodydensity_;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* PatientData::mutable_bodydensity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PatientData.BodyDensity)
  return _internal_mutable_bodydensity();
}
inline void PatientData::set_allocated_bodydensity(::pulse::cdm::bind::ScalarMassPerVolumeData* bodydensity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bodydensity_);
  }
  if (bodydensity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bodydensity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bodydensity, submessage_arena);
    }
    
  } else {
    
  }
  bodydensity_ = bodydensity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PatientData.BodyDensity)
}

// .pulse.cdm.bind.Scalar0To1Data BodyFatFraction = 7;
inline bool PatientData::_internal_has_bodyfatfraction() const {
  return this != internal_default_instance() && bodyfatfraction_ != nullptr;
}
inline bool PatientData::has_bodyfatfraction() const {
  return _internal_has_bodyfatfraction();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& PatientData::_internal_bodyfatfraction() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = bodyfatfraction_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data*>(
      &::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& PatientData::bodyfatfraction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PatientData.BodyFatFraction)
  return _internal_bodyfatfraction();
}
inline ::pulse::cdm::bind::Scalar0To1Data* PatientData::release_bodyfatfraction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PatientData.BodyFatFraction)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = bodyfatfraction_;
  bodyfatfraction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* PatientData::_internal_mutable_bodyfatfraction() {
  
  if (bodyfatfraction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArenaNoVirtual());
    bodyfatfraction_ = p;
  }
  return bodyfatfraction_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* PatientData::mutable_bodyfatfraction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PatientData.BodyFatFraction)
  return _internal_mutable_bodyfatfraction();
}
inline void PatientData::set_allocated_bodyfatfraction(::pulse::cdm::bind::Scalar0To1Data* bodyfatfraction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bodyfatfraction_);
  }
  if (bodyfatfraction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bodyfatfraction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bodyfatfraction, submessage_arena);
    }
    
  } else {
    
  }
  bodyfatfraction_ = bodyfatfraction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PatientData.BodyFatFraction)
}

// .pulse.cdm.bind.ScalarMassData LeanBodyMass = 8;
inline bool PatientData::_internal_has_leanbodymass() const {
  return this != internal_default_instance() && leanbodymass_ != nullptr;
}
inline bool PatientData::has_leanbodymass() const {
  return _internal_has_leanbodymass();
}
inline const ::pulse::cdm::bind::ScalarMassData& PatientData::_internal_leanbodymass() const {
  const ::pulse::cdm::bind::ScalarMassData* p = leanbodymass_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarMassData*>(
      &::pulse::cdm::bind::_ScalarMassData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassData& PatientData::leanbodymass() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PatientData.LeanBodyMass)
  return _internal_leanbodymass();
}
inline ::pulse::cdm::bind::ScalarMassData* PatientData::release_leanbodymass() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PatientData.LeanBodyMass)
  
  ::pulse::cdm::bind::ScalarMassData* temp = leanbodymass_;
  leanbodymass_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassData* PatientData::_internal_mutable_leanbodymass() {
  
  if (leanbodymass_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassData>(GetArenaNoVirtual());
    leanbodymass_ = p;
  }
  return leanbodymass_;
}
inline ::pulse::cdm::bind::ScalarMassData* PatientData::mutable_leanbodymass() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PatientData.LeanBodyMass)
  return _internal_mutable_leanbodymass();
}
inline void PatientData::set_allocated_leanbodymass(::pulse::cdm::bind::ScalarMassData* leanbodymass) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leanbodymass_);
  }
  if (leanbodymass) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      leanbodymass = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leanbodymass, submessage_arena);
    }
    
  } else {
    
  }
  leanbodymass_ = leanbodymass;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PatientData.LeanBodyMass)
}

// .pulse.cdm.bind.ScalarMassData IdealBodyWeight = 29;
inline bool PatientData::_internal_has_idealbodyweight() const {
  return this != internal_default_instance() && idealbodyweight_ != nullptr;
}
inline bool PatientData::has_idealbodyweight() const {
  return _internal_has_idealbodyweight();
}
inline const ::pulse::cdm::bind::ScalarMassData& PatientData::_internal_idealbodyweight() const {
  const ::pulse::cdm::bind::ScalarMassData* p = idealbodyweight_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarMassData*>(
      &::pulse::cdm::bind::_ScalarMassData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassData& PatientData::idealbodyweight() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PatientData.IdealBodyWeight)
  return _internal_idealbodyweight();
}
inline ::pulse::cdm::bind::ScalarMassData* PatientData::release_idealbodyweight() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PatientData.IdealBodyWeight)
  
  ::pulse::cdm::bind::ScalarMassData* temp = idealbodyweight_;
  idealbodyweight_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassData* PatientData::_internal_mutable_idealbodyweight() {
  
  if (idealbodyweight_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassData>(GetArenaNoVirtual());
    idealbodyweight_ = p;
  }
  return idealbodyweight_;
}
inline ::pulse::cdm::bind::ScalarMassData* PatientData::mutable_idealbodyweight() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PatientData.IdealBodyWeight)
  return _internal_mutable_idealbodyweight();
}
inline void PatientData::set_allocated_idealbodyweight(::pulse::cdm::bind::ScalarMassData* idealbodyweight) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(idealbodyweight_);
  }
  if (idealbodyweight) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      idealbodyweight = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, idealbodyweight, submessage_arena);
    }
    
  } else {
    
  }
  idealbodyweight_ = idealbodyweight;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PatientData.IdealBodyWeight)
}

// .pulse.cdm.bind.ScalarAreaData AlveoliSurfaceArea = 9;
inline bool PatientData::_internal_has_alveolisurfacearea() const {
  return this != internal_default_instance() && alveolisurfacearea_ != nullptr;
}
inline bool PatientData::has_alveolisurfacearea() const {
  return _internal_has_alveolisurfacearea();
}
inline const ::pulse::cdm::bind::ScalarAreaData& PatientData::_internal_alveolisurfacearea() const {
  const ::pulse::cdm::bind::ScalarAreaData* p = alveolisurfacearea_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarAreaData*>(
      &::pulse::cdm::bind::_ScalarAreaData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarAreaData& PatientData::alveolisurfacearea() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PatientData.AlveoliSurfaceArea)
  return _internal_alveolisurfacearea();
}
inline ::pulse::cdm::bind::ScalarAreaData* PatientData::release_alveolisurfacearea() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PatientData.AlveoliSurfaceArea)
  
  ::pulse::cdm::bind::ScalarAreaData* temp = alveolisurfacearea_;
  alveolisurfacearea_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarAreaData* PatientData::_internal_mutable_alveolisurfacearea() {
  
  if (alveolisurfacearea_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarAreaData>(GetArenaNoVirtual());
    alveolisurfacearea_ = p;
  }
  return alveolisurfacearea_;
}
inline ::pulse::cdm::bind::ScalarAreaData* PatientData::mutable_alveolisurfacearea() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PatientData.AlveoliSurfaceArea)
  return _internal_mutable_alveolisurfacearea();
}
inline void PatientData::set_allocated_alveolisurfacearea(::pulse::cdm::bind::ScalarAreaData* alveolisurfacearea) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(alveolisurfacearea_);
  }
  if (alveolisurfacearea) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      alveolisurfacearea = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alveolisurfacearea, submessage_arena);
    }
    
  } else {
    
  }
  alveolisurfacearea_ = alveolisurfacearea;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PatientData.AlveoliSurfaceArea)
}

// .pulse.cdm.bind.Scalar0To1Data RightLungRatio = 10;
inline bool PatientData::_internal_has_rightlungratio() const {
  return this != internal_default_instance() && rightlungratio_ != nullptr;
}
inline bool PatientData::has_rightlungratio() const {
  return _internal_has_rightlungratio();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& PatientData::_internal_rightlungratio() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = rightlungratio_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data*>(
      &::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& PatientData::rightlungratio() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PatientData.RightLungRatio)
  return _internal_rightlungratio();
}
inline ::pulse::cdm::bind::Scalar0To1Data* PatientData::release_rightlungratio() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PatientData.RightLungRatio)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = rightlungratio_;
  rightlungratio_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* PatientData::_internal_mutable_rightlungratio() {
  
  if (rightlungratio_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArenaNoVirtual());
    rightlungratio_ = p;
  }
  return rightlungratio_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* PatientData::mutable_rightlungratio() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PatientData.RightLungRatio)
  return _internal_mutable_rightlungratio();
}
inline void PatientData::set_allocated_rightlungratio(::pulse::cdm::bind::Scalar0To1Data* rightlungratio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightlungratio_);
  }
  if (rightlungratio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rightlungratio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightlungratio, submessage_arena);
    }
    
  } else {
    
  }
  rightlungratio_ = rightlungratio;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PatientData.RightLungRatio)
}

// .pulse.cdm.bind.ScalarAreaData SkinSurfaceArea = 11;
inline bool PatientData::_internal_has_skinsurfacearea() const {
  return this != internal_default_instance() && skinsurfacearea_ != nullptr;
}
inline bool PatientData::has_skinsurfacearea() const {
  return _internal_has_skinsurfacearea();
}
inline const ::pulse::cdm::bind::ScalarAreaData& PatientData::_internal_skinsurfacearea() const {
  const ::pulse::cdm::bind::ScalarAreaData* p = skinsurfacearea_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarAreaData*>(
      &::pulse::cdm::bind::_ScalarAreaData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarAreaData& PatientData::skinsurfacearea() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PatientData.SkinSurfaceArea)
  return _internal_skinsurfacearea();
}
inline ::pulse::cdm::bind::ScalarAreaData* PatientData::release_skinsurfacearea() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PatientData.SkinSurfaceArea)
  
  ::pulse::cdm::bind::ScalarAreaData* temp = skinsurfacearea_;
  skinsurfacearea_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarAreaData* PatientData::_internal_mutable_skinsurfacearea() {
  
  if (skinsurfacearea_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarAreaData>(GetArenaNoVirtual());
    skinsurfacearea_ = p;
  }
  return skinsurfacearea_;
}
inline ::pulse::cdm::bind::ScalarAreaData* PatientData::mutable_skinsurfacearea() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PatientData.SkinSurfaceArea)
  return _internal_mutable_skinsurfacearea();
}
inline void PatientData::set_allocated_skinsurfacearea(::pulse::cdm::bind::ScalarAreaData* skinsurfacearea) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(skinsurfacearea_);
  }
  if (skinsurfacearea) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      skinsurfacearea = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, skinsurfacearea, submessage_arena);
    }
    
  } else {
    
  }
  skinsurfacearea_ = skinsurfacearea;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PatientData.SkinSurfaceArea)
}

// .pulse.cdm.bind.ScalarPowerData BasalMetabolicRate = 12;
inline bool PatientData::_internal_has_basalmetabolicrate() const {
  return this != internal_default_instance() && basalmetabolicrate_ != nullptr;
}
inline bool PatientData::has_basalmetabolicrate() const {
  return _internal_has_basalmetabolicrate();
}
inline const ::pulse::cdm::bind::ScalarPowerData& PatientData::_internal_basalmetabolicrate() const {
  const ::pulse::cdm::bind::ScalarPowerData* p = basalmetabolicrate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarPowerData*>(
      &::pulse::cdm::bind::_ScalarPowerData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPowerData& PatientData::basalmetabolicrate() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PatientData.BasalMetabolicRate)
  return _internal_basalmetabolicrate();
}
inline ::pulse::cdm::bind::ScalarPowerData* PatientData::release_basalmetabolicrate() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PatientData.BasalMetabolicRate)
  
  ::pulse::cdm::bind::ScalarPowerData* temp = basalmetabolicrate_;
  basalmetabolicrate_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPowerData* PatientData::_internal_mutable_basalmetabolicrate() {
  
  if (basalmetabolicrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPowerData>(GetArenaNoVirtual());
    basalmetabolicrate_ = p;
  }
  return basalmetabolicrate_;
}
inline ::pulse::cdm::bind::ScalarPowerData* PatientData::mutable_basalmetabolicrate() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PatientData.BasalMetabolicRate)
  return _internal_mutable_basalmetabolicrate();
}
inline void PatientData::set_allocated_basalmetabolicrate(::pulse::cdm::bind::ScalarPowerData* basalmetabolicrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(basalmetabolicrate_);
  }
  if (basalmetabolicrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      basalmetabolicrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basalmetabolicrate, submessage_arena);
    }
    
  } else {
    
  }
  basalmetabolicrate_ = basalmetabolicrate;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PatientData.BasalMetabolicRate)
}

// .pulse.cdm.bind.ScalarVolumeData BloodVolumeBaseline = 13;
inline bool PatientData::_internal_has_bloodvolumebaseline() const {
  return this != internal_default_instance() && bloodvolumebaseline_ != nullptr;
}
inline bool PatientData::has_bloodvolumebaseline() const {
  return _internal_has_bloodvolumebaseline();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& PatientData::_internal_bloodvolumebaseline() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = bloodvolumebaseline_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData*>(
      &::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& PatientData::bloodvolumebaseline() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PatientData.BloodVolumeBaseline)
  return _internal_bloodvolumebaseline();
}
inline ::pulse::cdm::bind::ScalarVolumeData* PatientData::release_bloodvolumebaseline() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PatientData.BloodVolumeBaseline)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = bloodvolumebaseline_;
  bloodvolumebaseline_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PatientData::_internal_mutable_bloodvolumebaseline() {
  
  if (bloodvolumebaseline_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArenaNoVirtual());
    bloodvolumebaseline_ = p;
  }
  return bloodvolumebaseline_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PatientData::mutable_bloodvolumebaseline() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PatientData.BloodVolumeBaseline)
  return _internal_mutable_bloodvolumebaseline();
}
inline void PatientData::set_allocated_bloodvolumebaseline(::pulse::cdm::bind::ScalarVolumeData* bloodvolumebaseline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bloodvolumebaseline_);
  }
  if (bloodvolumebaseline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bloodvolumebaseline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bloodvolumebaseline, submessage_arena);
    }
    
  } else {
    
  }
  bloodvolumebaseline_ = bloodvolumebaseline;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PatientData.BloodVolumeBaseline)
}

// .pulse.cdm.bind.ScalarPressureData DiastolicArterialPressureBaseline = 14;
inline bool PatientData::_internal_has_diastolicarterialpressurebaseline() const {
  return this != internal_default_instance() && diastolicarterialpressurebaseline_ != nullptr;
}
inline bool PatientData::has_diastolicarterialpressurebaseline() const {
  return _internal_has_diastolicarterialpressurebaseline();
}
inline const ::pulse::cdm::bind::ScalarPressureData& PatientData::_internal_diastolicarterialpressurebaseline() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = diastolicarterialpressurebaseline_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData*>(
      &::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& PatientData::diastolicarterialpressurebaseline() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PatientData.DiastolicArterialPressureBaseline)
  return _internal_diastolicarterialpressurebaseline();
}
inline ::pulse::cdm::bind::ScalarPressureData* PatientData::release_diastolicarterialpressurebaseline() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PatientData.DiastolicArterialPressureBaseline)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = diastolicarterialpressurebaseline_;
  diastolicarterialpressurebaseline_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* PatientData::_internal_mutable_diastolicarterialpressurebaseline() {
  
  if (diastolicarterialpressurebaseline_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArenaNoVirtual());
    diastolicarterialpressurebaseline_ = p;
  }
  return diastolicarterialpressurebaseline_;
}
inline ::pulse::cdm::bind::ScalarPressureData* PatientData::mutable_diastolicarterialpressurebaseline() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PatientData.DiastolicArterialPressureBaseline)
  return _internal_mutable_diastolicarterialpressurebaseline();
}
inline void PatientData::set_allocated_diastolicarterialpressurebaseline(::pulse::cdm::bind::ScalarPressureData* diastolicarterialpressurebaseline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(diastolicarterialpressurebaseline_);
  }
  if (diastolicarterialpressurebaseline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      diastolicarterialpressurebaseline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diastolicarterialpressurebaseline, submessage_arena);
    }
    
  } else {
    
  }
  diastolicarterialpressurebaseline_ = diastolicarterialpressurebaseline;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PatientData.DiastolicArterialPressureBaseline)
}

// .pulse.cdm.bind.ScalarFrequencyData HeartRateBaseline = 15;
inline bool PatientData::_internal_has_heartratebaseline() const {
  return this != internal_default_instance() && heartratebaseline_ != nullptr;
}
inline bool PatientData::has_heartratebaseline() const {
  return _internal_has_heartratebaseline();
}
inline const ::pulse::cdm::bind::ScalarFrequencyData& PatientData::_internal_heartratebaseline() const {
  const ::pulse::cdm::bind::ScalarFrequencyData* p = heartratebaseline_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarFrequencyData*>(
      &::pulse::cdm::bind::_ScalarFrequencyData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarFrequencyData& PatientData::heartratebaseline() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PatientData.HeartRateBaseline)
  return _internal_heartratebaseline();
}
inline ::pulse::cdm::bind::ScalarFrequencyData* PatientData::release_heartratebaseline() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PatientData.HeartRateBaseline)
  
  ::pulse::cdm::bind::ScalarFrequencyData* temp = heartratebaseline_;
  heartratebaseline_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarFrequencyData* PatientData::_internal_mutable_heartratebaseline() {
  
  if (heartratebaseline_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarFrequencyData>(GetArenaNoVirtual());
    heartratebaseline_ = p;
  }
  return heartratebaseline_;
}
inline ::pulse::cdm::bind::ScalarFrequencyData* PatientData::mutable_heartratebaseline() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PatientData.HeartRateBaseline)
  return _internal_mutable_heartratebaseline();
}
inline void PatientData::set_allocated_heartratebaseline(::pulse::cdm::bind::ScalarFrequencyData* heartratebaseline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(heartratebaseline_);
  }
  if (heartratebaseline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      heartratebaseline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heartratebaseline, submessage_arena);
    }
    
  } else {
    
  }
  heartratebaseline_ = heartratebaseline;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PatientData.HeartRateBaseline)
}

// .pulse.cdm.bind.ScalarPressureData MeanArterialPressureBaseline = 16;
inline bool PatientData::_internal_has_meanarterialpressurebaseline() const {
  return this != internal_default_instance() && meanarterialpressurebaseline_ != nullptr;
}
inline bool PatientData::has_meanarterialpressurebaseline() const {
  return _internal_has_meanarterialpressurebaseline();
}
inline const ::pulse::cdm::bind::ScalarPressureData& PatientData::_internal_meanarterialpressurebaseline() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = meanarterialpressurebaseline_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData*>(
      &::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& PatientData::meanarterialpressurebaseline() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PatientData.MeanArterialPressureBaseline)
  return _internal_meanarterialpressurebaseline();
}
inline ::pulse::cdm::bind::ScalarPressureData* PatientData::release_meanarterialpressurebaseline() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PatientData.MeanArterialPressureBaseline)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = meanarterialpressurebaseline_;
  meanarterialpressurebaseline_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* PatientData::_internal_mutable_meanarterialpressurebaseline() {
  
  if (meanarterialpressurebaseline_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArenaNoVirtual());
    meanarterialpressurebaseline_ = p;
  }
  return meanarterialpressurebaseline_;
}
inline ::pulse::cdm::bind::ScalarPressureData* PatientData::mutable_meanarterialpressurebaseline() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PatientData.MeanArterialPressureBaseline)
  return _internal_mutable_meanarterialpressurebaseline();
}
inline void PatientData::set_allocated_meanarterialpressurebaseline(::pulse::cdm::bind::ScalarPressureData* meanarterialpressurebaseline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meanarterialpressurebaseline_);
  }
  if (meanarterialpressurebaseline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      meanarterialpressurebaseline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meanarterialpressurebaseline, submessage_arena);
    }
    
  } else {
    
  }
  meanarterialpressurebaseline_ = meanarterialpressurebaseline;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PatientData.MeanArterialPressureBaseline)
}

// .pulse.cdm.bind.ScalarFrequencyData RespirationRateBaseline = 17;
inline bool PatientData::_internal_has_respirationratebaseline() const {
  return this != internal_default_instance() && respirationratebaseline_ != nullptr;
}
inline bool PatientData::has_respirationratebaseline() const {
  return _internal_has_respirationratebaseline();
}
inline const ::pulse::cdm::bind::ScalarFrequencyData& PatientData::_internal_respirationratebaseline() const {
  const ::pulse::cdm::bind::ScalarFrequencyData* p = respirationratebaseline_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarFrequencyData*>(
      &::pulse::cdm::bind::_ScalarFrequencyData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarFrequencyData& PatientData::respirationratebaseline() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PatientData.RespirationRateBaseline)
  return _internal_respirationratebaseline();
}
inline ::pulse::cdm::bind::ScalarFrequencyData* PatientData::release_respirationratebaseline() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PatientData.RespirationRateBaseline)
  
  ::pulse::cdm::bind::ScalarFrequencyData* temp = respirationratebaseline_;
  respirationratebaseline_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarFrequencyData* PatientData::_internal_mutable_respirationratebaseline() {
  
  if (respirationratebaseline_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarFrequencyData>(GetArenaNoVirtual());
    respirationratebaseline_ = p;
  }
  return respirationratebaseline_;
}
inline ::pulse::cdm::bind::ScalarFrequencyData* PatientData::mutable_respirationratebaseline() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PatientData.RespirationRateBaseline)
  return _internal_mutable_respirationratebaseline();
}
inline void PatientData::set_allocated_respirationratebaseline(::pulse::cdm::bind::ScalarFrequencyData* respirationratebaseline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(respirationratebaseline_);
  }
  if (respirationratebaseline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      respirationratebaseline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, respirationratebaseline, submessage_arena);
    }
    
  } else {
    
  }
  respirationratebaseline_ = respirationratebaseline;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PatientData.RespirationRateBaseline)
}

// .pulse.cdm.bind.ScalarPressureData SystolicArterialPressureBaseline = 18;
inline bool PatientData::_internal_has_systolicarterialpressurebaseline() const {
  return this != internal_default_instance() && systolicarterialpressurebaseline_ != nullptr;
}
inline bool PatientData::has_systolicarterialpressurebaseline() const {
  return _internal_has_systolicarterialpressurebaseline();
}
inline const ::pulse::cdm::bind::ScalarPressureData& PatientData::_internal_systolicarterialpressurebaseline() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = systolicarterialpressurebaseline_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData*>(
      &::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& PatientData::systolicarterialpressurebaseline() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PatientData.SystolicArterialPressureBaseline)
  return _internal_systolicarterialpressurebaseline();
}
inline ::pulse::cdm::bind::ScalarPressureData* PatientData::release_systolicarterialpressurebaseline() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PatientData.SystolicArterialPressureBaseline)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = systolicarterialpressurebaseline_;
  systolicarterialpressurebaseline_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* PatientData::_internal_mutable_systolicarterialpressurebaseline() {
  
  if (systolicarterialpressurebaseline_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArenaNoVirtual());
    systolicarterialpressurebaseline_ = p;
  }
  return systolicarterialpressurebaseline_;
}
inline ::pulse::cdm::bind::ScalarPressureData* PatientData::mutable_systolicarterialpressurebaseline() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PatientData.SystolicArterialPressureBaseline)
  return _internal_mutable_systolicarterialpressurebaseline();
}
inline void PatientData::set_allocated_systolicarterialpressurebaseline(::pulse::cdm::bind::ScalarPressureData* systolicarterialpressurebaseline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(systolicarterialpressurebaseline_);
  }
  if (systolicarterialpressurebaseline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      systolicarterialpressurebaseline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, systolicarterialpressurebaseline, submessage_arena);
    }
    
  } else {
    
  }
  systolicarterialpressurebaseline_ = systolicarterialpressurebaseline;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PatientData.SystolicArterialPressureBaseline)
}

// .pulse.cdm.bind.ScalarVolumeData TidalVolumeBaseline = 19;
inline bool PatientData::_internal_has_tidalvolumebaseline() const {
  return this != internal_default_instance() && tidalvolumebaseline_ != nullptr;
}
inline bool PatientData::has_tidalvolumebaseline() const {
  return _internal_has_tidalvolumebaseline();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& PatientData::_internal_tidalvolumebaseline() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = tidalvolumebaseline_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData*>(
      &::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& PatientData::tidalvolumebaseline() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PatientData.TidalVolumeBaseline)
  return _internal_tidalvolumebaseline();
}
inline ::pulse::cdm::bind::ScalarVolumeData* PatientData::release_tidalvolumebaseline() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PatientData.TidalVolumeBaseline)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = tidalvolumebaseline_;
  tidalvolumebaseline_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PatientData::_internal_mutable_tidalvolumebaseline() {
  
  if (tidalvolumebaseline_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArenaNoVirtual());
    tidalvolumebaseline_ = p;
  }
  return tidalvolumebaseline_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PatientData::mutable_tidalvolumebaseline() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PatientData.TidalVolumeBaseline)
  return _internal_mutable_tidalvolumebaseline();
}
inline void PatientData::set_allocated_tidalvolumebaseline(::pulse::cdm::bind::ScalarVolumeData* tidalvolumebaseline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tidalvolumebaseline_);
  }
  if (tidalvolumebaseline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tidalvolumebaseline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tidalvolumebaseline, submessage_arena);
    }
    
  } else {
    
  }
  tidalvolumebaseline_ = tidalvolumebaseline;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PatientData.TidalVolumeBaseline)
}

// .pulse.cdm.bind.ScalarFrequencyData HeartRateMaximum = 20;
inline bool PatientData::_internal_has_heartratemaximum() const {
  return this != internal_default_instance() && heartratemaximum_ != nullptr;
}
inline bool PatientData::has_heartratemaximum() const {
  return _internal_has_heartratemaximum();
}
inline const ::pulse::cdm::bind::ScalarFrequencyData& PatientData::_internal_heartratemaximum() const {
  const ::pulse::cdm::bind::ScalarFrequencyData* p = heartratemaximum_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarFrequencyData*>(
      &::pulse::cdm::bind::_ScalarFrequencyData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarFrequencyData& PatientData::heartratemaximum() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PatientData.HeartRateMaximum)
  return _internal_heartratemaximum();
}
inline ::pulse::cdm::bind::ScalarFrequencyData* PatientData::release_heartratemaximum() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PatientData.HeartRateMaximum)
  
  ::pulse::cdm::bind::ScalarFrequencyData* temp = heartratemaximum_;
  heartratemaximum_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarFrequencyData* PatientData::_internal_mutable_heartratemaximum() {
  
  if (heartratemaximum_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarFrequencyData>(GetArenaNoVirtual());
    heartratemaximum_ = p;
  }
  return heartratemaximum_;
}
inline ::pulse::cdm::bind::ScalarFrequencyData* PatientData::mutable_heartratemaximum() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PatientData.HeartRateMaximum)
  return _internal_mutable_heartratemaximum();
}
inline void PatientData::set_allocated_heartratemaximum(::pulse::cdm::bind::ScalarFrequencyData* heartratemaximum) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(heartratemaximum_);
  }
  if (heartratemaximum) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      heartratemaximum = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heartratemaximum, submessage_arena);
    }
    
  } else {
    
  }
  heartratemaximum_ = heartratemaximum;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PatientData.HeartRateMaximum)
}

// .pulse.cdm.bind.ScalarFrequencyData HeartRateMinimum = 21;
inline bool PatientData::_internal_has_heartrateminimum() const {
  return this != internal_default_instance() && heartrateminimum_ != nullptr;
}
inline bool PatientData::has_heartrateminimum() const {
  return _internal_has_heartrateminimum();
}
inline const ::pulse::cdm::bind::ScalarFrequencyData& PatientData::_internal_heartrateminimum() const {
  const ::pulse::cdm::bind::ScalarFrequencyData* p = heartrateminimum_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarFrequencyData*>(
      &::pulse::cdm::bind::_ScalarFrequencyData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarFrequencyData& PatientData::heartrateminimum() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PatientData.HeartRateMinimum)
  return _internal_heartrateminimum();
}
inline ::pulse::cdm::bind::ScalarFrequencyData* PatientData::release_heartrateminimum() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PatientData.HeartRateMinimum)
  
  ::pulse::cdm::bind::ScalarFrequencyData* temp = heartrateminimum_;
  heartrateminimum_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarFrequencyData* PatientData::_internal_mutable_heartrateminimum() {
  
  if (heartrateminimum_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarFrequencyData>(GetArenaNoVirtual());
    heartrateminimum_ = p;
  }
  return heartrateminimum_;
}
inline ::pulse::cdm::bind::ScalarFrequencyData* PatientData::mutable_heartrateminimum() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PatientData.HeartRateMinimum)
  return _internal_mutable_heartrateminimum();
}
inline void PatientData::set_allocated_heartrateminimum(::pulse::cdm::bind::ScalarFrequencyData* heartrateminimum) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(heartrateminimum_);
  }
  if (heartrateminimum) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      heartrateminimum = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heartrateminimum, submessage_arena);
    }
    
  } else {
    
  }
  heartrateminimum_ = heartrateminimum;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PatientData.HeartRateMinimum)
}

// .pulse.cdm.bind.ScalarVolumeData ExpiratoryReserveVolume = 22;
inline bool PatientData::_internal_has_expiratoryreservevolume() const {
  return this != internal_default_instance() && expiratoryreservevolume_ != nullptr;
}
inline bool PatientData::has_expiratoryreservevolume() const {
  return _internal_has_expiratoryreservevolume();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& PatientData::_internal_expiratoryreservevolume() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = expiratoryreservevolume_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData*>(
      &::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& PatientData::expiratoryreservevolume() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PatientData.ExpiratoryReserveVolume)
  return _internal_expiratoryreservevolume();
}
inline ::pulse::cdm::bind::ScalarVolumeData* PatientData::release_expiratoryreservevolume() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PatientData.ExpiratoryReserveVolume)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = expiratoryreservevolume_;
  expiratoryreservevolume_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PatientData::_internal_mutable_expiratoryreservevolume() {
  
  if (expiratoryreservevolume_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArenaNoVirtual());
    expiratoryreservevolume_ = p;
  }
  return expiratoryreservevolume_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PatientData::mutable_expiratoryreservevolume() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PatientData.ExpiratoryReserveVolume)
  return _internal_mutable_expiratoryreservevolume();
}
inline void PatientData::set_allocated_expiratoryreservevolume(::pulse::cdm::bind::ScalarVolumeData* expiratoryreservevolume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiratoryreservevolume_);
  }
  if (expiratoryreservevolume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      expiratoryreservevolume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expiratoryreservevolume, submessage_arena);
    }
    
  } else {
    
  }
  expiratoryreservevolume_ = expiratoryreservevolume;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PatientData.ExpiratoryReserveVolume)
}

// .pulse.cdm.bind.ScalarVolumeData FunctionalResidualCapacity = 23;
inline bool PatientData::_internal_has_functionalresidualcapacity() const {
  return this != internal_default_instance() && functionalresidualcapacity_ != nullptr;
}
inline bool PatientData::has_functionalresidualcapacity() const {
  return _internal_has_functionalresidualcapacity();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& PatientData::_internal_functionalresidualcapacity() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = functionalresidualcapacity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData*>(
      &::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& PatientData::functionalresidualcapacity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PatientData.FunctionalResidualCapacity)
  return _internal_functionalresidualcapacity();
}
inline ::pulse::cdm::bind::ScalarVolumeData* PatientData::release_functionalresidualcapacity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PatientData.FunctionalResidualCapacity)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = functionalresidualcapacity_;
  functionalresidualcapacity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PatientData::_internal_mutable_functionalresidualcapacity() {
  
  if (functionalresidualcapacity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArenaNoVirtual());
    functionalresidualcapacity_ = p;
  }
  return functionalresidualcapacity_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PatientData::mutable_functionalresidualcapacity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PatientData.FunctionalResidualCapacity)
  return _internal_mutable_functionalresidualcapacity();
}
inline void PatientData::set_allocated_functionalresidualcapacity(::pulse::cdm::bind::ScalarVolumeData* functionalresidualcapacity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(functionalresidualcapacity_);
  }
  if (functionalresidualcapacity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      functionalresidualcapacity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, functionalresidualcapacity, submessage_arena);
    }
    
  } else {
    
  }
  functionalresidualcapacity_ = functionalresidualcapacity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PatientData.FunctionalResidualCapacity)
}

// .pulse.cdm.bind.ScalarVolumeData InspiratoryCapacity = 24;
inline bool PatientData::_internal_has_inspiratorycapacity() const {
  return this != internal_default_instance() && inspiratorycapacity_ != nullptr;
}
inline bool PatientData::has_inspiratorycapacity() const {
  return _internal_has_inspiratorycapacity();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& PatientData::_internal_inspiratorycapacity() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = inspiratorycapacity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData*>(
      &::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& PatientData::inspiratorycapacity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PatientData.InspiratoryCapacity)
  return _internal_inspiratorycapacity();
}
inline ::pulse::cdm::bind::ScalarVolumeData* PatientData::release_inspiratorycapacity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PatientData.InspiratoryCapacity)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = inspiratorycapacity_;
  inspiratorycapacity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PatientData::_internal_mutable_inspiratorycapacity() {
  
  if (inspiratorycapacity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArenaNoVirtual());
    inspiratorycapacity_ = p;
  }
  return inspiratorycapacity_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PatientData::mutable_inspiratorycapacity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PatientData.InspiratoryCapacity)
  return _internal_mutable_inspiratorycapacity();
}
inline void PatientData::set_allocated_inspiratorycapacity(::pulse::cdm::bind::ScalarVolumeData* inspiratorycapacity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inspiratorycapacity_);
  }
  if (inspiratorycapacity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      inspiratorycapacity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inspiratorycapacity, submessage_arena);
    }
    
  } else {
    
  }
  inspiratorycapacity_ = inspiratorycapacity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PatientData.InspiratoryCapacity)
}

// .pulse.cdm.bind.ScalarVolumeData InspiratoryReserveVolume = 25;
inline bool PatientData::_internal_has_inspiratoryreservevolume() const {
  return this != internal_default_instance() && inspiratoryreservevolume_ != nullptr;
}
inline bool PatientData::has_inspiratoryreservevolume() const {
  return _internal_has_inspiratoryreservevolume();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& PatientData::_internal_inspiratoryreservevolume() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = inspiratoryreservevolume_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData*>(
      &::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& PatientData::inspiratoryreservevolume() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PatientData.InspiratoryReserveVolume)
  return _internal_inspiratoryreservevolume();
}
inline ::pulse::cdm::bind::ScalarVolumeData* PatientData::release_inspiratoryreservevolume() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PatientData.InspiratoryReserveVolume)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = inspiratoryreservevolume_;
  inspiratoryreservevolume_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PatientData::_internal_mutable_inspiratoryreservevolume() {
  
  if (inspiratoryreservevolume_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArenaNoVirtual());
    inspiratoryreservevolume_ = p;
  }
  return inspiratoryreservevolume_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PatientData::mutable_inspiratoryreservevolume() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PatientData.InspiratoryReserveVolume)
  return _internal_mutable_inspiratoryreservevolume();
}
inline void PatientData::set_allocated_inspiratoryreservevolume(::pulse::cdm::bind::ScalarVolumeData* inspiratoryreservevolume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inspiratoryreservevolume_);
  }
  if (inspiratoryreservevolume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      inspiratoryreservevolume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inspiratoryreservevolume, submessage_arena);
    }
    
  } else {
    
  }
  inspiratoryreservevolume_ = inspiratoryreservevolume;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PatientData.InspiratoryReserveVolume)
}

// .pulse.cdm.bind.ScalarVolumeData ResidualVolume = 26;
inline bool PatientData::_internal_has_residualvolume() const {
  return this != internal_default_instance() && residualvolume_ != nullptr;
}
inline bool PatientData::has_residualvolume() const {
  return _internal_has_residualvolume();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& PatientData::_internal_residualvolume() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = residualvolume_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData*>(
      &::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& PatientData::residualvolume() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PatientData.ResidualVolume)
  return _internal_residualvolume();
}
inline ::pulse::cdm::bind::ScalarVolumeData* PatientData::release_residualvolume() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PatientData.ResidualVolume)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = residualvolume_;
  residualvolume_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PatientData::_internal_mutable_residualvolume() {
  
  if (residualvolume_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArenaNoVirtual());
    residualvolume_ = p;
  }
  return residualvolume_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PatientData::mutable_residualvolume() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PatientData.ResidualVolume)
  return _internal_mutable_residualvolume();
}
inline void PatientData::set_allocated_residualvolume(::pulse::cdm::bind::ScalarVolumeData* residualvolume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(residualvolume_);
  }
  if (residualvolume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      residualvolume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, residualvolume, submessage_arena);
    }
    
  } else {
    
  }
  residualvolume_ = residualvolume;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PatientData.ResidualVolume)
}

// .pulse.cdm.bind.ScalarVolumeData TotalLungCapacity = 27;
inline bool PatientData::_internal_has_totallungcapacity() const {
  return this != internal_default_instance() && totallungcapacity_ != nullptr;
}
inline bool PatientData::has_totallungcapacity() const {
  return _internal_has_totallungcapacity();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& PatientData::_internal_totallungcapacity() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = totallungcapacity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData*>(
      &::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& PatientData::totallungcapacity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PatientData.TotalLungCapacity)
  return _internal_totallungcapacity();
}
inline ::pulse::cdm::bind::ScalarVolumeData* PatientData::release_totallungcapacity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PatientData.TotalLungCapacity)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = totallungcapacity_;
  totallungcapacity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PatientData::_internal_mutable_totallungcapacity() {
  
  if (totallungcapacity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArenaNoVirtual());
    totallungcapacity_ = p;
  }
  return totallungcapacity_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PatientData::mutable_totallungcapacity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PatientData.TotalLungCapacity)
  return _internal_mutable_totallungcapacity();
}
inline void PatientData::set_allocated_totallungcapacity(::pulse::cdm::bind::ScalarVolumeData* totallungcapacity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(totallungcapacity_);
  }
  if (totallungcapacity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      totallungcapacity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, totallungcapacity, submessage_arena);
    }
    
  } else {
    
  }
  totallungcapacity_ = totallungcapacity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PatientData.TotalLungCapacity)
}

// .pulse.cdm.bind.ScalarVolumeData VitalCapacity = 28;
inline bool PatientData::_internal_has_vitalcapacity() const {
  return this != internal_default_instance() && vitalcapacity_ != nullptr;
}
inline bool PatientData::has_vitalcapacity() const {
  return _internal_has_vitalcapacity();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& PatientData::_internal_vitalcapacity() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = vitalcapacity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData*>(
      &::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& PatientData::vitalcapacity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PatientData.VitalCapacity)
  return _internal_vitalcapacity();
}
inline ::pulse::cdm::bind::ScalarVolumeData* PatientData::release_vitalcapacity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PatientData.VitalCapacity)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = vitalcapacity_;
  vitalcapacity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PatientData::_internal_mutable_vitalcapacity() {
  
  if (vitalcapacity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArenaNoVirtual());
    vitalcapacity_ = p;
  }
  return vitalcapacity_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PatientData::mutable_vitalcapacity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PatientData.VitalCapacity)
  return _internal_mutable_vitalcapacity();
}
inline void PatientData::set_allocated_vitalcapacity(::pulse::cdm::bind::ScalarVolumeData* vitalcapacity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vitalcapacity_);
  }
  if (vitalcapacity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vitalcapacity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vitalcapacity, submessage_arena);
    }
    
  } else {
    
  }
  vitalcapacity_ = vitalcapacity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PatientData.VitalCapacity)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace bind
}  // namespace cdm
}  // namespace pulse

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pulse::cdm::bind::PatientData_eSex> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pulse::cdm::bind::PatientData_eSex>() {
  return ::pulse::cdm::bind::PatientData_eSex_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fPatient_2eproto
