// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/PatientConditions.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fPatientConditions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fPatientConditions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "pulse/cdm/bind/Properties.pb.h"
#include "pulse/cdm/bind/PatientNutrition.pb.h"
#include "pulse/cdm/bind/Conditions.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientConditions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pulse_2fcdm_2fbind_2fPatientConditions_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fPatientConditions_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class AcuteRespiratoryDistressSyndromeData;
class AcuteRespiratoryDistressSyndromeDataDefaultTypeInternal;
extern AcuteRespiratoryDistressSyndromeDataDefaultTypeInternal _AcuteRespiratoryDistressSyndromeData_default_instance_;
class AnyPatientConditionData;
class AnyPatientConditionDataDefaultTypeInternal;
extern AnyPatientConditionDataDefaultTypeInternal _AnyPatientConditionData_default_instance_;
class ChronicAnemiaData;
class ChronicAnemiaDataDefaultTypeInternal;
extern ChronicAnemiaDataDefaultTypeInternal _ChronicAnemiaData_default_instance_;
class ChronicObstructivePulmonaryDiseaseData;
class ChronicObstructivePulmonaryDiseaseDataDefaultTypeInternal;
extern ChronicObstructivePulmonaryDiseaseDataDefaultTypeInternal _ChronicObstructivePulmonaryDiseaseData_default_instance_;
class ChronicPericardialEffusionData;
class ChronicPericardialEffusionDataDefaultTypeInternal;
extern ChronicPericardialEffusionDataDefaultTypeInternal _ChronicPericardialEffusionData_default_instance_;
class ChronicRenalStenosisData;
class ChronicRenalStenosisDataDefaultTypeInternal;
extern ChronicRenalStenosisDataDefaultTypeInternal _ChronicRenalStenosisData_default_instance_;
class ChronicVentricularSystolicDysfunctionData;
class ChronicVentricularSystolicDysfunctionDataDefaultTypeInternal;
extern ChronicVentricularSystolicDysfunctionDataDefaultTypeInternal _ChronicVentricularSystolicDysfunctionData_default_instance_;
class ConsumeMealData;
class ConsumeMealDataDefaultTypeInternal;
extern ConsumeMealDataDefaultTypeInternal _ConsumeMealData_default_instance_;
class ImpairedAlveolarExchangeData;
class ImpairedAlveolarExchangeDataDefaultTypeInternal;
extern ImpairedAlveolarExchangeDataDefaultTypeInternal _ImpairedAlveolarExchangeData_default_instance_;
class LobarPneumoniaData;
class LobarPneumoniaDataDefaultTypeInternal;
extern LobarPneumoniaDataDefaultTypeInternal _LobarPneumoniaData_default_instance_;
class PatientConditionData;
class PatientConditionDataDefaultTypeInternal;
extern PatientConditionDataDefaultTypeInternal _PatientConditionData_default_instance_;
class PulmonaryFibrosisData;
class PulmonaryFibrosisDataDefaultTypeInternal;
extern PulmonaryFibrosisDataDefaultTypeInternal _PulmonaryFibrosisData_default_instance_;
class SepsisData;
class SepsisDataDefaultTypeInternal;
extern SepsisDataDefaultTypeInternal _SepsisData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeData* Arena::CreateMaybeMessage<::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeData>(Arena*);
template<> ::pulse::cdm::bind::AnyPatientConditionData* Arena::CreateMaybeMessage<::pulse::cdm::bind::AnyPatientConditionData>(Arena*);
template<> ::pulse::cdm::bind::ChronicAnemiaData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ChronicAnemiaData>(Arena*);
template<> ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseData>(Arena*);
template<> ::pulse::cdm::bind::ChronicPericardialEffusionData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ChronicPericardialEffusionData>(Arena*);
template<> ::pulse::cdm::bind::ChronicRenalStenosisData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ChronicRenalStenosisData>(Arena*);
template<> ::pulse::cdm::bind::ChronicVentricularSystolicDysfunctionData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ChronicVentricularSystolicDysfunctionData>(Arena*);
template<> ::pulse::cdm::bind::ConsumeMealData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ConsumeMealData>(Arena*);
template<> ::pulse::cdm::bind::ImpairedAlveolarExchangeData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ImpairedAlveolarExchangeData>(Arena*);
template<> ::pulse::cdm::bind::LobarPneumoniaData* Arena::CreateMaybeMessage<::pulse::cdm::bind::LobarPneumoniaData>(Arena*);
template<> ::pulse::cdm::bind::PatientConditionData* Arena::CreateMaybeMessage<::pulse::cdm::bind::PatientConditionData>(Arena*);
template<> ::pulse::cdm::bind::PulmonaryFibrosisData* Arena::CreateMaybeMessage<::pulse::cdm::bind::PulmonaryFibrosisData>(Arena*);
template<> ::pulse::cdm::bind::SepsisData* Arena::CreateMaybeMessage<::pulse::cdm::bind::SepsisData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pulse {
namespace cdm {
namespace bind {

// ===================================================================

class AnyPatientConditionData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.AnyPatientConditionData) */ {
 public:
  AnyPatientConditionData();
  virtual ~AnyPatientConditionData();

  AnyPatientConditionData(const AnyPatientConditionData& from);
  AnyPatientConditionData(AnyPatientConditionData&& from) noexcept
    : AnyPatientConditionData() {
    *this = ::std::move(from);
  }

  inline AnyPatientConditionData& operator=(const AnyPatientConditionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnyPatientConditionData& operator=(AnyPatientConditionData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnyPatientConditionData& default_instance();

  enum ConditionCase {
    kAcuteRespiratoryDistressSyndrome = 1,
    kChronicAnemia = 2,
    kChronicObstructivePulmonaryDisease = 3,
    kChronicPericardialEffusion = 4,
    kChronicRenalStenosis = 5,
    kChronicVentricularSystolicDysfunction = 6,
    kConsumeMeal = 7,
    kImpairedAlveolarExchange = 8,
    kLobarPneumonia = 9,
    kPulmonaryFibrosis = 10,
    kSepsis = 11,
    CONDITION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnyPatientConditionData* internal_default_instance() {
    return reinterpret_cast<const AnyPatientConditionData*>(
               &_AnyPatientConditionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AnyPatientConditionData& a, AnyPatientConditionData& b) {
    a.Swap(&b);
  }
  inline void Swap(AnyPatientConditionData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnyPatientConditionData* New() const final {
    return CreateMaybeMessage<AnyPatientConditionData>(nullptr);
  }

  AnyPatientConditionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnyPatientConditionData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnyPatientConditionData& from);
  void MergeFrom(const AnyPatientConditionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnyPatientConditionData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.AnyPatientConditionData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientConditions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcuteRespiratoryDistressSyndromeFieldNumber = 1,
    kChronicAnemiaFieldNumber = 2,
    kChronicObstructivePulmonaryDiseaseFieldNumber = 3,
    kChronicPericardialEffusionFieldNumber = 4,
    kChronicRenalStenosisFieldNumber = 5,
    kChronicVentricularSystolicDysfunctionFieldNumber = 6,
    kConsumeMealFieldNumber = 7,
    kImpairedAlveolarExchangeFieldNumber = 8,
    kLobarPneumoniaFieldNumber = 9,
    kPulmonaryFibrosisFieldNumber = 10,
    kSepsisFieldNumber = 11,
  };
  // .pulse.cdm.bind.AcuteRespiratoryDistressSyndromeData AcuteRespiratoryDistressSyndrome = 1;
  bool has_acuterespiratorydistresssyndrome() const;
  private:
  bool _internal_has_acuterespiratorydistresssyndrome() const;
  public:
  void clear_acuterespiratorydistresssyndrome();
  const ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeData& acuterespiratorydistresssyndrome() const;
  ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeData* release_acuterespiratorydistresssyndrome();
  ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeData* mutable_acuterespiratorydistresssyndrome();
  void set_allocated_acuterespiratorydistresssyndrome(::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeData* acuterespiratorydistresssyndrome);
  private:
  const ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeData& _internal_acuterespiratorydistresssyndrome() const;
  ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeData* _internal_mutable_acuterespiratorydistresssyndrome();
  public:

  // .pulse.cdm.bind.ChronicAnemiaData ChronicAnemia = 2;
  bool has_chronicanemia() const;
  private:
  bool _internal_has_chronicanemia() const;
  public:
  void clear_chronicanemia();
  const ::pulse::cdm::bind::ChronicAnemiaData& chronicanemia() const;
  ::pulse::cdm::bind::ChronicAnemiaData* release_chronicanemia();
  ::pulse::cdm::bind::ChronicAnemiaData* mutable_chronicanemia();
  void set_allocated_chronicanemia(::pulse::cdm::bind::ChronicAnemiaData* chronicanemia);
  private:
  const ::pulse::cdm::bind::ChronicAnemiaData& _internal_chronicanemia() const;
  ::pulse::cdm::bind::ChronicAnemiaData* _internal_mutable_chronicanemia();
  public:

  // .pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseData ChronicObstructivePulmonaryDisease = 3;
  bool has_chronicobstructivepulmonarydisease() const;
  private:
  bool _internal_has_chronicobstructivepulmonarydisease() const;
  public:
  void clear_chronicobstructivepulmonarydisease();
  const ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseData& chronicobstructivepulmonarydisease() const;
  ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseData* release_chronicobstructivepulmonarydisease();
  ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseData* mutable_chronicobstructivepulmonarydisease();
  void set_allocated_chronicobstructivepulmonarydisease(::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseData* chronicobstructivepulmonarydisease);
  private:
  const ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseData& _internal_chronicobstructivepulmonarydisease() const;
  ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseData* _internal_mutable_chronicobstructivepulmonarydisease();
  public:

  // .pulse.cdm.bind.ChronicPericardialEffusionData ChronicPericardialEffusion = 4;
  bool has_chronicpericardialeffusion() const;
  private:
  bool _internal_has_chronicpericardialeffusion() const;
  public:
  void clear_chronicpericardialeffusion();
  const ::pulse::cdm::bind::ChronicPericardialEffusionData& chronicpericardialeffusion() const;
  ::pulse::cdm::bind::ChronicPericardialEffusionData* release_chronicpericardialeffusion();
  ::pulse::cdm::bind::ChronicPericardialEffusionData* mutable_chronicpericardialeffusion();
  void set_allocated_chronicpericardialeffusion(::pulse::cdm::bind::ChronicPericardialEffusionData* chronicpericardialeffusion);
  private:
  const ::pulse::cdm::bind::ChronicPericardialEffusionData& _internal_chronicpericardialeffusion() const;
  ::pulse::cdm::bind::ChronicPericardialEffusionData* _internal_mutable_chronicpericardialeffusion();
  public:

  // .pulse.cdm.bind.ChronicRenalStenosisData ChronicRenalStenosis = 5;
  bool has_chronicrenalstenosis() const;
  private:
  bool _internal_has_chronicrenalstenosis() const;
  public:
  void clear_chronicrenalstenosis();
  const ::pulse::cdm::bind::ChronicRenalStenosisData& chronicrenalstenosis() const;
  ::pulse::cdm::bind::ChronicRenalStenosisData* release_chronicrenalstenosis();
  ::pulse::cdm::bind::ChronicRenalStenosisData* mutable_chronicrenalstenosis();
  void set_allocated_chronicrenalstenosis(::pulse::cdm::bind::ChronicRenalStenosisData* chronicrenalstenosis);
  private:
  const ::pulse::cdm::bind::ChronicRenalStenosisData& _internal_chronicrenalstenosis() const;
  ::pulse::cdm::bind::ChronicRenalStenosisData* _internal_mutable_chronicrenalstenosis();
  public:

  // .pulse.cdm.bind.ChronicVentricularSystolicDysfunctionData ChronicVentricularSystolicDysfunction = 6;
  bool has_chronicventricularsystolicdysfunction() const;
  private:
  bool _internal_has_chronicventricularsystolicdysfunction() const;
  public:
  void clear_chronicventricularsystolicdysfunction();
  const ::pulse::cdm::bind::ChronicVentricularSystolicDysfunctionData& chronicventricularsystolicdysfunction() const;
  ::pulse::cdm::bind::ChronicVentricularSystolicDysfunctionData* release_chronicventricularsystolicdysfunction();
  ::pulse::cdm::bind::ChronicVentricularSystolicDysfunctionData* mutable_chronicventricularsystolicdysfunction();
  void set_allocated_chronicventricularsystolicdysfunction(::pulse::cdm::bind::ChronicVentricularSystolicDysfunctionData* chronicventricularsystolicdysfunction);
  private:
  const ::pulse::cdm::bind::ChronicVentricularSystolicDysfunctionData& _internal_chronicventricularsystolicdysfunction() const;
  ::pulse::cdm::bind::ChronicVentricularSystolicDysfunctionData* _internal_mutable_chronicventricularsystolicdysfunction();
  public:

  // .pulse.cdm.bind.ConsumeMealData ConsumeMeal = 7;
  bool has_consumemeal() const;
  private:
  bool _internal_has_consumemeal() const;
  public:
  void clear_consumemeal();
  const ::pulse::cdm::bind::ConsumeMealData& consumemeal() const;
  ::pulse::cdm::bind::ConsumeMealData* release_consumemeal();
  ::pulse::cdm::bind::ConsumeMealData* mutable_consumemeal();
  void set_allocated_consumemeal(::pulse::cdm::bind::ConsumeMealData* consumemeal);
  private:
  const ::pulse::cdm::bind::ConsumeMealData& _internal_consumemeal() const;
  ::pulse::cdm::bind::ConsumeMealData* _internal_mutable_consumemeal();
  public:

  // .pulse.cdm.bind.ImpairedAlveolarExchangeData ImpairedAlveolarExchange = 8;
  bool has_impairedalveolarexchange() const;
  private:
  bool _internal_has_impairedalveolarexchange() const;
  public:
  void clear_impairedalveolarexchange();
  const ::pulse::cdm::bind::ImpairedAlveolarExchangeData& impairedalveolarexchange() const;
  ::pulse::cdm::bind::ImpairedAlveolarExchangeData* release_impairedalveolarexchange();
  ::pulse::cdm::bind::ImpairedAlveolarExchangeData* mutable_impairedalveolarexchange();
  void set_allocated_impairedalveolarexchange(::pulse::cdm::bind::ImpairedAlveolarExchangeData* impairedalveolarexchange);
  private:
  const ::pulse::cdm::bind::ImpairedAlveolarExchangeData& _internal_impairedalveolarexchange() const;
  ::pulse::cdm::bind::ImpairedAlveolarExchangeData* _internal_mutable_impairedalveolarexchange();
  public:

  // .pulse.cdm.bind.LobarPneumoniaData LobarPneumonia = 9;
  bool has_lobarpneumonia() const;
  private:
  bool _internal_has_lobarpneumonia() const;
  public:
  void clear_lobarpneumonia();
  const ::pulse::cdm::bind::LobarPneumoniaData& lobarpneumonia() const;
  ::pulse::cdm::bind::LobarPneumoniaData* release_lobarpneumonia();
  ::pulse::cdm::bind::LobarPneumoniaData* mutable_lobarpneumonia();
  void set_allocated_lobarpneumonia(::pulse::cdm::bind::LobarPneumoniaData* lobarpneumonia);
  private:
  const ::pulse::cdm::bind::LobarPneumoniaData& _internal_lobarpneumonia() const;
  ::pulse::cdm::bind::LobarPneumoniaData* _internal_mutable_lobarpneumonia();
  public:

  // .pulse.cdm.bind.PulmonaryFibrosisData PulmonaryFibrosis = 10;
  bool has_pulmonaryfibrosis() const;
  private:
  bool _internal_has_pulmonaryfibrosis() const;
  public:
  void clear_pulmonaryfibrosis();
  const ::pulse::cdm::bind::PulmonaryFibrosisData& pulmonaryfibrosis() const;
  ::pulse::cdm::bind::PulmonaryFibrosisData* release_pulmonaryfibrosis();
  ::pulse::cdm::bind::PulmonaryFibrosisData* mutable_pulmonaryfibrosis();
  void set_allocated_pulmonaryfibrosis(::pulse::cdm::bind::PulmonaryFibrosisData* pulmonaryfibrosis);
  private:
  const ::pulse::cdm::bind::PulmonaryFibrosisData& _internal_pulmonaryfibrosis() const;
  ::pulse::cdm::bind::PulmonaryFibrosisData* _internal_mutable_pulmonaryfibrosis();
  public:

  // .pulse.cdm.bind.SepsisData Sepsis = 11;
  bool has_sepsis() const;
  private:
  bool _internal_has_sepsis() const;
  public:
  void clear_sepsis();
  const ::pulse::cdm::bind::SepsisData& sepsis() const;
  ::pulse::cdm::bind::SepsisData* release_sepsis();
  ::pulse::cdm::bind::SepsisData* mutable_sepsis();
  void set_allocated_sepsis(::pulse::cdm::bind::SepsisData* sepsis);
  private:
  const ::pulse::cdm::bind::SepsisData& _internal_sepsis() const;
  ::pulse::cdm::bind::SepsisData* _internal_mutable_sepsis();
  public:

  void clear_Condition();
  ConditionCase Condition_case() const;
  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.AnyPatientConditionData)
 private:
  class _Internal;
  void set_has_acuterespiratorydistresssyndrome();
  void set_has_chronicanemia();
  void set_has_chronicobstructivepulmonarydisease();
  void set_has_chronicpericardialeffusion();
  void set_has_chronicrenalstenosis();
  void set_has_chronicventricularsystolicdysfunction();
  void set_has_consumemeal();
  void set_has_impairedalveolarexchange();
  void set_has_lobarpneumonia();
  void set_has_pulmonaryfibrosis();
  void set_has_sepsis();

  inline bool has_Condition() const;
  inline void clear_has_Condition();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union ConditionUnion {
    ConditionUnion() {}
    ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeData* acuterespiratorydistresssyndrome_;
    ::pulse::cdm::bind::ChronicAnemiaData* chronicanemia_;
    ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseData* chronicobstructivepulmonarydisease_;
    ::pulse::cdm::bind::ChronicPericardialEffusionData* chronicpericardialeffusion_;
    ::pulse::cdm::bind::ChronicRenalStenosisData* chronicrenalstenosis_;
    ::pulse::cdm::bind::ChronicVentricularSystolicDysfunctionData* chronicventricularsystolicdysfunction_;
    ::pulse::cdm::bind::ConsumeMealData* consumemeal_;
    ::pulse::cdm::bind::ImpairedAlveolarExchangeData* impairedalveolarexchange_;
    ::pulse::cdm::bind::LobarPneumoniaData* lobarpneumonia_;
    ::pulse::cdm::bind::PulmonaryFibrosisData* pulmonaryfibrosis_;
    ::pulse::cdm::bind::SepsisData* sepsis_;
  } Condition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientConditions_2eproto;
};
// -------------------------------------------------------------------

class PatientConditionData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.PatientConditionData) */ {
 public:
  PatientConditionData();
  virtual ~PatientConditionData();

  PatientConditionData(const PatientConditionData& from);
  PatientConditionData(PatientConditionData&& from) noexcept
    : PatientConditionData() {
    *this = ::std::move(from);
  }

  inline PatientConditionData& operator=(const PatientConditionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatientConditionData& operator=(PatientConditionData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PatientConditionData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatientConditionData* internal_default_instance() {
    return reinterpret_cast<const PatientConditionData*>(
               &_PatientConditionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PatientConditionData& a, PatientConditionData& b) {
    a.Swap(&b);
  }
  inline void Swap(PatientConditionData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PatientConditionData* New() const final {
    return CreateMaybeMessage<PatientConditionData>(nullptr);
  }

  PatientConditionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PatientConditionData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PatientConditionData& from);
  void MergeFrom(const PatientConditionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatientConditionData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.PatientConditionData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientConditions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConditionFieldNumber = 1,
  };
  // .pulse.cdm.bind.ConditionData Condition = 1;
  bool has_condition() const;
  private:
  bool _internal_has_condition() const;
  public:
  void clear_condition();
  const ::pulse::cdm::bind::ConditionData& condition() const;
  ::pulse::cdm::bind::ConditionData* release_condition();
  ::pulse::cdm::bind::ConditionData* mutable_condition();
  void set_allocated_condition(::pulse::cdm::bind::ConditionData* condition);
  private:
  const ::pulse::cdm::bind::ConditionData& _internal_condition() const;
  ::pulse::cdm::bind::ConditionData* _internal_mutable_condition();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.PatientConditionData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ConditionData* condition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientConditions_2eproto;
};
// -------------------------------------------------------------------

class AcuteRespiratoryDistressSyndromeData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeData) */ {
 public:
  AcuteRespiratoryDistressSyndromeData();
  virtual ~AcuteRespiratoryDistressSyndromeData();

  AcuteRespiratoryDistressSyndromeData(const AcuteRespiratoryDistressSyndromeData& from);
  AcuteRespiratoryDistressSyndromeData(AcuteRespiratoryDistressSyndromeData&& from) noexcept
    : AcuteRespiratoryDistressSyndromeData() {
    *this = ::std::move(from);
  }

  inline AcuteRespiratoryDistressSyndromeData& operator=(const AcuteRespiratoryDistressSyndromeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AcuteRespiratoryDistressSyndromeData& operator=(AcuteRespiratoryDistressSyndromeData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AcuteRespiratoryDistressSyndromeData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcuteRespiratoryDistressSyndromeData* internal_default_instance() {
    return reinterpret_cast<const AcuteRespiratoryDistressSyndromeData*>(
               &_AcuteRespiratoryDistressSyndromeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AcuteRespiratoryDistressSyndromeData& a, AcuteRespiratoryDistressSyndromeData& b) {
    a.Swap(&b);
  }
  inline void Swap(AcuteRespiratoryDistressSyndromeData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AcuteRespiratoryDistressSyndromeData* New() const final {
    return CreateMaybeMessage<AcuteRespiratoryDistressSyndromeData>(nullptr);
  }

  AcuteRespiratoryDistressSyndromeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AcuteRespiratoryDistressSyndromeData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AcuteRespiratoryDistressSyndromeData& from);
  void MergeFrom(const AcuteRespiratoryDistressSyndromeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AcuteRespiratoryDistressSyndromeData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.AcuteRespiratoryDistressSyndromeData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientConditions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientConditionFieldNumber = 1,
    kSeverityFieldNumber = 2,
    kLeftLungAffectedFieldNumber = 3,
    kRightLungAffectedFieldNumber = 4,
  };
  // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
  bool has_patientcondition() const;
  private:
  bool _internal_has_patientcondition() const;
  public:
  void clear_patientcondition();
  const ::pulse::cdm::bind::PatientConditionData& patientcondition() const;
  ::pulse::cdm::bind::PatientConditionData* release_patientcondition();
  ::pulse::cdm::bind::PatientConditionData* mutable_patientcondition();
  void set_allocated_patientcondition(::pulse::cdm::bind::PatientConditionData* patientcondition);
  private:
  const ::pulse::cdm::bind::PatientConditionData& _internal_patientcondition() const;
  ::pulse::cdm::bind::PatientConditionData* _internal_mutable_patientcondition();
  public:

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  bool has_severity() const;
  private:
  bool _internal_has_severity() const;
  public:
  void clear_severity();
  const ::pulse::cdm::bind::Scalar0To1Data& severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_severity();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_severity();
  void set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_severity();
  public:

  // .pulse.cdm.bind.Scalar0To1Data LeftLungAffected = 3;
  bool has_leftlungaffected() const;
  private:
  bool _internal_has_leftlungaffected() const;
  public:
  void clear_leftlungaffected();
  const ::pulse::cdm::bind::Scalar0To1Data& leftlungaffected() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_leftlungaffected();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_leftlungaffected();
  void set_allocated_leftlungaffected(::pulse::cdm::bind::Scalar0To1Data* leftlungaffected);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_leftlungaffected() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_leftlungaffected();
  public:

  // .pulse.cdm.bind.Scalar0To1Data RightLungAffected = 4;
  bool has_rightlungaffected() const;
  private:
  bool _internal_has_rightlungaffected() const;
  public:
  void clear_rightlungaffected();
  const ::pulse::cdm::bind::Scalar0To1Data& rightlungaffected() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_rightlungaffected();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_rightlungaffected();
  void set_allocated_rightlungaffected(::pulse::cdm::bind::Scalar0To1Data* rightlungaffected);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_rightlungaffected() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_rightlungaffected();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::PatientConditionData* patientcondition_;
  ::pulse::cdm::bind::Scalar0To1Data* severity_;
  ::pulse::cdm::bind::Scalar0To1Data* leftlungaffected_;
  ::pulse::cdm::bind::Scalar0To1Data* rightlungaffected_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientConditions_2eproto;
};
// -------------------------------------------------------------------

class ChronicAnemiaData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ChronicAnemiaData) */ {
 public:
  ChronicAnemiaData();
  virtual ~ChronicAnemiaData();

  ChronicAnemiaData(const ChronicAnemiaData& from);
  ChronicAnemiaData(ChronicAnemiaData&& from) noexcept
    : ChronicAnemiaData() {
    *this = ::std::move(from);
  }

  inline ChronicAnemiaData& operator=(const ChronicAnemiaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChronicAnemiaData& operator=(ChronicAnemiaData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChronicAnemiaData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChronicAnemiaData* internal_default_instance() {
    return reinterpret_cast<const ChronicAnemiaData*>(
               &_ChronicAnemiaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ChronicAnemiaData& a, ChronicAnemiaData& b) {
    a.Swap(&b);
  }
  inline void Swap(ChronicAnemiaData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChronicAnemiaData* New() const final {
    return CreateMaybeMessage<ChronicAnemiaData>(nullptr);
  }

  ChronicAnemiaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChronicAnemiaData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChronicAnemiaData& from);
  void MergeFrom(const ChronicAnemiaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChronicAnemiaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ChronicAnemiaData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientConditions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientConditionFieldNumber = 1,
    kReductionFactorFieldNumber = 2,
  };
  // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
  bool has_patientcondition() const;
  private:
  bool _internal_has_patientcondition() const;
  public:
  void clear_patientcondition();
  const ::pulse::cdm::bind::PatientConditionData& patientcondition() const;
  ::pulse::cdm::bind::PatientConditionData* release_patientcondition();
  ::pulse::cdm::bind::PatientConditionData* mutable_patientcondition();
  void set_allocated_patientcondition(::pulse::cdm::bind::PatientConditionData* patientcondition);
  private:
  const ::pulse::cdm::bind::PatientConditionData& _internal_patientcondition() const;
  ::pulse::cdm::bind::PatientConditionData* _internal_mutable_patientcondition();
  public:

  // .pulse.cdm.bind.Scalar0To1Data ReductionFactor = 2;
  bool has_reductionfactor() const;
  private:
  bool _internal_has_reductionfactor() const;
  public:
  void clear_reductionfactor();
  const ::pulse::cdm::bind::Scalar0To1Data& reductionfactor() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_reductionfactor();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_reductionfactor();
  void set_allocated_reductionfactor(::pulse::cdm::bind::Scalar0To1Data* reductionfactor);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_reductionfactor() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_reductionfactor();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ChronicAnemiaData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::PatientConditionData* patientcondition_;
  ::pulse::cdm::bind::Scalar0To1Data* reductionfactor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientConditions_2eproto;
};
// -------------------------------------------------------------------

class ChronicVentricularSystolicDysfunctionData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ChronicVentricularSystolicDysfunctionData) */ {
 public:
  ChronicVentricularSystolicDysfunctionData();
  virtual ~ChronicVentricularSystolicDysfunctionData();

  ChronicVentricularSystolicDysfunctionData(const ChronicVentricularSystolicDysfunctionData& from);
  ChronicVentricularSystolicDysfunctionData(ChronicVentricularSystolicDysfunctionData&& from) noexcept
    : ChronicVentricularSystolicDysfunctionData() {
    *this = ::std::move(from);
  }

  inline ChronicVentricularSystolicDysfunctionData& operator=(const ChronicVentricularSystolicDysfunctionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChronicVentricularSystolicDysfunctionData& operator=(ChronicVentricularSystolicDysfunctionData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChronicVentricularSystolicDysfunctionData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChronicVentricularSystolicDysfunctionData* internal_default_instance() {
    return reinterpret_cast<const ChronicVentricularSystolicDysfunctionData*>(
               &_ChronicVentricularSystolicDysfunctionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ChronicVentricularSystolicDysfunctionData& a, ChronicVentricularSystolicDysfunctionData& b) {
    a.Swap(&b);
  }
  inline void Swap(ChronicVentricularSystolicDysfunctionData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChronicVentricularSystolicDysfunctionData* New() const final {
    return CreateMaybeMessage<ChronicVentricularSystolicDysfunctionData>(nullptr);
  }

  ChronicVentricularSystolicDysfunctionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChronicVentricularSystolicDysfunctionData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChronicVentricularSystolicDysfunctionData& from);
  void MergeFrom(const ChronicVentricularSystolicDysfunctionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChronicVentricularSystolicDysfunctionData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ChronicVentricularSystolicDysfunctionData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientConditions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientConditionFieldNumber = 1,
  };
  // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
  bool has_patientcondition() const;
  private:
  bool _internal_has_patientcondition() const;
  public:
  void clear_patientcondition();
  const ::pulse::cdm::bind::PatientConditionData& patientcondition() const;
  ::pulse::cdm::bind::PatientConditionData* release_patientcondition();
  ::pulse::cdm::bind::PatientConditionData* mutable_patientcondition();
  void set_allocated_patientcondition(::pulse::cdm::bind::PatientConditionData* patientcondition);
  private:
  const ::pulse::cdm::bind::PatientConditionData& _internal_patientcondition() const;
  ::pulse::cdm::bind::PatientConditionData* _internal_mutable_patientcondition();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ChronicVentricularSystolicDysfunctionData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::PatientConditionData* patientcondition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientConditions_2eproto;
};
// -------------------------------------------------------------------

class ChronicObstructivePulmonaryDiseaseData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseData) */ {
 public:
  ChronicObstructivePulmonaryDiseaseData();
  virtual ~ChronicObstructivePulmonaryDiseaseData();

  ChronicObstructivePulmonaryDiseaseData(const ChronicObstructivePulmonaryDiseaseData& from);
  ChronicObstructivePulmonaryDiseaseData(ChronicObstructivePulmonaryDiseaseData&& from) noexcept
    : ChronicObstructivePulmonaryDiseaseData() {
    *this = ::std::move(from);
  }

  inline ChronicObstructivePulmonaryDiseaseData& operator=(const ChronicObstructivePulmonaryDiseaseData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChronicObstructivePulmonaryDiseaseData& operator=(ChronicObstructivePulmonaryDiseaseData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChronicObstructivePulmonaryDiseaseData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChronicObstructivePulmonaryDiseaseData* internal_default_instance() {
    return reinterpret_cast<const ChronicObstructivePulmonaryDiseaseData*>(
               &_ChronicObstructivePulmonaryDiseaseData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ChronicObstructivePulmonaryDiseaseData& a, ChronicObstructivePulmonaryDiseaseData& b) {
    a.Swap(&b);
  }
  inline void Swap(ChronicObstructivePulmonaryDiseaseData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChronicObstructivePulmonaryDiseaseData* New() const final {
    return CreateMaybeMessage<ChronicObstructivePulmonaryDiseaseData>(nullptr);
  }

  ChronicObstructivePulmonaryDiseaseData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChronicObstructivePulmonaryDiseaseData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChronicObstructivePulmonaryDiseaseData& from);
  void MergeFrom(const ChronicObstructivePulmonaryDiseaseData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChronicObstructivePulmonaryDiseaseData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientConditions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientConditionFieldNumber = 1,
    kBronchitisSeverityFieldNumber = 2,
    kEmphysemaSeverityFieldNumber = 3,
  };
  // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
  bool has_patientcondition() const;
  private:
  bool _internal_has_patientcondition() const;
  public:
  void clear_patientcondition();
  const ::pulse::cdm::bind::PatientConditionData& patientcondition() const;
  ::pulse::cdm::bind::PatientConditionData* release_patientcondition();
  ::pulse::cdm::bind::PatientConditionData* mutable_patientcondition();
  void set_allocated_patientcondition(::pulse::cdm::bind::PatientConditionData* patientcondition);
  private:
  const ::pulse::cdm::bind::PatientConditionData& _internal_patientcondition() const;
  ::pulse::cdm::bind::PatientConditionData* _internal_mutable_patientcondition();
  public:

  // .pulse.cdm.bind.Scalar0To1Data BronchitisSeverity = 2;
  bool has_bronchitisseverity() const;
  private:
  bool _internal_has_bronchitisseverity() const;
  public:
  void clear_bronchitisseverity();
  const ::pulse::cdm::bind::Scalar0To1Data& bronchitisseverity() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_bronchitisseverity();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_bronchitisseverity();
  void set_allocated_bronchitisseverity(::pulse::cdm::bind::Scalar0To1Data* bronchitisseverity);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_bronchitisseverity() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_bronchitisseverity();
  public:

  // .pulse.cdm.bind.Scalar0To1Data EmphysemaSeverity = 3;
  bool has_emphysemaseverity() const;
  private:
  bool _internal_has_emphysemaseverity() const;
  public:
  void clear_emphysemaseverity();
  const ::pulse::cdm::bind::Scalar0To1Data& emphysemaseverity() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_emphysemaseverity();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_emphysemaseverity();
  void set_allocated_emphysemaseverity(::pulse::cdm::bind::Scalar0To1Data* emphysemaseverity);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_emphysemaseverity() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_emphysemaseverity();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::PatientConditionData* patientcondition_;
  ::pulse::cdm::bind::Scalar0To1Data* bronchitisseverity_;
  ::pulse::cdm::bind::Scalar0To1Data* emphysemaseverity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientConditions_2eproto;
};
// -------------------------------------------------------------------

class ChronicPericardialEffusionData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ChronicPericardialEffusionData) */ {
 public:
  ChronicPericardialEffusionData();
  virtual ~ChronicPericardialEffusionData();

  ChronicPericardialEffusionData(const ChronicPericardialEffusionData& from);
  ChronicPericardialEffusionData(ChronicPericardialEffusionData&& from) noexcept
    : ChronicPericardialEffusionData() {
    *this = ::std::move(from);
  }

  inline ChronicPericardialEffusionData& operator=(const ChronicPericardialEffusionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChronicPericardialEffusionData& operator=(ChronicPericardialEffusionData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChronicPericardialEffusionData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChronicPericardialEffusionData* internal_default_instance() {
    return reinterpret_cast<const ChronicPericardialEffusionData*>(
               &_ChronicPericardialEffusionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ChronicPericardialEffusionData& a, ChronicPericardialEffusionData& b) {
    a.Swap(&b);
  }
  inline void Swap(ChronicPericardialEffusionData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChronicPericardialEffusionData* New() const final {
    return CreateMaybeMessage<ChronicPericardialEffusionData>(nullptr);
  }

  ChronicPericardialEffusionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChronicPericardialEffusionData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChronicPericardialEffusionData& from);
  void MergeFrom(const ChronicPericardialEffusionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChronicPericardialEffusionData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ChronicPericardialEffusionData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientConditions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientConditionFieldNumber = 1,
    kAccumulatedVolumeFieldNumber = 2,
  };
  // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
  bool has_patientcondition() const;
  private:
  bool _internal_has_patientcondition() const;
  public:
  void clear_patientcondition();
  const ::pulse::cdm::bind::PatientConditionData& patientcondition() const;
  ::pulse::cdm::bind::PatientConditionData* release_patientcondition();
  ::pulse::cdm::bind::PatientConditionData* mutable_patientcondition();
  void set_allocated_patientcondition(::pulse::cdm::bind::PatientConditionData* patientcondition);
  private:
  const ::pulse::cdm::bind::PatientConditionData& _internal_patientcondition() const;
  ::pulse::cdm::bind::PatientConditionData* _internal_mutable_patientcondition();
  public:

  // .pulse.cdm.bind.ScalarVolumeData AccumulatedVolume = 2;
  bool has_accumulatedvolume() const;
  private:
  bool _internal_has_accumulatedvolume() const;
  public:
  void clear_accumulatedvolume();
  const ::pulse::cdm::bind::ScalarVolumeData& accumulatedvolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_accumulatedvolume();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_accumulatedvolume();
  void set_allocated_accumulatedvolume(::pulse::cdm::bind::ScalarVolumeData* accumulatedvolume);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_accumulatedvolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_accumulatedvolume();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ChronicPericardialEffusionData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::PatientConditionData* patientcondition_;
  ::pulse::cdm::bind::ScalarVolumeData* accumulatedvolume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientConditions_2eproto;
};
// -------------------------------------------------------------------

class ChronicRenalStenosisData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ChronicRenalStenosisData) */ {
 public:
  ChronicRenalStenosisData();
  virtual ~ChronicRenalStenosisData();

  ChronicRenalStenosisData(const ChronicRenalStenosisData& from);
  ChronicRenalStenosisData(ChronicRenalStenosisData&& from) noexcept
    : ChronicRenalStenosisData() {
    *this = ::std::move(from);
  }

  inline ChronicRenalStenosisData& operator=(const ChronicRenalStenosisData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChronicRenalStenosisData& operator=(ChronicRenalStenosisData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChronicRenalStenosisData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChronicRenalStenosisData* internal_default_instance() {
    return reinterpret_cast<const ChronicRenalStenosisData*>(
               &_ChronicRenalStenosisData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ChronicRenalStenosisData& a, ChronicRenalStenosisData& b) {
    a.Swap(&b);
  }
  inline void Swap(ChronicRenalStenosisData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChronicRenalStenosisData* New() const final {
    return CreateMaybeMessage<ChronicRenalStenosisData>(nullptr);
  }

  ChronicRenalStenosisData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChronicRenalStenosisData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChronicRenalStenosisData& from);
  void MergeFrom(const ChronicRenalStenosisData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChronicRenalStenosisData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ChronicRenalStenosisData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientConditions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientConditionFieldNumber = 1,
    kLeftKidneySeverityFieldNumber = 2,
    kRightKidneySeverityFieldNumber = 3,
  };
  // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
  bool has_patientcondition() const;
  private:
  bool _internal_has_patientcondition() const;
  public:
  void clear_patientcondition();
  const ::pulse::cdm::bind::PatientConditionData& patientcondition() const;
  ::pulse::cdm::bind::PatientConditionData* release_patientcondition();
  ::pulse::cdm::bind::PatientConditionData* mutable_patientcondition();
  void set_allocated_patientcondition(::pulse::cdm::bind::PatientConditionData* patientcondition);
  private:
  const ::pulse::cdm::bind::PatientConditionData& _internal_patientcondition() const;
  ::pulse::cdm::bind::PatientConditionData* _internal_mutable_patientcondition();
  public:

  // .pulse.cdm.bind.Scalar0To1Data LeftKidneySeverity = 2;
  bool has_leftkidneyseverity() const;
  private:
  bool _internal_has_leftkidneyseverity() const;
  public:
  void clear_leftkidneyseverity();
  const ::pulse::cdm::bind::Scalar0To1Data& leftkidneyseverity() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_leftkidneyseverity();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_leftkidneyseverity();
  void set_allocated_leftkidneyseverity(::pulse::cdm::bind::Scalar0To1Data* leftkidneyseverity);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_leftkidneyseverity() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_leftkidneyseverity();
  public:

  // .pulse.cdm.bind.Scalar0To1Data RightKidneySeverity = 3;
  bool has_rightkidneyseverity() const;
  private:
  bool _internal_has_rightkidneyseverity() const;
  public:
  void clear_rightkidneyseverity();
  const ::pulse::cdm::bind::Scalar0To1Data& rightkidneyseverity() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_rightkidneyseverity();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_rightkidneyseverity();
  void set_allocated_rightkidneyseverity(::pulse::cdm::bind::Scalar0To1Data* rightkidneyseverity);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_rightkidneyseverity() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_rightkidneyseverity();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ChronicRenalStenosisData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::PatientConditionData* patientcondition_;
  ::pulse::cdm::bind::Scalar0To1Data* leftkidneyseverity_;
  ::pulse::cdm::bind::Scalar0To1Data* rightkidneyseverity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientConditions_2eproto;
};
// -------------------------------------------------------------------

class ConsumeMealData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ConsumeMealData) */ {
 public:
  ConsumeMealData();
  virtual ~ConsumeMealData();

  ConsumeMealData(const ConsumeMealData& from);
  ConsumeMealData(ConsumeMealData&& from) noexcept
    : ConsumeMealData() {
    *this = ::std::move(from);
  }

  inline ConsumeMealData& operator=(const ConsumeMealData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsumeMealData& operator=(ConsumeMealData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsumeMealData& default_instance();

  enum OptionCase {
    kMeal = 2,
    kMealFile = 3,
    OPTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsumeMealData* internal_default_instance() {
    return reinterpret_cast<const ConsumeMealData*>(
               &_ConsumeMealData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ConsumeMealData& a, ConsumeMealData& b) {
    a.Swap(&b);
  }
  inline void Swap(ConsumeMealData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConsumeMealData* New() const final {
    return CreateMaybeMessage<ConsumeMealData>(nullptr);
  }

  ConsumeMealData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsumeMealData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsumeMealData& from);
  void MergeFrom(const ConsumeMealData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsumeMealData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ConsumeMealData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientConditions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientConditionFieldNumber = 1,
    kMealFieldNumber = 2,
    kMealFileFieldNumber = 3,
  };
  // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
  bool has_patientcondition() const;
  private:
  bool _internal_has_patientcondition() const;
  public:
  void clear_patientcondition();
  const ::pulse::cdm::bind::PatientConditionData& patientcondition() const;
  ::pulse::cdm::bind::PatientConditionData* release_patientcondition();
  ::pulse::cdm::bind::PatientConditionData* mutable_patientcondition();
  void set_allocated_patientcondition(::pulse::cdm::bind::PatientConditionData* patientcondition);
  private:
  const ::pulse::cdm::bind::PatientConditionData& _internal_patientcondition() const;
  ::pulse::cdm::bind::PatientConditionData* _internal_mutable_patientcondition();
  public:

  // .pulse.cdm.bind.MealData Meal = 2;
  bool has_meal() const;
  private:
  bool _internal_has_meal() const;
  public:
  void clear_meal();
  const ::pulse::cdm::bind::MealData& meal() const;
  ::pulse::cdm::bind::MealData* release_meal();
  ::pulse::cdm::bind::MealData* mutable_meal();
  void set_allocated_meal(::pulse::cdm::bind::MealData* meal);
  private:
  const ::pulse::cdm::bind::MealData& _internal_meal() const;
  ::pulse::cdm::bind::MealData* _internal_mutable_meal();
  public:

  // string MealFile = 3;
  private:
  bool _internal_has_mealfile() const;
  public:
  void clear_mealfile();
  const std::string& mealfile() const;
  void set_mealfile(const std::string& value);
  void set_mealfile(std::string&& value);
  void set_mealfile(const char* value);
  void set_mealfile(const char* value, size_t size);
  std::string* mutable_mealfile();
  std::string* release_mealfile();
  void set_allocated_mealfile(std::string* mealfile);
  private:
  const std::string& _internal_mealfile() const;
  void _internal_set_mealfile(const std::string& value);
  std::string* _internal_mutable_mealfile();
  public:

  void clear_Option();
  OptionCase Option_case() const;
  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ConsumeMealData)
 private:
  class _Internal;
  void set_has_meal();
  void set_has_mealfile();

  inline bool has_Option() const;
  inline void clear_has_Option();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::PatientConditionData* patientcondition_;
  union OptionUnion {
    OptionUnion() {}
    ::pulse::cdm::bind::MealData* meal_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mealfile_;
  } Option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientConditions_2eproto;
};
// -------------------------------------------------------------------

class ImpairedAlveolarExchangeData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ImpairedAlveolarExchangeData) */ {
 public:
  ImpairedAlveolarExchangeData();
  virtual ~ImpairedAlveolarExchangeData();

  ImpairedAlveolarExchangeData(const ImpairedAlveolarExchangeData& from);
  ImpairedAlveolarExchangeData(ImpairedAlveolarExchangeData&& from) noexcept
    : ImpairedAlveolarExchangeData() {
    *this = ::std::move(from);
  }

  inline ImpairedAlveolarExchangeData& operator=(const ImpairedAlveolarExchangeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImpairedAlveolarExchangeData& operator=(ImpairedAlveolarExchangeData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImpairedAlveolarExchangeData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImpairedAlveolarExchangeData* internal_default_instance() {
    return reinterpret_cast<const ImpairedAlveolarExchangeData*>(
               &_ImpairedAlveolarExchangeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ImpairedAlveolarExchangeData& a, ImpairedAlveolarExchangeData& b) {
    a.Swap(&b);
  }
  inline void Swap(ImpairedAlveolarExchangeData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImpairedAlveolarExchangeData* New() const final {
    return CreateMaybeMessage<ImpairedAlveolarExchangeData>(nullptr);
  }

  ImpairedAlveolarExchangeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImpairedAlveolarExchangeData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImpairedAlveolarExchangeData& from);
  void MergeFrom(const ImpairedAlveolarExchangeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImpairedAlveolarExchangeData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ImpairedAlveolarExchangeData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientConditions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientConditionFieldNumber = 1,
    kImpairedSurfaceAreaFieldNumber = 2,
    kImpairedFractionFieldNumber = 3,
  };
  // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
  bool has_patientcondition() const;
  private:
  bool _internal_has_patientcondition() const;
  public:
  void clear_patientcondition();
  const ::pulse::cdm::bind::PatientConditionData& patientcondition() const;
  ::pulse::cdm::bind::PatientConditionData* release_patientcondition();
  ::pulse::cdm::bind::PatientConditionData* mutable_patientcondition();
  void set_allocated_patientcondition(::pulse::cdm::bind::PatientConditionData* patientcondition);
  private:
  const ::pulse::cdm::bind::PatientConditionData& _internal_patientcondition() const;
  ::pulse::cdm::bind::PatientConditionData* _internal_mutable_patientcondition();
  public:

  // .pulse.cdm.bind.ScalarAreaData ImpairedSurfaceArea = 2;
  bool has_impairedsurfacearea() const;
  private:
  bool _internal_has_impairedsurfacearea() const;
  public:
  void clear_impairedsurfacearea();
  const ::pulse::cdm::bind::ScalarAreaData& impairedsurfacearea() const;
  ::pulse::cdm::bind::ScalarAreaData* release_impairedsurfacearea();
  ::pulse::cdm::bind::ScalarAreaData* mutable_impairedsurfacearea();
  void set_allocated_impairedsurfacearea(::pulse::cdm::bind::ScalarAreaData* impairedsurfacearea);
  private:
  const ::pulse::cdm::bind::ScalarAreaData& _internal_impairedsurfacearea() const;
  ::pulse::cdm::bind::ScalarAreaData* _internal_mutable_impairedsurfacearea();
  public:

  // .pulse.cdm.bind.Scalar0To1Data ImpairedFraction = 3;
  bool has_impairedfraction() const;
  private:
  bool _internal_has_impairedfraction() const;
  public:
  void clear_impairedfraction();
  const ::pulse::cdm::bind::Scalar0To1Data& impairedfraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_impairedfraction();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_impairedfraction();
  void set_allocated_impairedfraction(::pulse::cdm::bind::Scalar0To1Data* impairedfraction);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_impairedfraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_impairedfraction();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ImpairedAlveolarExchangeData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::PatientConditionData* patientcondition_;
  ::pulse::cdm::bind::ScalarAreaData* impairedsurfacearea_;
  ::pulse::cdm::bind::Scalar0To1Data* impairedfraction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientConditions_2eproto;
};
// -------------------------------------------------------------------

class LobarPneumoniaData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.LobarPneumoniaData) */ {
 public:
  LobarPneumoniaData();
  virtual ~LobarPneumoniaData();

  LobarPneumoniaData(const LobarPneumoniaData& from);
  LobarPneumoniaData(LobarPneumoniaData&& from) noexcept
    : LobarPneumoniaData() {
    *this = ::std::move(from);
  }

  inline LobarPneumoniaData& operator=(const LobarPneumoniaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline LobarPneumoniaData& operator=(LobarPneumoniaData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LobarPneumoniaData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LobarPneumoniaData* internal_default_instance() {
    return reinterpret_cast<const LobarPneumoniaData*>(
               &_LobarPneumoniaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(LobarPneumoniaData& a, LobarPneumoniaData& b) {
    a.Swap(&b);
  }
  inline void Swap(LobarPneumoniaData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LobarPneumoniaData* New() const final {
    return CreateMaybeMessage<LobarPneumoniaData>(nullptr);
  }

  LobarPneumoniaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LobarPneumoniaData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LobarPneumoniaData& from);
  void MergeFrom(const LobarPneumoniaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LobarPneumoniaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.LobarPneumoniaData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientConditions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientConditionFieldNumber = 1,
    kSeverityFieldNumber = 2,
    kLeftLungAffectedFieldNumber = 3,
    kRightLungAffectedFieldNumber = 4,
  };
  // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
  bool has_patientcondition() const;
  private:
  bool _internal_has_patientcondition() const;
  public:
  void clear_patientcondition();
  const ::pulse::cdm::bind::PatientConditionData& patientcondition() const;
  ::pulse::cdm::bind::PatientConditionData* release_patientcondition();
  ::pulse::cdm::bind::PatientConditionData* mutable_patientcondition();
  void set_allocated_patientcondition(::pulse::cdm::bind::PatientConditionData* patientcondition);
  private:
  const ::pulse::cdm::bind::PatientConditionData& _internal_patientcondition() const;
  ::pulse::cdm::bind::PatientConditionData* _internal_mutable_patientcondition();
  public:

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  bool has_severity() const;
  private:
  bool _internal_has_severity() const;
  public:
  void clear_severity();
  const ::pulse::cdm::bind::Scalar0To1Data& severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_severity();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_severity();
  void set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_severity();
  public:

  // .pulse.cdm.bind.Scalar0To1Data LeftLungAffected = 3;
  bool has_leftlungaffected() const;
  private:
  bool _internal_has_leftlungaffected() const;
  public:
  void clear_leftlungaffected();
  const ::pulse::cdm::bind::Scalar0To1Data& leftlungaffected() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_leftlungaffected();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_leftlungaffected();
  void set_allocated_leftlungaffected(::pulse::cdm::bind::Scalar0To1Data* leftlungaffected);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_leftlungaffected() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_leftlungaffected();
  public:

  // .pulse.cdm.bind.Scalar0To1Data RightLungAffected = 4;
  bool has_rightlungaffected() const;
  private:
  bool _internal_has_rightlungaffected() const;
  public:
  void clear_rightlungaffected();
  const ::pulse::cdm::bind::Scalar0To1Data& rightlungaffected() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_rightlungaffected();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_rightlungaffected();
  void set_allocated_rightlungaffected(::pulse::cdm::bind::Scalar0To1Data* rightlungaffected);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_rightlungaffected() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_rightlungaffected();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.LobarPneumoniaData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::PatientConditionData* patientcondition_;
  ::pulse::cdm::bind::Scalar0To1Data* severity_;
  ::pulse::cdm::bind::Scalar0To1Data* leftlungaffected_;
  ::pulse::cdm::bind::Scalar0To1Data* rightlungaffected_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientConditions_2eproto;
};
// -------------------------------------------------------------------

class PulmonaryFibrosisData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.PulmonaryFibrosisData) */ {
 public:
  PulmonaryFibrosisData();
  virtual ~PulmonaryFibrosisData();

  PulmonaryFibrosisData(const PulmonaryFibrosisData& from);
  PulmonaryFibrosisData(PulmonaryFibrosisData&& from) noexcept
    : PulmonaryFibrosisData() {
    *this = ::std::move(from);
  }

  inline PulmonaryFibrosisData& operator=(const PulmonaryFibrosisData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PulmonaryFibrosisData& operator=(PulmonaryFibrosisData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PulmonaryFibrosisData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PulmonaryFibrosisData* internal_default_instance() {
    return reinterpret_cast<const PulmonaryFibrosisData*>(
               &_PulmonaryFibrosisData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PulmonaryFibrosisData& a, PulmonaryFibrosisData& b) {
    a.Swap(&b);
  }
  inline void Swap(PulmonaryFibrosisData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PulmonaryFibrosisData* New() const final {
    return CreateMaybeMessage<PulmonaryFibrosisData>(nullptr);
  }

  PulmonaryFibrosisData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PulmonaryFibrosisData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PulmonaryFibrosisData& from);
  void MergeFrom(const PulmonaryFibrosisData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PulmonaryFibrosisData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.PulmonaryFibrosisData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientConditions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientConditionFieldNumber = 1,
    kSeverityFieldNumber = 2,
  };
  // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
  bool has_patientcondition() const;
  private:
  bool _internal_has_patientcondition() const;
  public:
  void clear_patientcondition();
  const ::pulse::cdm::bind::PatientConditionData& patientcondition() const;
  ::pulse::cdm::bind::PatientConditionData* release_patientcondition();
  ::pulse::cdm::bind::PatientConditionData* mutable_patientcondition();
  void set_allocated_patientcondition(::pulse::cdm::bind::PatientConditionData* patientcondition);
  private:
  const ::pulse::cdm::bind::PatientConditionData& _internal_patientcondition() const;
  ::pulse::cdm::bind::PatientConditionData* _internal_mutable_patientcondition();
  public:

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  bool has_severity() const;
  private:
  bool _internal_has_severity() const;
  public:
  void clear_severity();
  const ::pulse::cdm::bind::Scalar0To1Data& severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_severity();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_severity();
  void set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_severity();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.PulmonaryFibrosisData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::PatientConditionData* patientcondition_;
  ::pulse::cdm::bind::Scalar0To1Data* severity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientConditions_2eproto;
};
// -------------------------------------------------------------------

class SepsisData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.SepsisData) */ {
 public:
  SepsisData();
  virtual ~SepsisData();

  SepsisData(const SepsisData& from);
  SepsisData(SepsisData&& from) noexcept
    : SepsisData() {
    *this = ::std::move(from);
  }

  inline SepsisData& operator=(const SepsisData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SepsisData& operator=(SepsisData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SepsisData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SepsisData* internal_default_instance() {
    return reinterpret_cast<const SepsisData*>(
               &_SepsisData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SepsisData& a, SepsisData& b) {
    a.Swap(&b);
  }
  inline void Swap(SepsisData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SepsisData* New() const final {
    return CreateMaybeMessage<SepsisData>(nullptr);
  }

  SepsisData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SepsisData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SepsisData& from);
  void MergeFrom(const SepsisData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SepsisData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.SepsisData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientConditions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientConditionFieldNumber = 1,
    kSeverityFieldNumber = 2,
  };
  // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
  bool has_patientcondition() const;
  private:
  bool _internal_has_patientcondition() const;
  public:
  void clear_patientcondition();
  const ::pulse::cdm::bind::PatientConditionData& patientcondition() const;
  ::pulse::cdm::bind::PatientConditionData* release_patientcondition();
  ::pulse::cdm::bind::PatientConditionData* mutable_patientcondition();
  void set_allocated_patientcondition(::pulse::cdm::bind::PatientConditionData* patientcondition);
  private:
  const ::pulse::cdm::bind::PatientConditionData& _internal_patientcondition() const;
  ::pulse::cdm::bind::PatientConditionData* _internal_mutable_patientcondition();
  public:

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  bool has_severity() const;
  private:
  bool _internal_has_severity() const;
  public:
  void clear_severity();
  const ::pulse::cdm::bind::Scalar0To1Data& severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_severity();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_severity();
  void set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_severity();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.SepsisData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::PatientConditionData* patientcondition_;
  ::pulse::cdm::bind::Scalar0To1Data* severity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientConditions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AnyPatientConditionData

// .pulse.cdm.bind.AcuteRespiratoryDistressSyndromeData AcuteRespiratoryDistressSyndrome = 1;
inline bool AnyPatientConditionData::_internal_has_acuterespiratorydistresssyndrome() const {
  return Condition_case() == kAcuteRespiratoryDistressSyndrome;
}
inline bool AnyPatientConditionData::has_acuterespiratorydistresssyndrome() const {
  return _internal_has_acuterespiratorydistresssyndrome();
}
inline void AnyPatientConditionData::set_has_acuterespiratorydistresssyndrome() {
  _oneof_case_[0] = kAcuteRespiratoryDistressSyndrome;
}
inline void AnyPatientConditionData::clear_acuterespiratorydistresssyndrome() {
  if (_internal_has_acuterespiratorydistresssyndrome()) {
    delete Condition_.acuterespiratorydistresssyndrome_;
    clear_has_Condition();
  }
}
inline ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeData* AnyPatientConditionData::release_acuterespiratorydistresssyndrome() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyPatientConditionData.AcuteRespiratoryDistressSyndrome)
  if (has_acuterespiratorydistresssyndrome()) {
    clear_has_Condition();
      ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeData* temp = Condition_.acuterespiratorydistresssyndrome_;
    Condition_.acuterespiratorydistresssyndrome_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeData& AnyPatientConditionData::_internal_acuterespiratorydistresssyndrome() const {
  return _internal_has_acuterespiratorydistresssyndrome()
      ? *Condition_.acuterespiratorydistresssyndrome_
      : *reinterpret_cast< ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeData*>(&::pulse::cdm::bind::_AcuteRespiratoryDistressSyndromeData_default_instance_);
}
inline const ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeData& AnyPatientConditionData::acuterespiratorydistresssyndrome() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyPatientConditionData.AcuteRespiratoryDistressSyndrome)
  return _internal_acuterespiratorydistresssyndrome();
}
inline ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeData* AnyPatientConditionData::_internal_mutable_acuterespiratorydistresssyndrome() {
  if (!_internal_has_acuterespiratorydistresssyndrome()) {
    clear_Condition();
    set_has_acuterespiratorydistresssyndrome();
    Condition_.acuterespiratorydistresssyndrome_ = CreateMaybeMessage< ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeData >(
        GetArenaNoVirtual());
  }
  return Condition_.acuterespiratorydistresssyndrome_;
}
inline ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeData* AnyPatientConditionData::mutable_acuterespiratorydistresssyndrome() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyPatientConditionData.AcuteRespiratoryDistressSyndrome)
  return _internal_mutable_acuterespiratorydistresssyndrome();
}

// .pulse.cdm.bind.ChronicAnemiaData ChronicAnemia = 2;
inline bool AnyPatientConditionData::_internal_has_chronicanemia() const {
  return Condition_case() == kChronicAnemia;
}
inline bool AnyPatientConditionData::has_chronicanemia() const {
  return _internal_has_chronicanemia();
}
inline void AnyPatientConditionData::set_has_chronicanemia() {
  _oneof_case_[0] = kChronicAnemia;
}
inline void AnyPatientConditionData::clear_chronicanemia() {
  if (_internal_has_chronicanemia()) {
    delete Condition_.chronicanemia_;
    clear_has_Condition();
  }
}
inline ::pulse::cdm::bind::ChronicAnemiaData* AnyPatientConditionData::release_chronicanemia() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyPatientConditionData.ChronicAnemia)
  if (has_chronicanemia()) {
    clear_has_Condition();
      ::pulse::cdm::bind::ChronicAnemiaData* temp = Condition_.chronicanemia_;
    Condition_.chronicanemia_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::ChronicAnemiaData& AnyPatientConditionData::_internal_chronicanemia() const {
  return _internal_has_chronicanemia()
      ? *Condition_.chronicanemia_
      : *reinterpret_cast< ::pulse::cdm::bind::ChronicAnemiaData*>(&::pulse::cdm::bind::_ChronicAnemiaData_default_instance_);
}
inline const ::pulse::cdm::bind::ChronicAnemiaData& AnyPatientConditionData::chronicanemia() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyPatientConditionData.ChronicAnemia)
  return _internal_chronicanemia();
}
inline ::pulse::cdm::bind::ChronicAnemiaData* AnyPatientConditionData::_internal_mutable_chronicanemia() {
  if (!_internal_has_chronicanemia()) {
    clear_Condition();
    set_has_chronicanemia();
    Condition_.chronicanemia_ = CreateMaybeMessage< ::pulse::cdm::bind::ChronicAnemiaData >(
        GetArenaNoVirtual());
  }
  return Condition_.chronicanemia_;
}
inline ::pulse::cdm::bind::ChronicAnemiaData* AnyPatientConditionData::mutable_chronicanemia() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyPatientConditionData.ChronicAnemia)
  return _internal_mutable_chronicanemia();
}

// .pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseData ChronicObstructivePulmonaryDisease = 3;
inline bool AnyPatientConditionData::_internal_has_chronicobstructivepulmonarydisease() const {
  return Condition_case() == kChronicObstructivePulmonaryDisease;
}
inline bool AnyPatientConditionData::has_chronicobstructivepulmonarydisease() const {
  return _internal_has_chronicobstructivepulmonarydisease();
}
inline void AnyPatientConditionData::set_has_chronicobstructivepulmonarydisease() {
  _oneof_case_[0] = kChronicObstructivePulmonaryDisease;
}
inline void AnyPatientConditionData::clear_chronicobstructivepulmonarydisease() {
  if (_internal_has_chronicobstructivepulmonarydisease()) {
    delete Condition_.chronicobstructivepulmonarydisease_;
    clear_has_Condition();
  }
}
inline ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseData* AnyPatientConditionData::release_chronicobstructivepulmonarydisease() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyPatientConditionData.ChronicObstructivePulmonaryDisease)
  if (has_chronicobstructivepulmonarydisease()) {
    clear_has_Condition();
      ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseData* temp = Condition_.chronicobstructivepulmonarydisease_;
    Condition_.chronicobstructivepulmonarydisease_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseData& AnyPatientConditionData::_internal_chronicobstructivepulmonarydisease() const {
  return _internal_has_chronicobstructivepulmonarydisease()
      ? *Condition_.chronicobstructivepulmonarydisease_
      : *reinterpret_cast< ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseData*>(&::pulse::cdm::bind::_ChronicObstructivePulmonaryDiseaseData_default_instance_);
}
inline const ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseData& AnyPatientConditionData::chronicobstructivepulmonarydisease() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyPatientConditionData.ChronicObstructivePulmonaryDisease)
  return _internal_chronicobstructivepulmonarydisease();
}
inline ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseData* AnyPatientConditionData::_internal_mutable_chronicobstructivepulmonarydisease() {
  if (!_internal_has_chronicobstructivepulmonarydisease()) {
    clear_Condition();
    set_has_chronicobstructivepulmonarydisease();
    Condition_.chronicobstructivepulmonarydisease_ = CreateMaybeMessage< ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseData >(
        GetArenaNoVirtual());
  }
  return Condition_.chronicobstructivepulmonarydisease_;
}
inline ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseData* AnyPatientConditionData::mutable_chronicobstructivepulmonarydisease() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyPatientConditionData.ChronicObstructivePulmonaryDisease)
  return _internal_mutable_chronicobstructivepulmonarydisease();
}

// .pulse.cdm.bind.ChronicPericardialEffusionData ChronicPericardialEffusion = 4;
inline bool AnyPatientConditionData::_internal_has_chronicpericardialeffusion() const {
  return Condition_case() == kChronicPericardialEffusion;
}
inline bool AnyPatientConditionData::has_chronicpericardialeffusion() const {
  return _internal_has_chronicpericardialeffusion();
}
inline void AnyPatientConditionData::set_has_chronicpericardialeffusion() {
  _oneof_case_[0] = kChronicPericardialEffusion;
}
inline void AnyPatientConditionData::clear_chronicpericardialeffusion() {
  if (_internal_has_chronicpericardialeffusion()) {
    delete Condition_.chronicpericardialeffusion_;
    clear_has_Condition();
  }
}
inline ::pulse::cdm::bind::ChronicPericardialEffusionData* AnyPatientConditionData::release_chronicpericardialeffusion() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyPatientConditionData.ChronicPericardialEffusion)
  if (has_chronicpericardialeffusion()) {
    clear_has_Condition();
      ::pulse::cdm::bind::ChronicPericardialEffusionData* temp = Condition_.chronicpericardialeffusion_;
    Condition_.chronicpericardialeffusion_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::ChronicPericardialEffusionData& AnyPatientConditionData::_internal_chronicpericardialeffusion() const {
  return _internal_has_chronicpericardialeffusion()
      ? *Condition_.chronicpericardialeffusion_
      : *reinterpret_cast< ::pulse::cdm::bind::ChronicPericardialEffusionData*>(&::pulse::cdm::bind::_ChronicPericardialEffusionData_default_instance_);
}
inline const ::pulse::cdm::bind::ChronicPericardialEffusionData& AnyPatientConditionData::chronicpericardialeffusion() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyPatientConditionData.ChronicPericardialEffusion)
  return _internal_chronicpericardialeffusion();
}
inline ::pulse::cdm::bind::ChronicPericardialEffusionData* AnyPatientConditionData::_internal_mutable_chronicpericardialeffusion() {
  if (!_internal_has_chronicpericardialeffusion()) {
    clear_Condition();
    set_has_chronicpericardialeffusion();
    Condition_.chronicpericardialeffusion_ = CreateMaybeMessage< ::pulse::cdm::bind::ChronicPericardialEffusionData >(
        GetArenaNoVirtual());
  }
  return Condition_.chronicpericardialeffusion_;
}
inline ::pulse::cdm::bind::ChronicPericardialEffusionData* AnyPatientConditionData::mutable_chronicpericardialeffusion() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyPatientConditionData.ChronicPericardialEffusion)
  return _internal_mutable_chronicpericardialeffusion();
}

// .pulse.cdm.bind.ChronicRenalStenosisData ChronicRenalStenosis = 5;
inline bool AnyPatientConditionData::_internal_has_chronicrenalstenosis() const {
  return Condition_case() == kChronicRenalStenosis;
}
inline bool AnyPatientConditionData::has_chronicrenalstenosis() const {
  return _internal_has_chronicrenalstenosis();
}
inline void AnyPatientConditionData::set_has_chronicrenalstenosis() {
  _oneof_case_[0] = kChronicRenalStenosis;
}
inline void AnyPatientConditionData::clear_chronicrenalstenosis() {
  if (_internal_has_chronicrenalstenosis()) {
    delete Condition_.chronicrenalstenosis_;
    clear_has_Condition();
  }
}
inline ::pulse::cdm::bind::ChronicRenalStenosisData* AnyPatientConditionData::release_chronicrenalstenosis() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyPatientConditionData.ChronicRenalStenosis)
  if (has_chronicrenalstenosis()) {
    clear_has_Condition();
      ::pulse::cdm::bind::ChronicRenalStenosisData* temp = Condition_.chronicrenalstenosis_;
    Condition_.chronicrenalstenosis_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::ChronicRenalStenosisData& AnyPatientConditionData::_internal_chronicrenalstenosis() const {
  return _internal_has_chronicrenalstenosis()
      ? *Condition_.chronicrenalstenosis_
      : *reinterpret_cast< ::pulse::cdm::bind::ChronicRenalStenosisData*>(&::pulse::cdm::bind::_ChronicRenalStenosisData_default_instance_);
}
inline const ::pulse::cdm::bind::ChronicRenalStenosisData& AnyPatientConditionData::chronicrenalstenosis() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyPatientConditionData.ChronicRenalStenosis)
  return _internal_chronicrenalstenosis();
}
inline ::pulse::cdm::bind::ChronicRenalStenosisData* AnyPatientConditionData::_internal_mutable_chronicrenalstenosis() {
  if (!_internal_has_chronicrenalstenosis()) {
    clear_Condition();
    set_has_chronicrenalstenosis();
    Condition_.chronicrenalstenosis_ = CreateMaybeMessage< ::pulse::cdm::bind::ChronicRenalStenosisData >(
        GetArenaNoVirtual());
  }
  return Condition_.chronicrenalstenosis_;
}
inline ::pulse::cdm::bind::ChronicRenalStenosisData* AnyPatientConditionData::mutable_chronicrenalstenosis() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyPatientConditionData.ChronicRenalStenosis)
  return _internal_mutable_chronicrenalstenosis();
}

// .pulse.cdm.bind.ChronicVentricularSystolicDysfunctionData ChronicVentricularSystolicDysfunction = 6;
inline bool AnyPatientConditionData::_internal_has_chronicventricularsystolicdysfunction() const {
  return Condition_case() == kChronicVentricularSystolicDysfunction;
}
inline bool AnyPatientConditionData::has_chronicventricularsystolicdysfunction() const {
  return _internal_has_chronicventricularsystolicdysfunction();
}
inline void AnyPatientConditionData::set_has_chronicventricularsystolicdysfunction() {
  _oneof_case_[0] = kChronicVentricularSystolicDysfunction;
}
inline void AnyPatientConditionData::clear_chronicventricularsystolicdysfunction() {
  if (_internal_has_chronicventricularsystolicdysfunction()) {
    delete Condition_.chronicventricularsystolicdysfunction_;
    clear_has_Condition();
  }
}
inline ::pulse::cdm::bind::ChronicVentricularSystolicDysfunctionData* AnyPatientConditionData::release_chronicventricularsystolicdysfunction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyPatientConditionData.ChronicVentricularSystolicDysfunction)
  if (has_chronicventricularsystolicdysfunction()) {
    clear_has_Condition();
      ::pulse::cdm::bind::ChronicVentricularSystolicDysfunctionData* temp = Condition_.chronicventricularsystolicdysfunction_;
    Condition_.chronicventricularsystolicdysfunction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::ChronicVentricularSystolicDysfunctionData& AnyPatientConditionData::_internal_chronicventricularsystolicdysfunction() const {
  return _internal_has_chronicventricularsystolicdysfunction()
      ? *Condition_.chronicventricularsystolicdysfunction_
      : *reinterpret_cast< ::pulse::cdm::bind::ChronicVentricularSystolicDysfunctionData*>(&::pulse::cdm::bind::_ChronicVentricularSystolicDysfunctionData_default_instance_);
}
inline const ::pulse::cdm::bind::ChronicVentricularSystolicDysfunctionData& AnyPatientConditionData::chronicventricularsystolicdysfunction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyPatientConditionData.ChronicVentricularSystolicDysfunction)
  return _internal_chronicventricularsystolicdysfunction();
}
inline ::pulse::cdm::bind::ChronicVentricularSystolicDysfunctionData* AnyPatientConditionData::_internal_mutable_chronicventricularsystolicdysfunction() {
  if (!_internal_has_chronicventricularsystolicdysfunction()) {
    clear_Condition();
    set_has_chronicventricularsystolicdysfunction();
    Condition_.chronicventricularsystolicdysfunction_ = CreateMaybeMessage< ::pulse::cdm::bind::ChronicVentricularSystolicDysfunctionData >(
        GetArenaNoVirtual());
  }
  return Condition_.chronicventricularsystolicdysfunction_;
}
inline ::pulse::cdm::bind::ChronicVentricularSystolicDysfunctionData* AnyPatientConditionData::mutable_chronicventricularsystolicdysfunction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyPatientConditionData.ChronicVentricularSystolicDysfunction)
  return _internal_mutable_chronicventricularsystolicdysfunction();
}

// .pulse.cdm.bind.ConsumeMealData ConsumeMeal = 7;
inline bool AnyPatientConditionData::_internal_has_consumemeal() const {
  return Condition_case() == kConsumeMeal;
}
inline bool AnyPatientConditionData::has_consumemeal() const {
  return _internal_has_consumemeal();
}
inline void AnyPatientConditionData::set_has_consumemeal() {
  _oneof_case_[0] = kConsumeMeal;
}
inline void AnyPatientConditionData::clear_consumemeal() {
  if (_internal_has_consumemeal()) {
    delete Condition_.consumemeal_;
    clear_has_Condition();
  }
}
inline ::pulse::cdm::bind::ConsumeMealData* AnyPatientConditionData::release_consumemeal() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyPatientConditionData.ConsumeMeal)
  if (has_consumemeal()) {
    clear_has_Condition();
      ::pulse::cdm::bind::ConsumeMealData* temp = Condition_.consumemeal_;
    Condition_.consumemeal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::ConsumeMealData& AnyPatientConditionData::_internal_consumemeal() const {
  return _internal_has_consumemeal()
      ? *Condition_.consumemeal_
      : *reinterpret_cast< ::pulse::cdm::bind::ConsumeMealData*>(&::pulse::cdm::bind::_ConsumeMealData_default_instance_);
}
inline const ::pulse::cdm::bind::ConsumeMealData& AnyPatientConditionData::consumemeal() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyPatientConditionData.ConsumeMeal)
  return _internal_consumemeal();
}
inline ::pulse::cdm::bind::ConsumeMealData* AnyPatientConditionData::_internal_mutable_consumemeal() {
  if (!_internal_has_consumemeal()) {
    clear_Condition();
    set_has_consumemeal();
    Condition_.consumemeal_ = CreateMaybeMessage< ::pulse::cdm::bind::ConsumeMealData >(
        GetArenaNoVirtual());
  }
  return Condition_.consumemeal_;
}
inline ::pulse::cdm::bind::ConsumeMealData* AnyPatientConditionData::mutable_consumemeal() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyPatientConditionData.ConsumeMeal)
  return _internal_mutable_consumemeal();
}

// .pulse.cdm.bind.ImpairedAlveolarExchangeData ImpairedAlveolarExchange = 8;
inline bool AnyPatientConditionData::_internal_has_impairedalveolarexchange() const {
  return Condition_case() == kImpairedAlveolarExchange;
}
inline bool AnyPatientConditionData::has_impairedalveolarexchange() const {
  return _internal_has_impairedalveolarexchange();
}
inline void AnyPatientConditionData::set_has_impairedalveolarexchange() {
  _oneof_case_[0] = kImpairedAlveolarExchange;
}
inline void AnyPatientConditionData::clear_impairedalveolarexchange() {
  if (_internal_has_impairedalveolarexchange()) {
    delete Condition_.impairedalveolarexchange_;
    clear_has_Condition();
  }
}
inline ::pulse::cdm::bind::ImpairedAlveolarExchangeData* AnyPatientConditionData::release_impairedalveolarexchange() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyPatientConditionData.ImpairedAlveolarExchange)
  if (has_impairedalveolarexchange()) {
    clear_has_Condition();
      ::pulse::cdm::bind::ImpairedAlveolarExchangeData* temp = Condition_.impairedalveolarexchange_;
    Condition_.impairedalveolarexchange_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::ImpairedAlveolarExchangeData& AnyPatientConditionData::_internal_impairedalveolarexchange() const {
  return _internal_has_impairedalveolarexchange()
      ? *Condition_.impairedalveolarexchange_
      : *reinterpret_cast< ::pulse::cdm::bind::ImpairedAlveolarExchangeData*>(&::pulse::cdm::bind::_ImpairedAlveolarExchangeData_default_instance_);
}
inline const ::pulse::cdm::bind::ImpairedAlveolarExchangeData& AnyPatientConditionData::impairedalveolarexchange() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyPatientConditionData.ImpairedAlveolarExchange)
  return _internal_impairedalveolarexchange();
}
inline ::pulse::cdm::bind::ImpairedAlveolarExchangeData* AnyPatientConditionData::_internal_mutable_impairedalveolarexchange() {
  if (!_internal_has_impairedalveolarexchange()) {
    clear_Condition();
    set_has_impairedalveolarexchange();
    Condition_.impairedalveolarexchange_ = CreateMaybeMessage< ::pulse::cdm::bind::ImpairedAlveolarExchangeData >(
        GetArenaNoVirtual());
  }
  return Condition_.impairedalveolarexchange_;
}
inline ::pulse::cdm::bind::ImpairedAlveolarExchangeData* AnyPatientConditionData::mutable_impairedalveolarexchange() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyPatientConditionData.ImpairedAlveolarExchange)
  return _internal_mutable_impairedalveolarexchange();
}

// .pulse.cdm.bind.LobarPneumoniaData LobarPneumonia = 9;
inline bool AnyPatientConditionData::_internal_has_lobarpneumonia() const {
  return Condition_case() == kLobarPneumonia;
}
inline bool AnyPatientConditionData::has_lobarpneumonia() const {
  return _internal_has_lobarpneumonia();
}
inline void AnyPatientConditionData::set_has_lobarpneumonia() {
  _oneof_case_[0] = kLobarPneumonia;
}
inline void AnyPatientConditionData::clear_lobarpneumonia() {
  if (_internal_has_lobarpneumonia()) {
    delete Condition_.lobarpneumonia_;
    clear_has_Condition();
  }
}
inline ::pulse::cdm::bind::LobarPneumoniaData* AnyPatientConditionData::release_lobarpneumonia() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyPatientConditionData.LobarPneumonia)
  if (has_lobarpneumonia()) {
    clear_has_Condition();
      ::pulse::cdm::bind::LobarPneumoniaData* temp = Condition_.lobarpneumonia_;
    Condition_.lobarpneumonia_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::LobarPneumoniaData& AnyPatientConditionData::_internal_lobarpneumonia() const {
  return _internal_has_lobarpneumonia()
      ? *Condition_.lobarpneumonia_
      : *reinterpret_cast< ::pulse::cdm::bind::LobarPneumoniaData*>(&::pulse::cdm::bind::_LobarPneumoniaData_default_instance_);
}
inline const ::pulse::cdm::bind::LobarPneumoniaData& AnyPatientConditionData::lobarpneumonia() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyPatientConditionData.LobarPneumonia)
  return _internal_lobarpneumonia();
}
inline ::pulse::cdm::bind::LobarPneumoniaData* AnyPatientConditionData::_internal_mutable_lobarpneumonia() {
  if (!_internal_has_lobarpneumonia()) {
    clear_Condition();
    set_has_lobarpneumonia();
    Condition_.lobarpneumonia_ = CreateMaybeMessage< ::pulse::cdm::bind::LobarPneumoniaData >(
        GetArenaNoVirtual());
  }
  return Condition_.lobarpneumonia_;
}
inline ::pulse::cdm::bind::LobarPneumoniaData* AnyPatientConditionData::mutable_lobarpneumonia() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyPatientConditionData.LobarPneumonia)
  return _internal_mutable_lobarpneumonia();
}

// .pulse.cdm.bind.PulmonaryFibrosisData PulmonaryFibrosis = 10;
inline bool AnyPatientConditionData::_internal_has_pulmonaryfibrosis() const {
  return Condition_case() == kPulmonaryFibrosis;
}
inline bool AnyPatientConditionData::has_pulmonaryfibrosis() const {
  return _internal_has_pulmonaryfibrosis();
}
inline void AnyPatientConditionData::set_has_pulmonaryfibrosis() {
  _oneof_case_[0] = kPulmonaryFibrosis;
}
inline void AnyPatientConditionData::clear_pulmonaryfibrosis() {
  if (_internal_has_pulmonaryfibrosis()) {
    delete Condition_.pulmonaryfibrosis_;
    clear_has_Condition();
  }
}
inline ::pulse::cdm::bind::PulmonaryFibrosisData* AnyPatientConditionData::release_pulmonaryfibrosis() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyPatientConditionData.PulmonaryFibrosis)
  if (has_pulmonaryfibrosis()) {
    clear_has_Condition();
      ::pulse::cdm::bind::PulmonaryFibrosisData* temp = Condition_.pulmonaryfibrosis_;
    Condition_.pulmonaryfibrosis_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::PulmonaryFibrosisData& AnyPatientConditionData::_internal_pulmonaryfibrosis() const {
  return _internal_has_pulmonaryfibrosis()
      ? *Condition_.pulmonaryfibrosis_
      : *reinterpret_cast< ::pulse::cdm::bind::PulmonaryFibrosisData*>(&::pulse::cdm::bind::_PulmonaryFibrosisData_default_instance_);
}
inline const ::pulse::cdm::bind::PulmonaryFibrosisData& AnyPatientConditionData::pulmonaryfibrosis() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyPatientConditionData.PulmonaryFibrosis)
  return _internal_pulmonaryfibrosis();
}
inline ::pulse::cdm::bind::PulmonaryFibrosisData* AnyPatientConditionData::_internal_mutable_pulmonaryfibrosis() {
  if (!_internal_has_pulmonaryfibrosis()) {
    clear_Condition();
    set_has_pulmonaryfibrosis();
    Condition_.pulmonaryfibrosis_ = CreateMaybeMessage< ::pulse::cdm::bind::PulmonaryFibrosisData >(
        GetArenaNoVirtual());
  }
  return Condition_.pulmonaryfibrosis_;
}
inline ::pulse::cdm::bind::PulmonaryFibrosisData* AnyPatientConditionData::mutable_pulmonaryfibrosis() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyPatientConditionData.PulmonaryFibrosis)
  return _internal_mutable_pulmonaryfibrosis();
}

// .pulse.cdm.bind.SepsisData Sepsis = 11;
inline bool AnyPatientConditionData::_internal_has_sepsis() const {
  return Condition_case() == kSepsis;
}
inline bool AnyPatientConditionData::has_sepsis() const {
  return _internal_has_sepsis();
}
inline void AnyPatientConditionData::set_has_sepsis() {
  _oneof_case_[0] = kSepsis;
}
inline void AnyPatientConditionData::clear_sepsis() {
  if (_internal_has_sepsis()) {
    delete Condition_.sepsis_;
    clear_has_Condition();
  }
}
inline ::pulse::cdm::bind::SepsisData* AnyPatientConditionData::release_sepsis() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyPatientConditionData.Sepsis)
  if (has_sepsis()) {
    clear_has_Condition();
      ::pulse::cdm::bind::SepsisData* temp = Condition_.sepsis_;
    Condition_.sepsis_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::SepsisData& AnyPatientConditionData::_internal_sepsis() const {
  return _internal_has_sepsis()
      ? *Condition_.sepsis_
      : *reinterpret_cast< ::pulse::cdm::bind::SepsisData*>(&::pulse::cdm::bind::_SepsisData_default_instance_);
}
inline const ::pulse::cdm::bind::SepsisData& AnyPatientConditionData::sepsis() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyPatientConditionData.Sepsis)
  return _internal_sepsis();
}
inline ::pulse::cdm::bind::SepsisData* AnyPatientConditionData::_internal_mutable_sepsis() {
  if (!_internal_has_sepsis()) {
    clear_Condition();
    set_has_sepsis();
    Condition_.sepsis_ = CreateMaybeMessage< ::pulse::cdm::bind::SepsisData >(
        GetArenaNoVirtual());
  }
  return Condition_.sepsis_;
}
inline ::pulse::cdm::bind::SepsisData* AnyPatientConditionData::mutable_sepsis() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyPatientConditionData.Sepsis)
  return _internal_mutable_sepsis();
}

inline bool AnyPatientConditionData::has_Condition() const {
  return Condition_case() != CONDITION_NOT_SET;
}
inline void AnyPatientConditionData::clear_has_Condition() {
  _oneof_case_[0] = CONDITION_NOT_SET;
}
inline AnyPatientConditionData::ConditionCase AnyPatientConditionData::Condition_case() const {
  return AnyPatientConditionData::ConditionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PatientConditionData

// .pulse.cdm.bind.ConditionData Condition = 1;
inline bool PatientConditionData::_internal_has_condition() const {
  return this != internal_default_instance() && condition_ != nullptr;
}
inline bool PatientConditionData::has_condition() const {
  return _internal_has_condition();
}
inline const ::pulse::cdm::bind::ConditionData& PatientConditionData::_internal_condition() const {
  const ::pulse::cdm::bind::ConditionData* p = condition_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ConditionData*>(
      &::pulse::cdm::bind::_ConditionData_default_instance_);
}
inline const ::pulse::cdm::bind::ConditionData& PatientConditionData::condition() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PatientConditionData.Condition)
  return _internal_condition();
}
inline ::pulse::cdm::bind::ConditionData* PatientConditionData::release_condition() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PatientConditionData.Condition)
  
  ::pulse::cdm::bind::ConditionData* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ConditionData* PatientConditionData::_internal_mutable_condition() {
  
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ConditionData>(GetArenaNoVirtual());
    condition_ = p;
  }
  return condition_;
}
inline ::pulse::cdm::bind::ConditionData* PatientConditionData::mutable_condition() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PatientConditionData.Condition)
  return _internal_mutable_condition();
}
inline void PatientConditionData::set_allocated_condition(::pulse::cdm::bind::ConditionData* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(condition_);
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    
  } else {
    
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PatientConditionData.Condition)
}

// -------------------------------------------------------------------

// AcuteRespiratoryDistressSyndromeData

// .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
inline bool AcuteRespiratoryDistressSyndromeData::_internal_has_patientcondition() const {
  return this != internal_default_instance() && patientcondition_ != nullptr;
}
inline bool AcuteRespiratoryDistressSyndromeData::has_patientcondition() const {
  return _internal_has_patientcondition();
}
inline void AcuteRespiratoryDistressSyndromeData::clear_patientcondition() {
  if (GetArenaNoVirtual() == nullptr && patientcondition_ != nullptr) {
    delete patientcondition_;
  }
  patientcondition_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientConditionData& AcuteRespiratoryDistressSyndromeData::_internal_patientcondition() const {
  const ::pulse::cdm::bind::PatientConditionData* p = patientcondition_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::PatientConditionData*>(
      &::pulse::cdm::bind::_PatientConditionData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientConditionData& AcuteRespiratoryDistressSyndromeData::patientcondition() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeData.PatientCondition)
  return _internal_patientcondition();
}
inline ::pulse::cdm::bind::PatientConditionData* AcuteRespiratoryDistressSyndromeData::release_patientcondition() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeData.PatientCondition)
  
  ::pulse::cdm::bind::PatientConditionData* temp = patientcondition_;
  patientcondition_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientConditionData* AcuteRespiratoryDistressSyndromeData::_internal_mutable_patientcondition() {
  
  if (patientcondition_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientConditionData>(GetArenaNoVirtual());
    patientcondition_ = p;
  }
  return patientcondition_;
}
inline ::pulse::cdm::bind::PatientConditionData* AcuteRespiratoryDistressSyndromeData::mutable_patientcondition() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeData.PatientCondition)
  return _internal_mutable_patientcondition();
}
inline void AcuteRespiratoryDistressSyndromeData::set_allocated_patientcondition(::pulse::cdm::bind::PatientConditionData* patientcondition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete patientcondition_;
  }
  if (patientcondition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      patientcondition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientcondition, submessage_arena);
    }
    
  } else {
    
  }
  patientcondition_ = patientcondition;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeData.PatientCondition)
}

// .pulse.cdm.bind.Scalar0To1Data Severity = 2;
inline bool AcuteRespiratoryDistressSyndromeData::_internal_has_severity() const {
  return this != internal_default_instance() && severity_ != nullptr;
}
inline bool AcuteRespiratoryDistressSyndromeData::has_severity() const {
  return _internal_has_severity();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AcuteRespiratoryDistressSyndromeData::_internal_severity() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = severity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data*>(
      &::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AcuteRespiratoryDistressSyndromeData::severity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeData.Severity)
  return _internal_severity();
}
inline ::pulse::cdm::bind::Scalar0To1Data* AcuteRespiratoryDistressSyndromeData::release_severity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeData.Severity)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AcuteRespiratoryDistressSyndromeData::_internal_mutable_severity() {
  
  if (severity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArenaNoVirtual());
    severity_ = p;
  }
  return severity_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AcuteRespiratoryDistressSyndromeData::mutable_severity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeData.Severity)
  return _internal_mutable_severity();
}
inline void AcuteRespiratoryDistressSyndromeData::set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  if (severity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      severity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, severity, submessage_arena);
    }
    
  } else {
    
  }
  severity_ = severity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeData.Severity)
}

// .pulse.cdm.bind.Scalar0To1Data LeftLungAffected = 3;
inline bool AcuteRespiratoryDistressSyndromeData::_internal_has_leftlungaffected() const {
  return this != internal_default_instance() && leftlungaffected_ != nullptr;
}
inline bool AcuteRespiratoryDistressSyndromeData::has_leftlungaffected() const {
  return _internal_has_leftlungaffected();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AcuteRespiratoryDistressSyndromeData::_internal_leftlungaffected() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = leftlungaffected_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data*>(
      &::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AcuteRespiratoryDistressSyndromeData::leftlungaffected() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeData.LeftLungAffected)
  return _internal_leftlungaffected();
}
inline ::pulse::cdm::bind::Scalar0To1Data* AcuteRespiratoryDistressSyndromeData::release_leftlungaffected() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeData.LeftLungAffected)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = leftlungaffected_;
  leftlungaffected_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AcuteRespiratoryDistressSyndromeData::_internal_mutable_leftlungaffected() {
  
  if (leftlungaffected_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArenaNoVirtual());
    leftlungaffected_ = p;
  }
  return leftlungaffected_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AcuteRespiratoryDistressSyndromeData::mutable_leftlungaffected() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeData.LeftLungAffected)
  return _internal_mutable_leftlungaffected();
}
inline void AcuteRespiratoryDistressSyndromeData::set_allocated_leftlungaffected(::pulse::cdm::bind::Scalar0To1Data* leftlungaffected) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftlungaffected_);
  }
  if (leftlungaffected) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      leftlungaffected = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leftlungaffected, submessage_arena);
    }
    
  } else {
    
  }
  leftlungaffected_ = leftlungaffected;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeData.LeftLungAffected)
}

// .pulse.cdm.bind.Scalar0To1Data RightLungAffected = 4;
inline bool AcuteRespiratoryDistressSyndromeData::_internal_has_rightlungaffected() const {
  return this != internal_default_instance() && rightlungaffected_ != nullptr;
}
inline bool AcuteRespiratoryDistressSyndromeData::has_rightlungaffected() const {
  return _internal_has_rightlungaffected();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AcuteRespiratoryDistressSyndromeData::_internal_rightlungaffected() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = rightlungaffected_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data*>(
      &::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AcuteRespiratoryDistressSyndromeData::rightlungaffected() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeData.RightLungAffected)
  return _internal_rightlungaffected();
}
inline ::pulse::cdm::bind::Scalar0To1Data* AcuteRespiratoryDistressSyndromeData::release_rightlungaffected() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeData.RightLungAffected)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = rightlungaffected_;
  rightlungaffected_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AcuteRespiratoryDistressSyndromeData::_internal_mutable_rightlungaffected() {
  
  if (rightlungaffected_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArenaNoVirtual());
    rightlungaffected_ = p;
  }
  return rightlungaffected_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AcuteRespiratoryDistressSyndromeData::mutable_rightlungaffected() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeData.RightLungAffected)
  return _internal_mutable_rightlungaffected();
}
inline void AcuteRespiratoryDistressSyndromeData::set_allocated_rightlungaffected(::pulse::cdm::bind::Scalar0To1Data* rightlungaffected) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightlungaffected_);
  }
  if (rightlungaffected) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rightlungaffected = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightlungaffected, submessage_arena);
    }
    
  } else {
    
  }
  rightlungaffected_ = rightlungaffected;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeData.RightLungAffected)
}

// -------------------------------------------------------------------

// ChronicAnemiaData

// .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
inline bool ChronicAnemiaData::_internal_has_patientcondition() const {
  return this != internal_default_instance() && patientcondition_ != nullptr;
}
inline bool ChronicAnemiaData::has_patientcondition() const {
  return _internal_has_patientcondition();
}
inline void ChronicAnemiaData::clear_patientcondition() {
  if (GetArenaNoVirtual() == nullptr && patientcondition_ != nullptr) {
    delete patientcondition_;
  }
  patientcondition_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientConditionData& ChronicAnemiaData::_internal_patientcondition() const {
  const ::pulse::cdm::bind::PatientConditionData* p = patientcondition_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::PatientConditionData*>(
      &::pulse::cdm::bind::_PatientConditionData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientConditionData& ChronicAnemiaData::patientcondition() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ChronicAnemiaData.PatientCondition)
  return _internal_patientcondition();
}
inline ::pulse::cdm::bind::PatientConditionData* ChronicAnemiaData::release_patientcondition() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ChronicAnemiaData.PatientCondition)
  
  ::pulse::cdm::bind::PatientConditionData* temp = patientcondition_;
  patientcondition_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientConditionData* ChronicAnemiaData::_internal_mutable_patientcondition() {
  
  if (patientcondition_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientConditionData>(GetArenaNoVirtual());
    patientcondition_ = p;
  }
  return patientcondition_;
}
inline ::pulse::cdm::bind::PatientConditionData* ChronicAnemiaData::mutable_patientcondition() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ChronicAnemiaData.PatientCondition)
  return _internal_mutable_patientcondition();
}
inline void ChronicAnemiaData::set_allocated_patientcondition(::pulse::cdm::bind::PatientConditionData* patientcondition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete patientcondition_;
  }
  if (patientcondition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      patientcondition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientcondition, submessage_arena);
    }
    
  } else {
    
  }
  patientcondition_ = patientcondition;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ChronicAnemiaData.PatientCondition)
}

// .pulse.cdm.bind.Scalar0To1Data ReductionFactor = 2;
inline bool ChronicAnemiaData::_internal_has_reductionfactor() const {
  return this != internal_default_instance() && reductionfactor_ != nullptr;
}
inline bool ChronicAnemiaData::has_reductionfactor() const {
  return _internal_has_reductionfactor();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& ChronicAnemiaData::_internal_reductionfactor() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = reductionfactor_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data*>(
      &::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& ChronicAnemiaData::reductionfactor() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ChronicAnemiaData.ReductionFactor)
  return _internal_reductionfactor();
}
inline ::pulse::cdm::bind::Scalar0To1Data* ChronicAnemiaData::release_reductionfactor() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ChronicAnemiaData.ReductionFactor)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = reductionfactor_;
  reductionfactor_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ChronicAnemiaData::_internal_mutable_reductionfactor() {
  
  if (reductionfactor_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArenaNoVirtual());
    reductionfactor_ = p;
  }
  return reductionfactor_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ChronicAnemiaData::mutable_reductionfactor() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ChronicAnemiaData.ReductionFactor)
  return _internal_mutable_reductionfactor();
}
inline void ChronicAnemiaData::set_allocated_reductionfactor(::pulse::cdm::bind::Scalar0To1Data* reductionfactor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reductionfactor_);
  }
  if (reductionfactor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reductionfactor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reductionfactor, submessage_arena);
    }
    
  } else {
    
  }
  reductionfactor_ = reductionfactor;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ChronicAnemiaData.ReductionFactor)
}

// -------------------------------------------------------------------

// ChronicVentricularSystolicDysfunctionData

// .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
inline bool ChronicVentricularSystolicDysfunctionData::_internal_has_patientcondition() const {
  return this != internal_default_instance() && patientcondition_ != nullptr;
}
inline bool ChronicVentricularSystolicDysfunctionData::has_patientcondition() const {
  return _internal_has_patientcondition();
}
inline void ChronicVentricularSystolicDysfunctionData::clear_patientcondition() {
  if (GetArenaNoVirtual() == nullptr && patientcondition_ != nullptr) {
    delete patientcondition_;
  }
  patientcondition_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientConditionData& ChronicVentricularSystolicDysfunctionData::_internal_patientcondition() const {
  const ::pulse::cdm::bind::PatientConditionData* p = patientcondition_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::PatientConditionData*>(
      &::pulse::cdm::bind::_PatientConditionData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientConditionData& ChronicVentricularSystolicDysfunctionData::patientcondition() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ChronicVentricularSystolicDysfunctionData.PatientCondition)
  return _internal_patientcondition();
}
inline ::pulse::cdm::bind::PatientConditionData* ChronicVentricularSystolicDysfunctionData::release_patientcondition() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ChronicVentricularSystolicDysfunctionData.PatientCondition)
  
  ::pulse::cdm::bind::PatientConditionData* temp = patientcondition_;
  patientcondition_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientConditionData* ChronicVentricularSystolicDysfunctionData::_internal_mutable_patientcondition() {
  
  if (patientcondition_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientConditionData>(GetArenaNoVirtual());
    patientcondition_ = p;
  }
  return patientcondition_;
}
inline ::pulse::cdm::bind::PatientConditionData* ChronicVentricularSystolicDysfunctionData::mutable_patientcondition() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ChronicVentricularSystolicDysfunctionData.PatientCondition)
  return _internal_mutable_patientcondition();
}
inline void ChronicVentricularSystolicDysfunctionData::set_allocated_patientcondition(::pulse::cdm::bind::PatientConditionData* patientcondition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete patientcondition_;
  }
  if (patientcondition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      patientcondition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientcondition, submessage_arena);
    }
    
  } else {
    
  }
  patientcondition_ = patientcondition;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ChronicVentricularSystolicDysfunctionData.PatientCondition)
}

// -------------------------------------------------------------------

// ChronicObstructivePulmonaryDiseaseData

// .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
inline bool ChronicObstructivePulmonaryDiseaseData::_internal_has_patientcondition() const {
  return this != internal_default_instance() && patientcondition_ != nullptr;
}
inline bool ChronicObstructivePulmonaryDiseaseData::has_patientcondition() const {
  return _internal_has_patientcondition();
}
inline void ChronicObstructivePulmonaryDiseaseData::clear_patientcondition() {
  if (GetArenaNoVirtual() == nullptr && patientcondition_ != nullptr) {
    delete patientcondition_;
  }
  patientcondition_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientConditionData& ChronicObstructivePulmonaryDiseaseData::_internal_patientcondition() const {
  const ::pulse::cdm::bind::PatientConditionData* p = patientcondition_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::PatientConditionData*>(
      &::pulse::cdm::bind::_PatientConditionData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientConditionData& ChronicObstructivePulmonaryDiseaseData::patientcondition() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseData.PatientCondition)
  return _internal_patientcondition();
}
inline ::pulse::cdm::bind::PatientConditionData* ChronicObstructivePulmonaryDiseaseData::release_patientcondition() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseData.PatientCondition)
  
  ::pulse::cdm::bind::PatientConditionData* temp = patientcondition_;
  patientcondition_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientConditionData* ChronicObstructivePulmonaryDiseaseData::_internal_mutable_patientcondition() {
  
  if (patientcondition_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientConditionData>(GetArenaNoVirtual());
    patientcondition_ = p;
  }
  return patientcondition_;
}
inline ::pulse::cdm::bind::PatientConditionData* ChronicObstructivePulmonaryDiseaseData::mutable_patientcondition() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseData.PatientCondition)
  return _internal_mutable_patientcondition();
}
inline void ChronicObstructivePulmonaryDiseaseData::set_allocated_patientcondition(::pulse::cdm::bind::PatientConditionData* patientcondition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete patientcondition_;
  }
  if (patientcondition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      patientcondition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientcondition, submessage_arena);
    }
    
  } else {
    
  }
  patientcondition_ = patientcondition;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseData.PatientCondition)
}

// .pulse.cdm.bind.Scalar0To1Data BronchitisSeverity = 2;
inline bool ChronicObstructivePulmonaryDiseaseData::_internal_has_bronchitisseverity() const {
  return this != internal_default_instance() && bronchitisseverity_ != nullptr;
}
inline bool ChronicObstructivePulmonaryDiseaseData::has_bronchitisseverity() const {
  return _internal_has_bronchitisseverity();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& ChronicObstructivePulmonaryDiseaseData::_internal_bronchitisseverity() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = bronchitisseverity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data*>(
      &::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& ChronicObstructivePulmonaryDiseaseData::bronchitisseverity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseData.BronchitisSeverity)
  return _internal_bronchitisseverity();
}
inline ::pulse::cdm::bind::Scalar0To1Data* ChronicObstructivePulmonaryDiseaseData::release_bronchitisseverity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseData.BronchitisSeverity)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = bronchitisseverity_;
  bronchitisseverity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ChronicObstructivePulmonaryDiseaseData::_internal_mutable_bronchitisseverity() {
  
  if (bronchitisseverity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArenaNoVirtual());
    bronchitisseverity_ = p;
  }
  return bronchitisseverity_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ChronicObstructivePulmonaryDiseaseData::mutable_bronchitisseverity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseData.BronchitisSeverity)
  return _internal_mutable_bronchitisseverity();
}
inline void ChronicObstructivePulmonaryDiseaseData::set_allocated_bronchitisseverity(::pulse::cdm::bind::Scalar0To1Data* bronchitisseverity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bronchitisseverity_);
  }
  if (bronchitisseverity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bronchitisseverity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bronchitisseverity, submessage_arena);
    }
    
  } else {
    
  }
  bronchitisseverity_ = bronchitisseverity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseData.BronchitisSeverity)
}

// .pulse.cdm.bind.Scalar0To1Data EmphysemaSeverity = 3;
inline bool ChronicObstructivePulmonaryDiseaseData::_internal_has_emphysemaseverity() const {
  return this != internal_default_instance() && emphysemaseverity_ != nullptr;
}
inline bool ChronicObstructivePulmonaryDiseaseData::has_emphysemaseverity() const {
  return _internal_has_emphysemaseverity();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& ChronicObstructivePulmonaryDiseaseData::_internal_emphysemaseverity() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = emphysemaseverity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data*>(
      &::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& ChronicObstructivePulmonaryDiseaseData::emphysemaseverity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseData.EmphysemaSeverity)
  return _internal_emphysemaseverity();
}
inline ::pulse::cdm::bind::Scalar0To1Data* ChronicObstructivePulmonaryDiseaseData::release_emphysemaseverity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseData.EmphysemaSeverity)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = emphysemaseverity_;
  emphysemaseverity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ChronicObstructivePulmonaryDiseaseData::_internal_mutable_emphysemaseverity() {
  
  if (emphysemaseverity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArenaNoVirtual());
    emphysemaseverity_ = p;
  }
  return emphysemaseverity_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ChronicObstructivePulmonaryDiseaseData::mutable_emphysemaseverity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseData.EmphysemaSeverity)
  return _internal_mutable_emphysemaseverity();
}
inline void ChronicObstructivePulmonaryDiseaseData::set_allocated_emphysemaseverity(::pulse::cdm::bind::Scalar0To1Data* emphysemaseverity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(emphysemaseverity_);
  }
  if (emphysemaseverity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      emphysemaseverity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emphysemaseverity, submessage_arena);
    }
    
  } else {
    
  }
  emphysemaseverity_ = emphysemaseverity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseData.EmphysemaSeverity)
}

// -------------------------------------------------------------------

// ChronicPericardialEffusionData

// .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
inline bool ChronicPericardialEffusionData::_internal_has_patientcondition() const {
  return this != internal_default_instance() && patientcondition_ != nullptr;
}
inline bool ChronicPericardialEffusionData::has_patientcondition() const {
  return _internal_has_patientcondition();
}
inline void ChronicPericardialEffusionData::clear_patientcondition() {
  if (GetArenaNoVirtual() == nullptr && patientcondition_ != nullptr) {
    delete patientcondition_;
  }
  patientcondition_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientConditionData& ChronicPericardialEffusionData::_internal_patientcondition() const {
  const ::pulse::cdm::bind::PatientConditionData* p = patientcondition_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::PatientConditionData*>(
      &::pulse::cdm::bind::_PatientConditionData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientConditionData& ChronicPericardialEffusionData::patientcondition() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ChronicPericardialEffusionData.PatientCondition)
  return _internal_patientcondition();
}
inline ::pulse::cdm::bind::PatientConditionData* ChronicPericardialEffusionData::release_patientcondition() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ChronicPericardialEffusionData.PatientCondition)
  
  ::pulse::cdm::bind::PatientConditionData* temp = patientcondition_;
  patientcondition_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientConditionData* ChronicPericardialEffusionData::_internal_mutable_patientcondition() {
  
  if (patientcondition_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientConditionData>(GetArenaNoVirtual());
    patientcondition_ = p;
  }
  return patientcondition_;
}
inline ::pulse::cdm::bind::PatientConditionData* ChronicPericardialEffusionData::mutable_patientcondition() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ChronicPericardialEffusionData.PatientCondition)
  return _internal_mutable_patientcondition();
}
inline void ChronicPericardialEffusionData::set_allocated_patientcondition(::pulse::cdm::bind::PatientConditionData* patientcondition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete patientcondition_;
  }
  if (patientcondition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      patientcondition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientcondition, submessage_arena);
    }
    
  } else {
    
  }
  patientcondition_ = patientcondition;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ChronicPericardialEffusionData.PatientCondition)
}

// .pulse.cdm.bind.ScalarVolumeData AccumulatedVolume = 2;
inline bool ChronicPericardialEffusionData::_internal_has_accumulatedvolume() const {
  return this != internal_default_instance() && accumulatedvolume_ != nullptr;
}
inline bool ChronicPericardialEffusionData::has_accumulatedvolume() const {
  return _internal_has_accumulatedvolume();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& ChronicPericardialEffusionData::_internal_accumulatedvolume() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = accumulatedvolume_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData*>(
      &::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& ChronicPericardialEffusionData::accumulatedvolume() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ChronicPericardialEffusionData.AccumulatedVolume)
  return _internal_accumulatedvolume();
}
inline ::pulse::cdm::bind::ScalarVolumeData* ChronicPericardialEffusionData::release_accumulatedvolume() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ChronicPericardialEffusionData.AccumulatedVolume)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = accumulatedvolume_;
  accumulatedvolume_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* ChronicPericardialEffusionData::_internal_mutable_accumulatedvolume() {
  
  if (accumulatedvolume_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArenaNoVirtual());
    accumulatedvolume_ = p;
  }
  return accumulatedvolume_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* ChronicPericardialEffusionData::mutable_accumulatedvolume() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ChronicPericardialEffusionData.AccumulatedVolume)
  return _internal_mutable_accumulatedvolume();
}
inline void ChronicPericardialEffusionData::set_allocated_accumulatedvolume(::pulse::cdm::bind::ScalarVolumeData* accumulatedvolume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(accumulatedvolume_);
  }
  if (accumulatedvolume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      accumulatedvolume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accumulatedvolume, submessage_arena);
    }
    
  } else {
    
  }
  accumulatedvolume_ = accumulatedvolume;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ChronicPericardialEffusionData.AccumulatedVolume)
}

// -------------------------------------------------------------------

// ChronicRenalStenosisData

// .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
inline bool ChronicRenalStenosisData::_internal_has_patientcondition() const {
  return this != internal_default_instance() && patientcondition_ != nullptr;
}
inline bool ChronicRenalStenosisData::has_patientcondition() const {
  return _internal_has_patientcondition();
}
inline void ChronicRenalStenosisData::clear_patientcondition() {
  if (GetArenaNoVirtual() == nullptr && patientcondition_ != nullptr) {
    delete patientcondition_;
  }
  patientcondition_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientConditionData& ChronicRenalStenosisData::_internal_patientcondition() const {
  const ::pulse::cdm::bind::PatientConditionData* p = patientcondition_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::PatientConditionData*>(
      &::pulse::cdm::bind::_PatientConditionData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientConditionData& ChronicRenalStenosisData::patientcondition() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ChronicRenalStenosisData.PatientCondition)
  return _internal_patientcondition();
}
inline ::pulse::cdm::bind::PatientConditionData* ChronicRenalStenosisData::release_patientcondition() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ChronicRenalStenosisData.PatientCondition)
  
  ::pulse::cdm::bind::PatientConditionData* temp = patientcondition_;
  patientcondition_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientConditionData* ChronicRenalStenosisData::_internal_mutable_patientcondition() {
  
  if (patientcondition_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientConditionData>(GetArenaNoVirtual());
    patientcondition_ = p;
  }
  return patientcondition_;
}
inline ::pulse::cdm::bind::PatientConditionData* ChronicRenalStenosisData::mutable_patientcondition() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ChronicRenalStenosisData.PatientCondition)
  return _internal_mutable_patientcondition();
}
inline void ChronicRenalStenosisData::set_allocated_patientcondition(::pulse::cdm::bind::PatientConditionData* patientcondition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete patientcondition_;
  }
  if (patientcondition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      patientcondition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientcondition, submessage_arena);
    }
    
  } else {
    
  }
  patientcondition_ = patientcondition;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ChronicRenalStenosisData.PatientCondition)
}

// .pulse.cdm.bind.Scalar0To1Data LeftKidneySeverity = 2;
inline bool ChronicRenalStenosisData::_internal_has_leftkidneyseverity() const {
  return this != internal_default_instance() && leftkidneyseverity_ != nullptr;
}
inline bool ChronicRenalStenosisData::has_leftkidneyseverity() const {
  return _internal_has_leftkidneyseverity();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& ChronicRenalStenosisData::_internal_leftkidneyseverity() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = leftkidneyseverity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data*>(
      &::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& ChronicRenalStenosisData::leftkidneyseverity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ChronicRenalStenosisData.LeftKidneySeverity)
  return _internal_leftkidneyseverity();
}
inline ::pulse::cdm::bind::Scalar0To1Data* ChronicRenalStenosisData::release_leftkidneyseverity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ChronicRenalStenosisData.LeftKidneySeverity)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = leftkidneyseverity_;
  leftkidneyseverity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ChronicRenalStenosisData::_internal_mutable_leftkidneyseverity() {
  
  if (leftkidneyseverity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArenaNoVirtual());
    leftkidneyseverity_ = p;
  }
  return leftkidneyseverity_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ChronicRenalStenosisData::mutable_leftkidneyseverity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ChronicRenalStenosisData.LeftKidneySeverity)
  return _internal_mutable_leftkidneyseverity();
}
inline void ChronicRenalStenosisData::set_allocated_leftkidneyseverity(::pulse::cdm::bind::Scalar0To1Data* leftkidneyseverity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftkidneyseverity_);
  }
  if (leftkidneyseverity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      leftkidneyseverity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leftkidneyseverity, submessage_arena);
    }
    
  } else {
    
  }
  leftkidneyseverity_ = leftkidneyseverity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ChronicRenalStenosisData.LeftKidneySeverity)
}

// .pulse.cdm.bind.Scalar0To1Data RightKidneySeverity = 3;
inline bool ChronicRenalStenosisData::_internal_has_rightkidneyseverity() const {
  return this != internal_default_instance() && rightkidneyseverity_ != nullptr;
}
inline bool ChronicRenalStenosisData::has_rightkidneyseverity() const {
  return _internal_has_rightkidneyseverity();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& ChronicRenalStenosisData::_internal_rightkidneyseverity() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = rightkidneyseverity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data*>(
      &::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& ChronicRenalStenosisData::rightkidneyseverity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ChronicRenalStenosisData.RightKidneySeverity)
  return _internal_rightkidneyseverity();
}
inline ::pulse::cdm::bind::Scalar0To1Data* ChronicRenalStenosisData::release_rightkidneyseverity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ChronicRenalStenosisData.RightKidneySeverity)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = rightkidneyseverity_;
  rightkidneyseverity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ChronicRenalStenosisData::_internal_mutable_rightkidneyseverity() {
  
  if (rightkidneyseverity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArenaNoVirtual());
    rightkidneyseverity_ = p;
  }
  return rightkidneyseverity_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ChronicRenalStenosisData::mutable_rightkidneyseverity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ChronicRenalStenosisData.RightKidneySeverity)
  return _internal_mutable_rightkidneyseverity();
}
inline void ChronicRenalStenosisData::set_allocated_rightkidneyseverity(::pulse::cdm::bind::Scalar0To1Data* rightkidneyseverity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightkidneyseverity_);
  }
  if (rightkidneyseverity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rightkidneyseverity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightkidneyseverity, submessage_arena);
    }
    
  } else {
    
  }
  rightkidneyseverity_ = rightkidneyseverity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ChronicRenalStenosisData.RightKidneySeverity)
}

// -------------------------------------------------------------------

// ConsumeMealData

// .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
inline bool ConsumeMealData::_internal_has_patientcondition() const {
  return this != internal_default_instance() && patientcondition_ != nullptr;
}
inline bool ConsumeMealData::has_patientcondition() const {
  return _internal_has_patientcondition();
}
inline void ConsumeMealData::clear_patientcondition() {
  if (GetArenaNoVirtual() == nullptr && patientcondition_ != nullptr) {
    delete patientcondition_;
  }
  patientcondition_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientConditionData& ConsumeMealData::_internal_patientcondition() const {
  const ::pulse::cdm::bind::PatientConditionData* p = patientcondition_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::PatientConditionData*>(
      &::pulse::cdm::bind::_PatientConditionData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientConditionData& ConsumeMealData::patientcondition() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ConsumeMealData.PatientCondition)
  return _internal_patientcondition();
}
inline ::pulse::cdm::bind::PatientConditionData* ConsumeMealData::release_patientcondition() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ConsumeMealData.PatientCondition)
  
  ::pulse::cdm::bind::PatientConditionData* temp = patientcondition_;
  patientcondition_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientConditionData* ConsumeMealData::_internal_mutable_patientcondition() {
  
  if (patientcondition_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientConditionData>(GetArenaNoVirtual());
    patientcondition_ = p;
  }
  return patientcondition_;
}
inline ::pulse::cdm::bind::PatientConditionData* ConsumeMealData::mutable_patientcondition() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ConsumeMealData.PatientCondition)
  return _internal_mutable_patientcondition();
}
inline void ConsumeMealData::set_allocated_patientcondition(::pulse::cdm::bind::PatientConditionData* patientcondition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete patientcondition_;
  }
  if (patientcondition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      patientcondition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientcondition, submessage_arena);
    }
    
  } else {
    
  }
  patientcondition_ = patientcondition;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ConsumeMealData.PatientCondition)
}

// .pulse.cdm.bind.MealData Meal = 2;
inline bool ConsumeMealData::_internal_has_meal() const {
  return Option_case() == kMeal;
}
inline bool ConsumeMealData::has_meal() const {
  return _internal_has_meal();
}
inline void ConsumeMealData::set_has_meal() {
  _oneof_case_[0] = kMeal;
}
inline ::pulse::cdm::bind::MealData* ConsumeMealData::release_meal() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ConsumeMealData.Meal)
  if (has_meal()) {
    clear_has_Option();
      ::pulse::cdm::bind::MealData* temp = Option_.meal_;
    Option_.meal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::MealData& ConsumeMealData::_internal_meal() const {
  return _internal_has_meal()
      ? *Option_.meal_
      : *reinterpret_cast< ::pulse::cdm::bind::MealData*>(&::pulse::cdm::bind::_MealData_default_instance_);
}
inline const ::pulse::cdm::bind::MealData& ConsumeMealData::meal() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ConsumeMealData.Meal)
  return _internal_meal();
}
inline ::pulse::cdm::bind::MealData* ConsumeMealData::_internal_mutable_meal() {
  if (!_internal_has_meal()) {
    clear_Option();
    set_has_meal();
    Option_.meal_ = CreateMaybeMessage< ::pulse::cdm::bind::MealData >(
        GetArenaNoVirtual());
  }
  return Option_.meal_;
}
inline ::pulse::cdm::bind::MealData* ConsumeMealData::mutable_meal() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ConsumeMealData.Meal)
  return _internal_mutable_meal();
}

// string MealFile = 3;
inline bool ConsumeMealData::_internal_has_mealfile() const {
  return Option_case() == kMealFile;
}
inline void ConsumeMealData::set_has_mealfile() {
  _oneof_case_[0] = kMealFile;
}
inline void ConsumeMealData::clear_mealfile() {
  if (_internal_has_mealfile()) {
    Option_.mealfile_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_Option();
  }
}
inline const std::string& ConsumeMealData::mealfile() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ConsumeMealData.MealFile)
  return _internal_mealfile();
}
inline void ConsumeMealData::set_mealfile(const std::string& value) {
  _internal_set_mealfile(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ConsumeMealData.MealFile)
}
inline std::string* ConsumeMealData::mutable_mealfile() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ConsumeMealData.MealFile)
  return _internal_mutable_mealfile();
}
inline const std::string& ConsumeMealData::_internal_mealfile() const {
  if (_internal_has_mealfile()) {
    return Option_.mealfile_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ConsumeMealData::_internal_set_mealfile(const std::string& value) {
  if (!_internal_has_mealfile()) {
    clear_Option();
    set_has_mealfile();
    Option_.mealfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Option_.mealfile_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConsumeMealData::set_mealfile(std::string&& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ConsumeMealData.MealFile)
  if (!_internal_has_mealfile()) {
    clear_Option();
    set_has_mealfile();
    Option_.mealfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Option_.mealfile_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.ConsumeMealData.MealFile)
}
inline void ConsumeMealData::set_mealfile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_mealfile()) {
    clear_Option();
    set_has_mealfile();
    Option_.mealfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Option_.mealfile_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.ConsumeMealData.MealFile)
}
inline void ConsumeMealData::set_mealfile(const char* value, size_t size) {
  if (!_internal_has_mealfile()) {
    clear_Option();
    set_has_mealfile();
    Option_.mealfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Option_.mealfile_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.ConsumeMealData.MealFile)
}
inline std::string* ConsumeMealData::_internal_mutable_mealfile() {
  if (!_internal_has_mealfile()) {
    clear_Option();
    set_has_mealfile();
    Option_.mealfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return Option_.mealfile_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsumeMealData::release_mealfile() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ConsumeMealData.MealFile)
  if (_internal_has_mealfile()) {
    clear_has_Option();
    return Option_.mealfile_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void ConsumeMealData::set_allocated_mealfile(std::string* mealfile) {
  if (has_Option()) {
    clear_Option();
  }
  if (mealfile != nullptr) {
    set_has_mealfile();
    Option_.mealfile_.UnsafeSetDefault(mealfile);
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ConsumeMealData.MealFile)
}

inline bool ConsumeMealData::has_Option() const {
  return Option_case() != OPTION_NOT_SET;
}
inline void ConsumeMealData::clear_has_Option() {
  _oneof_case_[0] = OPTION_NOT_SET;
}
inline ConsumeMealData::OptionCase ConsumeMealData::Option_case() const {
  return ConsumeMealData::OptionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ImpairedAlveolarExchangeData

// .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
inline bool ImpairedAlveolarExchangeData::_internal_has_patientcondition() const {
  return this != internal_default_instance() && patientcondition_ != nullptr;
}
inline bool ImpairedAlveolarExchangeData::has_patientcondition() const {
  return _internal_has_patientcondition();
}
inline void ImpairedAlveolarExchangeData::clear_patientcondition() {
  if (GetArenaNoVirtual() == nullptr && patientcondition_ != nullptr) {
    delete patientcondition_;
  }
  patientcondition_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientConditionData& ImpairedAlveolarExchangeData::_internal_patientcondition() const {
  const ::pulse::cdm::bind::PatientConditionData* p = patientcondition_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::PatientConditionData*>(
      &::pulse::cdm::bind::_PatientConditionData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientConditionData& ImpairedAlveolarExchangeData::patientcondition() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ImpairedAlveolarExchangeData.PatientCondition)
  return _internal_patientcondition();
}
inline ::pulse::cdm::bind::PatientConditionData* ImpairedAlveolarExchangeData::release_patientcondition() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ImpairedAlveolarExchangeData.PatientCondition)
  
  ::pulse::cdm::bind::PatientConditionData* temp = patientcondition_;
  patientcondition_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientConditionData* ImpairedAlveolarExchangeData::_internal_mutable_patientcondition() {
  
  if (patientcondition_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientConditionData>(GetArenaNoVirtual());
    patientcondition_ = p;
  }
  return patientcondition_;
}
inline ::pulse::cdm::bind::PatientConditionData* ImpairedAlveolarExchangeData::mutable_patientcondition() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ImpairedAlveolarExchangeData.PatientCondition)
  return _internal_mutable_patientcondition();
}
inline void ImpairedAlveolarExchangeData::set_allocated_patientcondition(::pulse::cdm::bind::PatientConditionData* patientcondition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete patientcondition_;
  }
  if (patientcondition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      patientcondition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientcondition, submessage_arena);
    }
    
  } else {
    
  }
  patientcondition_ = patientcondition;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ImpairedAlveolarExchangeData.PatientCondition)
}

// .pulse.cdm.bind.ScalarAreaData ImpairedSurfaceArea = 2;
inline bool ImpairedAlveolarExchangeData::_internal_has_impairedsurfacearea() const {
  return this != internal_default_instance() && impairedsurfacearea_ != nullptr;
}
inline bool ImpairedAlveolarExchangeData::has_impairedsurfacearea() const {
  return _internal_has_impairedsurfacearea();
}
inline const ::pulse::cdm::bind::ScalarAreaData& ImpairedAlveolarExchangeData::_internal_impairedsurfacearea() const {
  const ::pulse::cdm::bind::ScalarAreaData* p = impairedsurfacearea_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarAreaData*>(
      &::pulse::cdm::bind::_ScalarAreaData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarAreaData& ImpairedAlveolarExchangeData::impairedsurfacearea() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ImpairedAlveolarExchangeData.ImpairedSurfaceArea)
  return _internal_impairedsurfacearea();
}
inline ::pulse::cdm::bind::ScalarAreaData* ImpairedAlveolarExchangeData::release_impairedsurfacearea() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ImpairedAlveolarExchangeData.ImpairedSurfaceArea)
  
  ::pulse::cdm::bind::ScalarAreaData* temp = impairedsurfacearea_;
  impairedsurfacearea_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarAreaData* ImpairedAlveolarExchangeData::_internal_mutable_impairedsurfacearea() {
  
  if (impairedsurfacearea_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarAreaData>(GetArenaNoVirtual());
    impairedsurfacearea_ = p;
  }
  return impairedsurfacearea_;
}
inline ::pulse::cdm::bind::ScalarAreaData* ImpairedAlveolarExchangeData::mutable_impairedsurfacearea() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ImpairedAlveolarExchangeData.ImpairedSurfaceArea)
  return _internal_mutable_impairedsurfacearea();
}
inline void ImpairedAlveolarExchangeData::set_allocated_impairedsurfacearea(::pulse::cdm::bind::ScalarAreaData* impairedsurfacearea) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(impairedsurfacearea_);
  }
  if (impairedsurfacearea) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      impairedsurfacearea = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, impairedsurfacearea, submessage_arena);
    }
    
  } else {
    
  }
  impairedsurfacearea_ = impairedsurfacearea;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ImpairedAlveolarExchangeData.ImpairedSurfaceArea)
}

// .pulse.cdm.bind.Scalar0To1Data ImpairedFraction = 3;
inline bool ImpairedAlveolarExchangeData::_internal_has_impairedfraction() const {
  return this != internal_default_instance() && impairedfraction_ != nullptr;
}
inline bool ImpairedAlveolarExchangeData::has_impairedfraction() const {
  return _internal_has_impairedfraction();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& ImpairedAlveolarExchangeData::_internal_impairedfraction() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = impairedfraction_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data*>(
      &::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& ImpairedAlveolarExchangeData::impairedfraction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ImpairedAlveolarExchangeData.ImpairedFraction)
  return _internal_impairedfraction();
}
inline ::pulse::cdm::bind::Scalar0To1Data* ImpairedAlveolarExchangeData::release_impairedfraction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ImpairedAlveolarExchangeData.ImpairedFraction)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = impairedfraction_;
  impairedfraction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ImpairedAlveolarExchangeData::_internal_mutable_impairedfraction() {
  
  if (impairedfraction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArenaNoVirtual());
    impairedfraction_ = p;
  }
  return impairedfraction_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ImpairedAlveolarExchangeData::mutable_impairedfraction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ImpairedAlveolarExchangeData.ImpairedFraction)
  return _internal_mutable_impairedfraction();
}
inline void ImpairedAlveolarExchangeData::set_allocated_impairedfraction(::pulse::cdm::bind::Scalar0To1Data* impairedfraction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(impairedfraction_);
  }
  if (impairedfraction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      impairedfraction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, impairedfraction, submessage_arena);
    }
    
  } else {
    
  }
  impairedfraction_ = impairedfraction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ImpairedAlveolarExchangeData.ImpairedFraction)
}

// -------------------------------------------------------------------

// LobarPneumoniaData

// .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
inline bool LobarPneumoniaData::_internal_has_patientcondition() const {
  return this != internal_default_instance() && patientcondition_ != nullptr;
}
inline bool LobarPneumoniaData::has_patientcondition() const {
  return _internal_has_patientcondition();
}
inline void LobarPneumoniaData::clear_patientcondition() {
  if (GetArenaNoVirtual() == nullptr && patientcondition_ != nullptr) {
    delete patientcondition_;
  }
  patientcondition_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientConditionData& LobarPneumoniaData::_internal_patientcondition() const {
  const ::pulse::cdm::bind::PatientConditionData* p = patientcondition_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::PatientConditionData*>(
      &::pulse::cdm::bind::_PatientConditionData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientConditionData& LobarPneumoniaData::patientcondition() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.LobarPneumoniaData.PatientCondition)
  return _internal_patientcondition();
}
inline ::pulse::cdm::bind::PatientConditionData* LobarPneumoniaData::release_patientcondition() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.LobarPneumoniaData.PatientCondition)
  
  ::pulse::cdm::bind::PatientConditionData* temp = patientcondition_;
  patientcondition_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientConditionData* LobarPneumoniaData::_internal_mutable_patientcondition() {
  
  if (patientcondition_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientConditionData>(GetArenaNoVirtual());
    patientcondition_ = p;
  }
  return patientcondition_;
}
inline ::pulse::cdm::bind::PatientConditionData* LobarPneumoniaData::mutable_patientcondition() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.LobarPneumoniaData.PatientCondition)
  return _internal_mutable_patientcondition();
}
inline void LobarPneumoniaData::set_allocated_patientcondition(::pulse::cdm::bind::PatientConditionData* patientcondition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete patientcondition_;
  }
  if (patientcondition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      patientcondition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientcondition, submessage_arena);
    }
    
  } else {
    
  }
  patientcondition_ = patientcondition;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.LobarPneumoniaData.PatientCondition)
}

// .pulse.cdm.bind.Scalar0To1Data Severity = 2;
inline bool LobarPneumoniaData::_internal_has_severity() const {
  return this != internal_default_instance() && severity_ != nullptr;
}
inline bool LobarPneumoniaData::has_severity() const {
  return _internal_has_severity();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& LobarPneumoniaData::_internal_severity() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = severity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data*>(
      &::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& LobarPneumoniaData::severity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.LobarPneumoniaData.Severity)
  return _internal_severity();
}
inline ::pulse::cdm::bind::Scalar0To1Data* LobarPneumoniaData::release_severity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.LobarPneumoniaData.Severity)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* LobarPneumoniaData::_internal_mutable_severity() {
  
  if (severity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArenaNoVirtual());
    severity_ = p;
  }
  return severity_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* LobarPneumoniaData::mutable_severity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.LobarPneumoniaData.Severity)
  return _internal_mutable_severity();
}
inline void LobarPneumoniaData::set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  if (severity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      severity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, severity, submessage_arena);
    }
    
  } else {
    
  }
  severity_ = severity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.LobarPneumoniaData.Severity)
}

// .pulse.cdm.bind.Scalar0To1Data LeftLungAffected = 3;
inline bool LobarPneumoniaData::_internal_has_leftlungaffected() const {
  return this != internal_default_instance() && leftlungaffected_ != nullptr;
}
inline bool LobarPneumoniaData::has_leftlungaffected() const {
  return _internal_has_leftlungaffected();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& LobarPneumoniaData::_internal_leftlungaffected() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = leftlungaffected_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data*>(
      &::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& LobarPneumoniaData::leftlungaffected() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.LobarPneumoniaData.LeftLungAffected)
  return _internal_leftlungaffected();
}
inline ::pulse::cdm::bind::Scalar0To1Data* LobarPneumoniaData::release_leftlungaffected() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.LobarPneumoniaData.LeftLungAffected)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = leftlungaffected_;
  leftlungaffected_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* LobarPneumoniaData::_internal_mutable_leftlungaffected() {
  
  if (leftlungaffected_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArenaNoVirtual());
    leftlungaffected_ = p;
  }
  return leftlungaffected_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* LobarPneumoniaData::mutable_leftlungaffected() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.LobarPneumoniaData.LeftLungAffected)
  return _internal_mutable_leftlungaffected();
}
inline void LobarPneumoniaData::set_allocated_leftlungaffected(::pulse::cdm::bind::Scalar0To1Data* leftlungaffected) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftlungaffected_);
  }
  if (leftlungaffected) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      leftlungaffected = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leftlungaffected, submessage_arena);
    }
    
  } else {
    
  }
  leftlungaffected_ = leftlungaffected;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.LobarPneumoniaData.LeftLungAffected)
}

// .pulse.cdm.bind.Scalar0To1Data RightLungAffected = 4;
inline bool LobarPneumoniaData::_internal_has_rightlungaffected() const {
  return this != internal_default_instance() && rightlungaffected_ != nullptr;
}
inline bool LobarPneumoniaData::has_rightlungaffected() const {
  return _internal_has_rightlungaffected();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& LobarPneumoniaData::_internal_rightlungaffected() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = rightlungaffected_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data*>(
      &::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& LobarPneumoniaData::rightlungaffected() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.LobarPneumoniaData.RightLungAffected)
  return _internal_rightlungaffected();
}
inline ::pulse::cdm::bind::Scalar0To1Data* LobarPneumoniaData::release_rightlungaffected() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.LobarPneumoniaData.RightLungAffected)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = rightlungaffected_;
  rightlungaffected_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* LobarPneumoniaData::_internal_mutable_rightlungaffected() {
  
  if (rightlungaffected_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArenaNoVirtual());
    rightlungaffected_ = p;
  }
  return rightlungaffected_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* LobarPneumoniaData::mutable_rightlungaffected() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.LobarPneumoniaData.RightLungAffected)
  return _internal_mutable_rightlungaffected();
}
inline void LobarPneumoniaData::set_allocated_rightlungaffected(::pulse::cdm::bind::Scalar0To1Data* rightlungaffected) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightlungaffected_);
  }
  if (rightlungaffected) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rightlungaffected = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightlungaffected, submessage_arena);
    }
    
  } else {
    
  }
  rightlungaffected_ = rightlungaffected;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.LobarPneumoniaData.RightLungAffected)
}

// -------------------------------------------------------------------

// PulmonaryFibrosisData

// .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
inline bool PulmonaryFibrosisData::_internal_has_patientcondition() const {
  return this != internal_default_instance() && patientcondition_ != nullptr;
}
inline bool PulmonaryFibrosisData::has_patientcondition() const {
  return _internal_has_patientcondition();
}
inline void PulmonaryFibrosisData::clear_patientcondition() {
  if (GetArenaNoVirtual() == nullptr && patientcondition_ != nullptr) {
    delete patientcondition_;
  }
  patientcondition_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientConditionData& PulmonaryFibrosisData::_internal_patientcondition() const {
  const ::pulse::cdm::bind::PatientConditionData* p = patientcondition_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::PatientConditionData*>(
      &::pulse::cdm::bind::_PatientConditionData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientConditionData& PulmonaryFibrosisData::patientcondition() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PulmonaryFibrosisData.PatientCondition)
  return _internal_patientcondition();
}
inline ::pulse::cdm::bind::PatientConditionData* PulmonaryFibrosisData::release_patientcondition() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PulmonaryFibrosisData.PatientCondition)
  
  ::pulse::cdm::bind::PatientConditionData* temp = patientcondition_;
  patientcondition_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientConditionData* PulmonaryFibrosisData::_internal_mutable_patientcondition() {
  
  if (patientcondition_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientConditionData>(GetArenaNoVirtual());
    patientcondition_ = p;
  }
  return patientcondition_;
}
inline ::pulse::cdm::bind::PatientConditionData* PulmonaryFibrosisData::mutable_patientcondition() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PulmonaryFibrosisData.PatientCondition)
  return _internal_mutable_patientcondition();
}
inline void PulmonaryFibrosisData::set_allocated_patientcondition(::pulse::cdm::bind::PatientConditionData* patientcondition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete patientcondition_;
  }
  if (patientcondition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      patientcondition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientcondition, submessage_arena);
    }
    
  } else {
    
  }
  patientcondition_ = patientcondition;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PulmonaryFibrosisData.PatientCondition)
}

// .pulse.cdm.bind.Scalar0To1Data Severity = 2;
inline bool PulmonaryFibrosisData::_internal_has_severity() const {
  return this != internal_default_instance() && severity_ != nullptr;
}
inline bool PulmonaryFibrosisData::has_severity() const {
  return _internal_has_severity();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& PulmonaryFibrosisData::_internal_severity() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = severity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data*>(
      &::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& PulmonaryFibrosisData::severity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PulmonaryFibrosisData.Severity)
  return _internal_severity();
}
inline ::pulse::cdm::bind::Scalar0To1Data* PulmonaryFibrosisData::release_severity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PulmonaryFibrosisData.Severity)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* PulmonaryFibrosisData::_internal_mutable_severity() {
  
  if (severity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArenaNoVirtual());
    severity_ = p;
  }
  return severity_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* PulmonaryFibrosisData::mutable_severity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PulmonaryFibrosisData.Severity)
  return _internal_mutable_severity();
}
inline void PulmonaryFibrosisData::set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  if (severity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      severity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, severity, submessage_arena);
    }
    
  } else {
    
  }
  severity_ = severity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PulmonaryFibrosisData.Severity)
}

// -------------------------------------------------------------------

// SepsisData

// .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
inline bool SepsisData::_internal_has_patientcondition() const {
  return this != internal_default_instance() && patientcondition_ != nullptr;
}
inline bool SepsisData::has_patientcondition() const {
  return _internal_has_patientcondition();
}
inline void SepsisData::clear_patientcondition() {
  if (GetArenaNoVirtual() == nullptr && patientcondition_ != nullptr) {
    delete patientcondition_;
  }
  patientcondition_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientConditionData& SepsisData::_internal_patientcondition() const {
  const ::pulse::cdm::bind::PatientConditionData* p = patientcondition_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::PatientConditionData*>(
      &::pulse::cdm::bind::_PatientConditionData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientConditionData& SepsisData::patientcondition() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SepsisData.PatientCondition)
  return _internal_patientcondition();
}
inline ::pulse::cdm::bind::PatientConditionData* SepsisData::release_patientcondition() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SepsisData.PatientCondition)
  
  ::pulse::cdm::bind::PatientConditionData* temp = patientcondition_;
  patientcondition_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientConditionData* SepsisData::_internal_mutable_patientcondition() {
  
  if (patientcondition_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientConditionData>(GetArenaNoVirtual());
    patientcondition_ = p;
  }
  return patientcondition_;
}
inline ::pulse::cdm::bind::PatientConditionData* SepsisData::mutable_patientcondition() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SepsisData.PatientCondition)
  return _internal_mutable_patientcondition();
}
inline void SepsisData::set_allocated_patientcondition(::pulse::cdm::bind::PatientConditionData* patientcondition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete patientcondition_;
  }
  if (patientcondition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      patientcondition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientcondition, submessage_arena);
    }
    
  } else {
    
  }
  patientcondition_ = patientcondition;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SepsisData.PatientCondition)
}

// .pulse.cdm.bind.Scalar0To1Data Severity = 2;
inline bool SepsisData::_internal_has_severity() const {
  return this != internal_default_instance() && severity_ != nullptr;
}
inline bool SepsisData::has_severity() const {
  return _internal_has_severity();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& SepsisData::_internal_severity() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = severity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data*>(
      &::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& SepsisData::severity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SepsisData.Severity)
  return _internal_severity();
}
inline ::pulse::cdm::bind::Scalar0To1Data* SepsisData::release_severity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SepsisData.Severity)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* SepsisData::_internal_mutable_severity() {
  
  if (severity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArenaNoVirtual());
    severity_ = p;
  }
  return severity_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* SepsisData::mutable_severity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SepsisData.Severity)
  return _internal_mutable_severity();
}
inline void SepsisData::set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  if (severity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      severity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, severity, submessage_arena);
    }
    
  } else {
    
  }
  severity_ = severity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SepsisData.Severity)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bind
}  // namespace cdm
}  // namespace pulse

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fPatientConditions_2eproto
