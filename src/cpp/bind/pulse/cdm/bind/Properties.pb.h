// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/Properties.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fProperties_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fProperties_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[68]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class ArrayData;
class ArrayDataDefaultTypeInternal;
extern ArrayDataDefaultTypeInternal _ArrayData_default_instance_;
class ArrayTimeData;
class ArrayTimeDataDefaultTypeInternal;
extern ArrayTimeDataDefaultTypeInternal _ArrayTimeData_default_instance_;
class DoubleArrayData;
class DoubleArrayDataDefaultTypeInternal;
extern DoubleArrayDataDefaultTypeInternal _DoubleArrayData_default_instance_;
class FunctionData;
class FunctionDataDefaultTypeInternal;
extern FunctionDataDefaultTypeInternal _FunctionData_default_instance_;
class FunctionElectricPotentialVsTimeData;
class FunctionElectricPotentialVsTimeDataDefaultTypeInternal;
extern FunctionElectricPotentialVsTimeDataDefaultTypeInternal _FunctionElectricPotentialVsTimeData_default_instance_;
class FunctionVolumeVsTimeData;
class FunctionVolumeVsTimeDataDefaultTypeInternal;
extern FunctionVolumeVsTimeDataDefaultTypeInternal _FunctionVolumeVsTimeData_default_instance_;
class HistogramData;
class HistogramDataDefaultTypeInternal;
extern HistogramDataDefaultTypeInternal _HistogramData_default_instance_;
class HistogramFractionVsLengthData;
class HistogramFractionVsLengthDataDefaultTypeInternal;
extern HistogramFractionVsLengthDataDefaultTypeInternal _HistogramFractionVsLengthData_default_instance_;
class IntegerArrayData;
class IntegerArrayDataDefaultTypeInternal;
extern IntegerArrayDataDefaultTypeInternal _IntegerArrayData_default_instance_;
class RunningAverageData;
class RunningAverageDataDefaultTypeInternal;
extern RunningAverageDataDefaultTypeInternal _RunningAverageData_default_instance_;
class Scalar0To1Data;
class Scalar0To1DataDefaultTypeInternal;
extern Scalar0To1DataDefaultTypeInternal _Scalar0To1Data_default_instance_;
class ScalarAmountData;
class ScalarAmountDataDefaultTypeInternal;
extern ScalarAmountDataDefaultTypeInternal _ScalarAmountData_default_instance_;
class ScalarAmountPerMassData;
class ScalarAmountPerMassDataDefaultTypeInternal;
extern ScalarAmountPerMassDataDefaultTypeInternal _ScalarAmountPerMassData_default_instance_;
class ScalarAmountPerTimeData;
class ScalarAmountPerTimeDataDefaultTypeInternal;
extern ScalarAmountPerTimeDataDefaultTypeInternal _ScalarAmountPerTimeData_default_instance_;
class ScalarAmountPerVolumeData;
class ScalarAmountPerVolumeDataDefaultTypeInternal;
extern ScalarAmountPerVolumeDataDefaultTypeInternal _ScalarAmountPerVolumeData_default_instance_;
class ScalarAreaData;
class ScalarAreaDataDefaultTypeInternal;
extern ScalarAreaDataDefaultTypeInternal _ScalarAreaData_default_instance_;
class ScalarAreaPerTimePressureData;
class ScalarAreaPerTimePressureDataDefaultTypeInternal;
extern ScalarAreaPerTimePressureDataDefaultTypeInternal _ScalarAreaPerTimePressureData_default_instance_;
class ScalarData;
class ScalarDataDefaultTypeInternal;
extern ScalarDataDefaultTypeInternal _ScalarData_default_instance_;
class ScalarElectricCapacitanceData;
class ScalarElectricCapacitanceDataDefaultTypeInternal;
extern ScalarElectricCapacitanceDataDefaultTypeInternal _ScalarElectricCapacitanceData_default_instance_;
class ScalarElectricChargeData;
class ScalarElectricChargeDataDefaultTypeInternal;
extern ScalarElectricChargeDataDefaultTypeInternal _ScalarElectricChargeData_default_instance_;
class ScalarElectricCurrentData;
class ScalarElectricCurrentDataDefaultTypeInternal;
extern ScalarElectricCurrentDataDefaultTypeInternal _ScalarElectricCurrentData_default_instance_;
class ScalarElectricInductanceData;
class ScalarElectricInductanceDataDefaultTypeInternal;
extern ScalarElectricInductanceDataDefaultTypeInternal _ScalarElectricInductanceData_default_instance_;
class ScalarElectricPotentialData;
class ScalarElectricPotentialDataDefaultTypeInternal;
extern ScalarElectricPotentialDataDefaultTypeInternal _ScalarElectricPotentialData_default_instance_;
class ScalarElectricResistanceData;
class ScalarElectricResistanceDataDefaultTypeInternal;
extern ScalarElectricResistanceDataDefaultTypeInternal _ScalarElectricResistanceData_default_instance_;
class ScalarEnergyData;
class ScalarEnergyDataDefaultTypeInternal;
extern ScalarEnergyDataDefaultTypeInternal _ScalarEnergyData_default_instance_;
class ScalarEnergyPerAmountData;
class ScalarEnergyPerAmountDataDefaultTypeInternal;
extern ScalarEnergyPerAmountDataDefaultTypeInternal _ScalarEnergyPerAmountData_default_instance_;
class ScalarEnergyPerMassData;
class ScalarEnergyPerMassDataDefaultTypeInternal;
extern ScalarEnergyPerMassDataDefaultTypeInternal _ScalarEnergyPerMassData_default_instance_;
class ScalarForceData;
class ScalarForceDataDefaultTypeInternal;
extern ScalarForceDataDefaultTypeInternal _ScalarForceData_default_instance_;
class ScalarFrequencyData;
class ScalarFrequencyDataDefaultTypeInternal;
extern ScalarFrequencyDataDefaultTypeInternal _ScalarFrequencyData_default_instance_;
class ScalarHeatCapacitanceData;
class ScalarHeatCapacitanceDataDefaultTypeInternal;
extern ScalarHeatCapacitanceDataDefaultTypeInternal _ScalarHeatCapacitanceData_default_instance_;
class ScalarHeatCapacitancePerAmountData;
class ScalarHeatCapacitancePerAmountDataDefaultTypeInternal;
extern ScalarHeatCapacitancePerAmountDataDefaultTypeInternal _ScalarHeatCapacitancePerAmountData_default_instance_;
class ScalarHeatCapacitancePerMassData;
class ScalarHeatCapacitancePerMassDataDefaultTypeInternal;
extern ScalarHeatCapacitancePerMassDataDefaultTypeInternal _ScalarHeatCapacitancePerMassData_default_instance_;
class ScalarHeatConductanceData;
class ScalarHeatConductanceDataDefaultTypeInternal;
extern ScalarHeatConductanceDataDefaultTypeInternal _ScalarHeatConductanceData_default_instance_;
class ScalarHeatConductancePerAreaData;
class ScalarHeatConductancePerAreaDataDefaultTypeInternal;
extern ScalarHeatConductancePerAreaDataDefaultTypeInternal _ScalarHeatConductancePerAreaData_default_instance_;
class ScalarHeatInductanceData;
class ScalarHeatInductanceDataDefaultTypeInternal;
extern ScalarHeatInductanceDataDefaultTypeInternal _ScalarHeatInductanceData_default_instance_;
class ScalarHeatResistanceAreaData;
class ScalarHeatResistanceAreaDataDefaultTypeInternal;
extern ScalarHeatResistanceAreaDataDefaultTypeInternal _ScalarHeatResistanceAreaData_default_instance_;
class ScalarHeatResistanceData;
class ScalarHeatResistanceDataDefaultTypeInternal;
extern ScalarHeatResistanceDataDefaultTypeInternal _ScalarHeatResistanceData_default_instance_;
class ScalarInversePressureData;
class ScalarInversePressureDataDefaultTypeInternal;
extern ScalarInversePressureDataDefaultTypeInternal _ScalarInversePressureData_default_instance_;
class ScalarInverseVolumeData;
class ScalarInverseVolumeDataDefaultTypeInternal;
extern ScalarInverseVolumeDataDefaultTypeInternal _ScalarInverseVolumeData_default_instance_;
class ScalarLengthData;
class ScalarLengthDataDefaultTypeInternal;
extern ScalarLengthDataDefaultTypeInternal _ScalarLengthData_default_instance_;
class ScalarLengthPerTimeData;
class ScalarLengthPerTimeDataDefaultTypeInternal;
extern ScalarLengthPerTimeDataDefaultTypeInternal _ScalarLengthPerTimeData_default_instance_;
class ScalarLengthPerTimePressureData;
class ScalarLengthPerTimePressureDataDefaultTypeInternal;
extern ScalarLengthPerTimePressureDataDefaultTypeInternal _ScalarLengthPerTimePressureData_default_instance_;
class ScalarMassData;
class ScalarMassDataDefaultTypeInternal;
extern ScalarMassDataDefaultTypeInternal _ScalarMassData_default_instance_;
class ScalarMassPerAmountData;
class ScalarMassPerAmountDataDefaultTypeInternal;
extern ScalarMassPerAmountDataDefaultTypeInternal _ScalarMassPerAmountData_default_instance_;
class ScalarMassPerAreaTimeData;
class ScalarMassPerAreaTimeDataDefaultTypeInternal;
extern ScalarMassPerAreaTimeDataDefaultTypeInternal _ScalarMassPerAreaTimeData_default_instance_;
class ScalarMassPerMassData;
class ScalarMassPerMassDataDefaultTypeInternal;
extern ScalarMassPerMassDataDefaultTypeInternal _ScalarMassPerMassData_default_instance_;
class ScalarMassPerTimeData;
class ScalarMassPerTimeDataDefaultTypeInternal;
extern ScalarMassPerTimeDataDefaultTypeInternal _ScalarMassPerTimeData_default_instance_;
class ScalarMassPerVolumeData;
class ScalarMassPerVolumeDataDefaultTypeInternal;
extern ScalarMassPerVolumeDataDefaultTypeInternal _ScalarMassPerVolumeData_default_instance_;
class ScalarNegative1To1Data;
class ScalarNegative1To1DataDefaultTypeInternal;
extern ScalarNegative1To1DataDefaultTypeInternal _ScalarNegative1To1Data_default_instance_;
class ScalarOsmolalityData;
class ScalarOsmolalityDataDefaultTypeInternal;
extern ScalarOsmolalityDataDefaultTypeInternal _ScalarOsmolalityData_default_instance_;
class ScalarOsmolarityData;
class ScalarOsmolarityDataDefaultTypeInternal;
extern ScalarOsmolarityDataDefaultTypeInternal _ScalarOsmolarityData_default_instance_;
class ScalarPowerData;
class ScalarPowerDataDefaultTypeInternal;
extern ScalarPowerDataDefaultTypeInternal _ScalarPowerData_default_instance_;
class ScalarPowerPerAreaTemperatureToTheFourthData;
class ScalarPowerPerAreaTemperatureToTheFourthDataDefaultTypeInternal;
extern ScalarPowerPerAreaTemperatureToTheFourthDataDefaultTypeInternal _ScalarPowerPerAreaTemperatureToTheFourthData_default_instance_;
class ScalarPressureData;
class ScalarPressureDataDefaultTypeInternal;
extern ScalarPressureDataDefaultTypeInternal _ScalarPressureData_default_instance_;
class ScalarPressurePerVolumeData;
class ScalarPressurePerVolumeDataDefaultTypeInternal;
extern ScalarPressurePerVolumeDataDefaultTypeInternal _ScalarPressurePerVolumeData_default_instance_;
class ScalarPressureTimePerAreaData;
class ScalarPressureTimePerAreaDataDefaultTypeInternal;
extern ScalarPressureTimePerAreaDataDefaultTypeInternal _ScalarPressureTimePerAreaData_default_instance_;
class ScalarPressureTimePerVolumeAreaData;
class ScalarPressureTimePerVolumeAreaDataDefaultTypeInternal;
extern ScalarPressureTimePerVolumeAreaDataDefaultTypeInternal _ScalarPressureTimePerVolumeAreaData_default_instance_;
class ScalarPressureTimePerVolumeData;
class ScalarPressureTimePerVolumeDataDefaultTypeInternal;
extern ScalarPressureTimePerVolumeDataDefaultTypeInternal _ScalarPressureTimePerVolumeData_default_instance_;
class ScalarPressureTimeSquaredPerVolumeData;
class ScalarPressureTimeSquaredPerVolumeDataDefaultTypeInternal;
extern ScalarPressureTimeSquaredPerVolumeDataDefaultTypeInternal _ScalarPressureTimeSquaredPerVolumeData_default_instance_;
class ScalarTemperatureData;
class ScalarTemperatureDataDefaultTypeInternal;
extern ScalarTemperatureDataDefaultTypeInternal _ScalarTemperatureData_default_instance_;
class ScalarTimeData;
class ScalarTimeDataDefaultTypeInternal;
extern ScalarTimeDataDefaultTypeInternal _ScalarTimeData_default_instance_;
class ScalarVolumeData;
class ScalarVolumeDataDefaultTypeInternal;
extern ScalarVolumeDataDefaultTypeInternal _ScalarVolumeData_default_instance_;
class ScalarVolumePerPressureData;
class ScalarVolumePerPressureDataDefaultTypeInternal;
extern ScalarVolumePerPressureDataDefaultTypeInternal _ScalarVolumePerPressureData_default_instance_;
class ScalarVolumePerTimeAreaData;
class ScalarVolumePerTimeAreaDataDefaultTypeInternal;
extern ScalarVolumePerTimeAreaDataDefaultTypeInternal _ScalarVolumePerTimeAreaData_default_instance_;
class ScalarVolumePerTimeData;
class ScalarVolumePerTimeDataDefaultTypeInternal;
extern ScalarVolumePerTimeDataDefaultTypeInternal _ScalarVolumePerTimeData_default_instance_;
class ScalarVolumePerTimeMassData;
class ScalarVolumePerTimeMassDataDefaultTypeInternal;
extern ScalarVolumePerTimeMassDataDefaultTypeInternal _ScalarVolumePerTimeMassData_default_instance_;
class ScalarVolumePerTimePressureAreaData;
class ScalarVolumePerTimePressureAreaDataDefaultTypeInternal;
extern ScalarVolumePerTimePressureAreaDataDefaultTypeInternal _ScalarVolumePerTimePressureAreaData_default_instance_;
class ScalarVolumePerTimePressureData;
class ScalarVolumePerTimePressureDataDefaultTypeInternal;
extern ScalarVolumePerTimePressureDataDefaultTypeInternal _ScalarVolumePerTimePressureData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> ::pulse::cdm::bind::ArrayData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ArrayData>(Arena*);
template<> ::pulse::cdm::bind::ArrayTimeData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ArrayTimeData>(Arena*);
template<> ::pulse::cdm::bind::DoubleArrayData* Arena::CreateMaybeMessage<::pulse::cdm::bind::DoubleArrayData>(Arena*);
template<> ::pulse::cdm::bind::FunctionData* Arena::CreateMaybeMessage<::pulse::cdm::bind::FunctionData>(Arena*);
template<> ::pulse::cdm::bind::FunctionElectricPotentialVsTimeData* Arena::CreateMaybeMessage<::pulse::cdm::bind::FunctionElectricPotentialVsTimeData>(Arena*);
template<> ::pulse::cdm::bind::FunctionVolumeVsTimeData* Arena::CreateMaybeMessage<::pulse::cdm::bind::FunctionVolumeVsTimeData>(Arena*);
template<> ::pulse::cdm::bind::HistogramData* Arena::CreateMaybeMessage<::pulse::cdm::bind::HistogramData>(Arena*);
template<> ::pulse::cdm::bind::HistogramFractionVsLengthData* Arena::CreateMaybeMessage<::pulse::cdm::bind::HistogramFractionVsLengthData>(Arena*);
template<> ::pulse::cdm::bind::IntegerArrayData* Arena::CreateMaybeMessage<::pulse::cdm::bind::IntegerArrayData>(Arena*);
template<> ::pulse::cdm::bind::RunningAverageData* Arena::CreateMaybeMessage<::pulse::cdm::bind::RunningAverageData>(Arena*);
template<> ::pulse::cdm::bind::Scalar0To1Data* Arena::CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(Arena*);
template<> ::pulse::cdm::bind::ScalarAmountData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarAmountData>(Arena*);
template<> ::pulse::cdm::bind::ScalarAmountPerMassData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarAmountPerMassData>(Arena*);
template<> ::pulse::cdm::bind::ScalarAmountPerTimeData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarAmountPerTimeData>(Arena*);
template<> ::pulse::cdm::bind::ScalarAmountPerVolumeData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarAmountPerVolumeData>(Arena*);
template<> ::pulse::cdm::bind::ScalarAreaData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarAreaData>(Arena*);
template<> ::pulse::cdm::bind::ScalarAreaPerTimePressureData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarAreaPerTimePressureData>(Arena*);
template<> ::pulse::cdm::bind::ScalarData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(Arena*);
template<> ::pulse::cdm::bind::ScalarElectricCapacitanceData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarElectricCapacitanceData>(Arena*);
template<> ::pulse::cdm::bind::ScalarElectricChargeData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarElectricChargeData>(Arena*);
template<> ::pulse::cdm::bind::ScalarElectricCurrentData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarElectricCurrentData>(Arena*);
template<> ::pulse::cdm::bind::ScalarElectricInductanceData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarElectricInductanceData>(Arena*);
template<> ::pulse::cdm::bind::ScalarElectricPotentialData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarElectricPotentialData>(Arena*);
template<> ::pulse::cdm::bind::ScalarElectricResistanceData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarElectricResistanceData>(Arena*);
template<> ::pulse::cdm::bind::ScalarEnergyData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarEnergyData>(Arena*);
template<> ::pulse::cdm::bind::ScalarEnergyPerAmountData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarEnergyPerAmountData>(Arena*);
template<> ::pulse::cdm::bind::ScalarEnergyPerMassData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarEnergyPerMassData>(Arena*);
template<> ::pulse::cdm::bind::ScalarForceData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarForceData>(Arena*);
template<> ::pulse::cdm::bind::ScalarFrequencyData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarFrequencyData>(Arena*);
template<> ::pulse::cdm::bind::ScalarHeatCapacitanceData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarHeatCapacitanceData>(Arena*);
template<> ::pulse::cdm::bind::ScalarHeatCapacitancePerAmountData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarHeatCapacitancePerAmountData>(Arena*);
template<> ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarHeatCapacitancePerMassData>(Arena*);
template<> ::pulse::cdm::bind::ScalarHeatConductanceData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarHeatConductanceData>(Arena*);
template<> ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarHeatConductancePerAreaData>(Arena*);
template<> ::pulse::cdm::bind::ScalarHeatInductanceData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarHeatInductanceData>(Arena*);
template<> ::pulse::cdm::bind::ScalarHeatResistanceAreaData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarHeatResistanceAreaData>(Arena*);
template<> ::pulse::cdm::bind::ScalarHeatResistanceData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarHeatResistanceData>(Arena*);
template<> ::pulse::cdm::bind::ScalarInversePressureData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarInversePressureData>(Arena*);
template<> ::pulse::cdm::bind::ScalarInverseVolumeData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarInverseVolumeData>(Arena*);
template<> ::pulse::cdm::bind::ScalarLengthData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarLengthData>(Arena*);
template<> ::pulse::cdm::bind::ScalarLengthPerTimeData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarLengthPerTimeData>(Arena*);
template<> ::pulse::cdm::bind::ScalarLengthPerTimePressureData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarLengthPerTimePressureData>(Arena*);
template<> ::pulse::cdm::bind::ScalarMassData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarMassData>(Arena*);
template<> ::pulse::cdm::bind::ScalarMassPerAmountData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerAmountData>(Arena*);
template<> ::pulse::cdm::bind::ScalarMassPerAreaTimeData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerAreaTimeData>(Arena*);
template<> ::pulse::cdm::bind::ScalarMassPerMassData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerMassData>(Arena*);
template<> ::pulse::cdm::bind::ScalarMassPerTimeData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerTimeData>(Arena*);
template<> ::pulse::cdm::bind::ScalarMassPerVolumeData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerVolumeData>(Arena*);
template<> ::pulse::cdm::bind::ScalarNegative1To1Data* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarNegative1To1Data>(Arena*);
template<> ::pulse::cdm::bind::ScalarOsmolalityData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarOsmolalityData>(Arena*);
template<> ::pulse::cdm::bind::ScalarOsmolarityData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarOsmolarityData>(Arena*);
template<> ::pulse::cdm::bind::ScalarPowerData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarPowerData>(Arena*);
template<> ::pulse::cdm::bind::ScalarPowerPerAreaTemperatureToTheFourthData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarPowerPerAreaTemperatureToTheFourthData>(Arena*);
template<> ::pulse::cdm::bind::ScalarPressureData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(Arena*);
template<> ::pulse::cdm::bind::ScalarPressurePerVolumeData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarPressurePerVolumeData>(Arena*);
template<> ::pulse::cdm::bind::ScalarPressureTimePerAreaData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureTimePerAreaData>(Arena*);
template<> ::pulse::cdm::bind::ScalarPressureTimePerVolumeAreaData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureTimePerVolumeAreaData>(Arena*);
template<> ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureTimePerVolumeData>(Arena*);
template<> ::pulse::cdm::bind::ScalarPressureTimeSquaredPerVolumeData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureTimeSquaredPerVolumeData>(Arena*);
template<> ::pulse::cdm::bind::ScalarTemperatureData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarTemperatureData>(Arena*);
template<> ::pulse::cdm::bind::ScalarTimeData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarTimeData>(Arena*);
template<> ::pulse::cdm::bind::ScalarVolumeData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(Arena*);
template<> ::pulse::cdm::bind::ScalarVolumePerPressureData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerPressureData>(Arena*);
template<> ::pulse::cdm::bind::ScalarVolumePerTimeAreaData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeAreaData>(Arena*);
template<> ::pulse::cdm::bind::ScalarVolumePerTimeData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeData>(Arena*);
template<> ::pulse::cdm::bind::ScalarVolumePerTimeMassData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeMassData>(Arena*);
template<> ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData>(Arena*);
template<> ::pulse::cdm::bind::ScalarVolumePerTimePressureData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimePressureData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pulse {
namespace cdm {
namespace bind {

// ===================================================================

class RunningAverageData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.RunningAverageData) */ {
 public:
  RunningAverageData();
  virtual ~RunningAverageData();

  RunningAverageData(const RunningAverageData& from);
  RunningAverageData(RunningAverageData&& from) noexcept
    : RunningAverageData() {
    *this = ::std::move(from);
  }

  inline RunningAverageData& operator=(const RunningAverageData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RunningAverageData& operator=(RunningAverageData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RunningAverageData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RunningAverageData* internal_default_instance() {
    return reinterpret_cast<const RunningAverageData*>(
               &_RunningAverageData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RunningAverageData& a, RunningAverageData& b) {
    a.Swap(&b);
  }
  inline void Swap(RunningAverageData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RunningAverageData* New() const final {
    return CreateMaybeMessage<RunningAverageData>(nullptr);
  }

  RunningAverageData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RunningAverageData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RunningAverageData& from);
  void MergeFrom(const RunningAverageData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunningAverageData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.RunningAverageData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSumFieldNumber = 1,
    kNumSamplesFieldNumber = 2,
  };
  // double Sum = 1;
  void clear_sum();
  double sum() const;
  void set_sum(double value);
  private:
  double _internal_sum() const;
  void _internal_set_sum(double value);
  public:

  // uint32 NumSamples = 2;
  void clear_numsamples();
  ::PROTOBUF_NAMESPACE_ID::uint32 numsamples() const;
  void set_numsamples(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_numsamples() const;
  void _internal_set_numsamples(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.RunningAverageData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double sum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 numsamples_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarData) */ {
 public:
  ScalarData();
  virtual ~ScalarData();

  ScalarData(const ScalarData& from);
  ScalarData(ScalarData&& from) noexcept
    : ScalarData() {
    *this = ::std::move(from);
  }

  inline ScalarData& operator=(const ScalarData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarData& operator=(ScalarData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarData* internal_default_instance() {
    return reinterpret_cast<const ScalarData*>(
               &_ScalarData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ScalarData& a, ScalarData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarData* New() const final {
    return CreateMaybeMessage<ScalarData>(nullptr);
  }

  ScalarData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarData& from);
  void MergeFrom(const ScalarData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnitFieldNumber = 2,
    kValueFieldNumber = 1,
    kReadOnlyFieldNumber = 3,
  };
  // string Unit = 2;
  void clear_unit();
  const std::string& unit() const;
  void set_unit(const std::string& value);
  void set_unit(std::string&& value);
  void set_unit(const char* value);
  void set_unit(const char* value, size_t size);
  std::string* mutable_unit();
  std::string* release_unit();
  void set_allocated_unit(std::string* unit);
  private:
  const std::string& _internal_unit() const;
  void _internal_set_unit(const std::string& value);
  std::string* _internal_mutable_unit();
  public:

  // double Value = 1;
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // bool ReadOnly = 3;
  void clear_readonly();
  bool readonly() const;
  void set_readonly(bool value);
  private:
  bool _internal_readonly() const;
  void _internal_set_readonly(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unit_;
  double value_;
  bool readonly_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class Scalar0To1Data :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.Scalar0To1Data) */ {
 public:
  Scalar0To1Data();
  virtual ~Scalar0To1Data();

  Scalar0To1Data(const Scalar0To1Data& from);
  Scalar0To1Data(Scalar0To1Data&& from) noexcept
    : Scalar0To1Data() {
    *this = ::std::move(from);
  }

  inline Scalar0To1Data& operator=(const Scalar0To1Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scalar0To1Data& operator=(Scalar0To1Data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Scalar0To1Data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Scalar0To1Data* internal_default_instance() {
    return reinterpret_cast<const Scalar0To1Data*>(
               &_Scalar0To1Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Scalar0To1Data& a, Scalar0To1Data& b) {
    a.Swap(&b);
  }
  inline void Swap(Scalar0To1Data* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Scalar0To1Data* New() const final {
    return CreateMaybeMessage<Scalar0To1Data>(nullptr);
  }

  Scalar0To1Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Scalar0To1Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Scalar0To1Data& from);
  void MergeFrom(const Scalar0To1Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scalar0To1Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.Scalar0To1Data";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalar0To1FieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData Scalar0To1 = 1;
  bool has_scalar0to1() const;
  private:
  bool _internal_has_scalar0to1() const;
  public:
  void clear_scalar0to1();
  const ::pulse::cdm::bind::ScalarData& scalar0to1() const;
  ::pulse::cdm::bind::ScalarData* release_scalar0to1();
  ::pulse::cdm::bind::ScalarData* mutable_scalar0to1();
  void set_allocated_scalar0to1(::pulse::cdm::bind::ScalarData* scalar0to1);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalar0to1() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalar0to1();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.Scalar0To1Data)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalar0to1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarNegative1To1Data :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarNegative1To1Data) */ {
 public:
  ScalarNegative1To1Data();
  virtual ~ScalarNegative1To1Data();

  ScalarNegative1To1Data(const ScalarNegative1To1Data& from);
  ScalarNegative1To1Data(ScalarNegative1To1Data&& from) noexcept
    : ScalarNegative1To1Data() {
    *this = ::std::move(from);
  }

  inline ScalarNegative1To1Data& operator=(const ScalarNegative1To1Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarNegative1To1Data& operator=(ScalarNegative1To1Data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarNegative1To1Data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarNegative1To1Data* internal_default_instance() {
    return reinterpret_cast<const ScalarNegative1To1Data*>(
               &_ScalarNegative1To1Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ScalarNegative1To1Data& a, ScalarNegative1To1Data& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarNegative1To1Data* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarNegative1To1Data* New() const final {
    return CreateMaybeMessage<ScalarNegative1To1Data>(nullptr);
  }

  ScalarNegative1To1Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarNegative1To1Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarNegative1To1Data& from);
  void MergeFrom(const ScalarNegative1To1Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarNegative1To1Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarNegative1To1Data";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarNegative1To1FieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarNegative1To1 = 1;
  bool has_scalarnegative1to1() const;
  private:
  bool _internal_has_scalarnegative1to1() const;
  public:
  void clear_scalarnegative1to1();
  const ::pulse::cdm::bind::ScalarData& scalarnegative1to1() const;
  ::pulse::cdm::bind::ScalarData* release_scalarnegative1to1();
  ::pulse::cdm::bind::ScalarData* mutable_scalarnegative1to1();
  void set_allocated_scalarnegative1to1(::pulse::cdm::bind::ScalarData* scalarnegative1to1);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarnegative1to1() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarnegative1to1();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarNegative1To1Data)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarnegative1to1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarAmountData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarAmountData) */ {
 public:
  ScalarAmountData();
  virtual ~ScalarAmountData();

  ScalarAmountData(const ScalarAmountData& from);
  ScalarAmountData(ScalarAmountData&& from) noexcept
    : ScalarAmountData() {
    *this = ::std::move(from);
  }

  inline ScalarAmountData& operator=(const ScalarAmountData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarAmountData& operator=(ScalarAmountData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarAmountData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarAmountData* internal_default_instance() {
    return reinterpret_cast<const ScalarAmountData*>(
               &_ScalarAmountData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ScalarAmountData& a, ScalarAmountData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarAmountData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarAmountData* New() const final {
    return CreateMaybeMessage<ScalarAmountData>(nullptr);
  }

  ScalarAmountData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarAmountData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarAmountData& from);
  void MergeFrom(const ScalarAmountData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarAmountData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarAmountData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarAmountFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarAmount = 1;
  bool has_scalaramount() const;
  private:
  bool _internal_has_scalaramount() const;
  public:
  void clear_scalaramount();
  const ::pulse::cdm::bind::ScalarData& scalaramount() const;
  ::pulse::cdm::bind::ScalarData* release_scalaramount();
  ::pulse::cdm::bind::ScalarData* mutable_scalaramount();
  void set_allocated_scalaramount(::pulse::cdm::bind::ScalarData* scalaramount);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalaramount() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalaramount();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarAmountData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalaramount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarAmountPerMassData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarAmountPerMassData) */ {
 public:
  ScalarAmountPerMassData();
  virtual ~ScalarAmountPerMassData();

  ScalarAmountPerMassData(const ScalarAmountPerMassData& from);
  ScalarAmountPerMassData(ScalarAmountPerMassData&& from) noexcept
    : ScalarAmountPerMassData() {
    *this = ::std::move(from);
  }

  inline ScalarAmountPerMassData& operator=(const ScalarAmountPerMassData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarAmountPerMassData& operator=(ScalarAmountPerMassData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarAmountPerMassData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarAmountPerMassData* internal_default_instance() {
    return reinterpret_cast<const ScalarAmountPerMassData*>(
               &_ScalarAmountPerMassData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ScalarAmountPerMassData& a, ScalarAmountPerMassData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarAmountPerMassData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarAmountPerMassData* New() const final {
    return CreateMaybeMessage<ScalarAmountPerMassData>(nullptr);
  }

  ScalarAmountPerMassData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarAmountPerMassData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarAmountPerMassData& from);
  void MergeFrom(const ScalarAmountPerMassData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarAmountPerMassData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarAmountPerMassData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarAmountPerMassFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarAmountPerMass = 1;
  bool has_scalaramountpermass() const;
  private:
  bool _internal_has_scalaramountpermass() const;
  public:
  void clear_scalaramountpermass();
  const ::pulse::cdm::bind::ScalarData& scalaramountpermass() const;
  ::pulse::cdm::bind::ScalarData* release_scalaramountpermass();
  ::pulse::cdm::bind::ScalarData* mutable_scalaramountpermass();
  void set_allocated_scalaramountpermass(::pulse::cdm::bind::ScalarData* scalaramountpermass);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalaramountpermass() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalaramountpermass();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarAmountPerMassData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalaramountpermass_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarAmountPerTimeData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarAmountPerTimeData) */ {
 public:
  ScalarAmountPerTimeData();
  virtual ~ScalarAmountPerTimeData();

  ScalarAmountPerTimeData(const ScalarAmountPerTimeData& from);
  ScalarAmountPerTimeData(ScalarAmountPerTimeData&& from) noexcept
    : ScalarAmountPerTimeData() {
    *this = ::std::move(from);
  }

  inline ScalarAmountPerTimeData& operator=(const ScalarAmountPerTimeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarAmountPerTimeData& operator=(ScalarAmountPerTimeData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarAmountPerTimeData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarAmountPerTimeData* internal_default_instance() {
    return reinterpret_cast<const ScalarAmountPerTimeData*>(
               &_ScalarAmountPerTimeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ScalarAmountPerTimeData& a, ScalarAmountPerTimeData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarAmountPerTimeData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarAmountPerTimeData* New() const final {
    return CreateMaybeMessage<ScalarAmountPerTimeData>(nullptr);
  }

  ScalarAmountPerTimeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarAmountPerTimeData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarAmountPerTimeData& from);
  void MergeFrom(const ScalarAmountPerTimeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarAmountPerTimeData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarAmountPerTimeData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarAmountPerTimeFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarAmountPerTime = 1;
  bool has_scalaramountpertime() const;
  private:
  bool _internal_has_scalaramountpertime() const;
  public:
  void clear_scalaramountpertime();
  const ::pulse::cdm::bind::ScalarData& scalaramountpertime() const;
  ::pulse::cdm::bind::ScalarData* release_scalaramountpertime();
  ::pulse::cdm::bind::ScalarData* mutable_scalaramountpertime();
  void set_allocated_scalaramountpertime(::pulse::cdm::bind::ScalarData* scalaramountpertime);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalaramountpertime() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalaramountpertime();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarAmountPerTimeData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalaramountpertime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarAmountPerVolumeData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarAmountPerVolumeData) */ {
 public:
  ScalarAmountPerVolumeData();
  virtual ~ScalarAmountPerVolumeData();

  ScalarAmountPerVolumeData(const ScalarAmountPerVolumeData& from);
  ScalarAmountPerVolumeData(ScalarAmountPerVolumeData&& from) noexcept
    : ScalarAmountPerVolumeData() {
    *this = ::std::move(from);
  }

  inline ScalarAmountPerVolumeData& operator=(const ScalarAmountPerVolumeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarAmountPerVolumeData& operator=(ScalarAmountPerVolumeData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarAmountPerVolumeData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarAmountPerVolumeData* internal_default_instance() {
    return reinterpret_cast<const ScalarAmountPerVolumeData*>(
               &_ScalarAmountPerVolumeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ScalarAmountPerVolumeData& a, ScalarAmountPerVolumeData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarAmountPerVolumeData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarAmountPerVolumeData* New() const final {
    return CreateMaybeMessage<ScalarAmountPerVolumeData>(nullptr);
  }

  ScalarAmountPerVolumeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarAmountPerVolumeData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarAmountPerVolumeData& from);
  void MergeFrom(const ScalarAmountPerVolumeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarAmountPerVolumeData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarAmountPerVolumeData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarAmountPerVolumeFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarAmountPerVolume = 1;
  bool has_scalaramountpervolume() const;
  private:
  bool _internal_has_scalaramountpervolume() const;
  public:
  void clear_scalaramountpervolume();
  const ::pulse::cdm::bind::ScalarData& scalaramountpervolume() const;
  ::pulse::cdm::bind::ScalarData* release_scalaramountpervolume();
  ::pulse::cdm::bind::ScalarData* mutable_scalaramountpervolume();
  void set_allocated_scalaramountpervolume(::pulse::cdm::bind::ScalarData* scalaramountpervolume);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalaramountpervolume() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalaramountpervolume();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarAmountPerVolumeData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalaramountpervolume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarAreaData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarAreaData) */ {
 public:
  ScalarAreaData();
  virtual ~ScalarAreaData();

  ScalarAreaData(const ScalarAreaData& from);
  ScalarAreaData(ScalarAreaData&& from) noexcept
    : ScalarAreaData() {
    *this = ::std::move(from);
  }

  inline ScalarAreaData& operator=(const ScalarAreaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarAreaData& operator=(ScalarAreaData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarAreaData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarAreaData* internal_default_instance() {
    return reinterpret_cast<const ScalarAreaData*>(
               &_ScalarAreaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ScalarAreaData& a, ScalarAreaData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarAreaData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarAreaData* New() const final {
    return CreateMaybeMessage<ScalarAreaData>(nullptr);
  }

  ScalarAreaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarAreaData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarAreaData& from);
  void MergeFrom(const ScalarAreaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarAreaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarAreaData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarAreaFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarArea = 1;
  bool has_scalararea() const;
  private:
  bool _internal_has_scalararea() const;
  public:
  void clear_scalararea();
  const ::pulse::cdm::bind::ScalarData& scalararea() const;
  ::pulse::cdm::bind::ScalarData* release_scalararea();
  ::pulse::cdm::bind::ScalarData* mutable_scalararea();
  void set_allocated_scalararea(::pulse::cdm::bind::ScalarData* scalararea);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalararea() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalararea();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarAreaData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalararea_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarAreaPerTimePressureData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarAreaPerTimePressureData) */ {
 public:
  ScalarAreaPerTimePressureData();
  virtual ~ScalarAreaPerTimePressureData();

  ScalarAreaPerTimePressureData(const ScalarAreaPerTimePressureData& from);
  ScalarAreaPerTimePressureData(ScalarAreaPerTimePressureData&& from) noexcept
    : ScalarAreaPerTimePressureData() {
    *this = ::std::move(from);
  }

  inline ScalarAreaPerTimePressureData& operator=(const ScalarAreaPerTimePressureData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarAreaPerTimePressureData& operator=(ScalarAreaPerTimePressureData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarAreaPerTimePressureData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarAreaPerTimePressureData* internal_default_instance() {
    return reinterpret_cast<const ScalarAreaPerTimePressureData*>(
               &_ScalarAreaPerTimePressureData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ScalarAreaPerTimePressureData& a, ScalarAreaPerTimePressureData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarAreaPerTimePressureData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarAreaPerTimePressureData* New() const final {
    return CreateMaybeMessage<ScalarAreaPerTimePressureData>(nullptr);
  }

  ScalarAreaPerTimePressureData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarAreaPerTimePressureData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarAreaPerTimePressureData& from);
  void MergeFrom(const ScalarAreaPerTimePressureData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarAreaPerTimePressureData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarAreaPerTimePressureData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarAreaPerTimePressureFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarAreaPerTimePressure = 1;
  bool has_scalarareapertimepressure() const;
  private:
  bool _internal_has_scalarareapertimepressure() const;
  public:
  void clear_scalarareapertimepressure();
  const ::pulse::cdm::bind::ScalarData& scalarareapertimepressure() const;
  ::pulse::cdm::bind::ScalarData* release_scalarareapertimepressure();
  ::pulse::cdm::bind::ScalarData* mutable_scalarareapertimepressure();
  void set_allocated_scalarareapertimepressure(::pulse::cdm::bind::ScalarData* scalarareapertimepressure);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarareapertimepressure() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarareapertimepressure();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarAreaPerTimePressureData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarareapertimepressure_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarElectricCapacitanceData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarElectricCapacitanceData) */ {
 public:
  ScalarElectricCapacitanceData();
  virtual ~ScalarElectricCapacitanceData();

  ScalarElectricCapacitanceData(const ScalarElectricCapacitanceData& from);
  ScalarElectricCapacitanceData(ScalarElectricCapacitanceData&& from) noexcept
    : ScalarElectricCapacitanceData() {
    *this = ::std::move(from);
  }

  inline ScalarElectricCapacitanceData& operator=(const ScalarElectricCapacitanceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarElectricCapacitanceData& operator=(ScalarElectricCapacitanceData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarElectricCapacitanceData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarElectricCapacitanceData* internal_default_instance() {
    return reinterpret_cast<const ScalarElectricCapacitanceData*>(
               &_ScalarElectricCapacitanceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ScalarElectricCapacitanceData& a, ScalarElectricCapacitanceData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarElectricCapacitanceData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarElectricCapacitanceData* New() const final {
    return CreateMaybeMessage<ScalarElectricCapacitanceData>(nullptr);
  }

  ScalarElectricCapacitanceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarElectricCapacitanceData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarElectricCapacitanceData& from);
  void MergeFrom(const ScalarElectricCapacitanceData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarElectricCapacitanceData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarElectricCapacitanceData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarElectricCapacitanceFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarElectricCapacitance = 1;
  bool has_scalarelectriccapacitance() const;
  private:
  bool _internal_has_scalarelectriccapacitance() const;
  public:
  void clear_scalarelectriccapacitance();
  const ::pulse::cdm::bind::ScalarData& scalarelectriccapacitance() const;
  ::pulse::cdm::bind::ScalarData* release_scalarelectriccapacitance();
  ::pulse::cdm::bind::ScalarData* mutable_scalarelectriccapacitance();
  void set_allocated_scalarelectriccapacitance(::pulse::cdm::bind::ScalarData* scalarelectriccapacitance);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarelectriccapacitance() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarelectriccapacitance();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarElectricCapacitanceData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarelectriccapacitance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarElectricChargeData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarElectricChargeData) */ {
 public:
  ScalarElectricChargeData();
  virtual ~ScalarElectricChargeData();

  ScalarElectricChargeData(const ScalarElectricChargeData& from);
  ScalarElectricChargeData(ScalarElectricChargeData&& from) noexcept
    : ScalarElectricChargeData() {
    *this = ::std::move(from);
  }

  inline ScalarElectricChargeData& operator=(const ScalarElectricChargeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarElectricChargeData& operator=(ScalarElectricChargeData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarElectricChargeData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarElectricChargeData* internal_default_instance() {
    return reinterpret_cast<const ScalarElectricChargeData*>(
               &_ScalarElectricChargeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ScalarElectricChargeData& a, ScalarElectricChargeData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarElectricChargeData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarElectricChargeData* New() const final {
    return CreateMaybeMessage<ScalarElectricChargeData>(nullptr);
  }

  ScalarElectricChargeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarElectricChargeData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarElectricChargeData& from);
  void MergeFrom(const ScalarElectricChargeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarElectricChargeData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarElectricChargeData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarElectricChargeFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarElectricCharge = 1;
  bool has_scalarelectriccharge() const;
  private:
  bool _internal_has_scalarelectriccharge() const;
  public:
  void clear_scalarelectriccharge();
  const ::pulse::cdm::bind::ScalarData& scalarelectriccharge() const;
  ::pulse::cdm::bind::ScalarData* release_scalarelectriccharge();
  ::pulse::cdm::bind::ScalarData* mutable_scalarelectriccharge();
  void set_allocated_scalarelectriccharge(::pulse::cdm::bind::ScalarData* scalarelectriccharge);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarelectriccharge() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarelectriccharge();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarElectricChargeData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarelectriccharge_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarElectricCurrentData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarElectricCurrentData) */ {
 public:
  ScalarElectricCurrentData();
  virtual ~ScalarElectricCurrentData();

  ScalarElectricCurrentData(const ScalarElectricCurrentData& from);
  ScalarElectricCurrentData(ScalarElectricCurrentData&& from) noexcept
    : ScalarElectricCurrentData() {
    *this = ::std::move(from);
  }

  inline ScalarElectricCurrentData& operator=(const ScalarElectricCurrentData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarElectricCurrentData& operator=(ScalarElectricCurrentData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarElectricCurrentData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarElectricCurrentData* internal_default_instance() {
    return reinterpret_cast<const ScalarElectricCurrentData*>(
               &_ScalarElectricCurrentData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ScalarElectricCurrentData& a, ScalarElectricCurrentData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarElectricCurrentData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarElectricCurrentData* New() const final {
    return CreateMaybeMessage<ScalarElectricCurrentData>(nullptr);
  }

  ScalarElectricCurrentData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarElectricCurrentData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarElectricCurrentData& from);
  void MergeFrom(const ScalarElectricCurrentData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarElectricCurrentData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarElectricCurrentData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarElectricCurrentFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarElectricCurrent = 1;
  bool has_scalarelectriccurrent() const;
  private:
  bool _internal_has_scalarelectriccurrent() const;
  public:
  void clear_scalarelectriccurrent();
  const ::pulse::cdm::bind::ScalarData& scalarelectriccurrent() const;
  ::pulse::cdm::bind::ScalarData* release_scalarelectriccurrent();
  ::pulse::cdm::bind::ScalarData* mutable_scalarelectriccurrent();
  void set_allocated_scalarelectriccurrent(::pulse::cdm::bind::ScalarData* scalarelectriccurrent);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarelectriccurrent() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarelectriccurrent();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarElectricCurrentData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarelectriccurrent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarElectricPotentialData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarElectricPotentialData) */ {
 public:
  ScalarElectricPotentialData();
  virtual ~ScalarElectricPotentialData();

  ScalarElectricPotentialData(const ScalarElectricPotentialData& from);
  ScalarElectricPotentialData(ScalarElectricPotentialData&& from) noexcept
    : ScalarElectricPotentialData() {
    *this = ::std::move(from);
  }

  inline ScalarElectricPotentialData& operator=(const ScalarElectricPotentialData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarElectricPotentialData& operator=(ScalarElectricPotentialData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarElectricPotentialData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarElectricPotentialData* internal_default_instance() {
    return reinterpret_cast<const ScalarElectricPotentialData*>(
               &_ScalarElectricPotentialData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ScalarElectricPotentialData& a, ScalarElectricPotentialData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarElectricPotentialData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarElectricPotentialData* New() const final {
    return CreateMaybeMessage<ScalarElectricPotentialData>(nullptr);
  }

  ScalarElectricPotentialData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarElectricPotentialData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarElectricPotentialData& from);
  void MergeFrom(const ScalarElectricPotentialData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarElectricPotentialData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarElectricPotentialData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarElectricPotentialFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarElectricPotential = 1;
  bool has_scalarelectricpotential() const;
  private:
  bool _internal_has_scalarelectricpotential() const;
  public:
  void clear_scalarelectricpotential();
  const ::pulse::cdm::bind::ScalarData& scalarelectricpotential() const;
  ::pulse::cdm::bind::ScalarData* release_scalarelectricpotential();
  ::pulse::cdm::bind::ScalarData* mutable_scalarelectricpotential();
  void set_allocated_scalarelectricpotential(::pulse::cdm::bind::ScalarData* scalarelectricpotential);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarelectricpotential() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarelectricpotential();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarElectricPotentialData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarelectricpotential_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarElectricInductanceData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarElectricInductanceData) */ {
 public:
  ScalarElectricInductanceData();
  virtual ~ScalarElectricInductanceData();

  ScalarElectricInductanceData(const ScalarElectricInductanceData& from);
  ScalarElectricInductanceData(ScalarElectricInductanceData&& from) noexcept
    : ScalarElectricInductanceData() {
    *this = ::std::move(from);
  }

  inline ScalarElectricInductanceData& operator=(const ScalarElectricInductanceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarElectricInductanceData& operator=(ScalarElectricInductanceData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarElectricInductanceData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarElectricInductanceData* internal_default_instance() {
    return reinterpret_cast<const ScalarElectricInductanceData*>(
               &_ScalarElectricInductanceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ScalarElectricInductanceData& a, ScalarElectricInductanceData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarElectricInductanceData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarElectricInductanceData* New() const final {
    return CreateMaybeMessage<ScalarElectricInductanceData>(nullptr);
  }

  ScalarElectricInductanceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarElectricInductanceData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarElectricInductanceData& from);
  void MergeFrom(const ScalarElectricInductanceData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarElectricInductanceData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarElectricInductanceData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarElectricInductanceFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarElectricInductance = 1;
  bool has_scalarelectricinductance() const;
  private:
  bool _internal_has_scalarelectricinductance() const;
  public:
  void clear_scalarelectricinductance();
  const ::pulse::cdm::bind::ScalarData& scalarelectricinductance() const;
  ::pulse::cdm::bind::ScalarData* release_scalarelectricinductance();
  ::pulse::cdm::bind::ScalarData* mutable_scalarelectricinductance();
  void set_allocated_scalarelectricinductance(::pulse::cdm::bind::ScalarData* scalarelectricinductance);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarelectricinductance() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarelectricinductance();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarElectricInductanceData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarelectricinductance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarElectricResistanceData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarElectricResistanceData) */ {
 public:
  ScalarElectricResistanceData();
  virtual ~ScalarElectricResistanceData();

  ScalarElectricResistanceData(const ScalarElectricResistanceData& from);
  ScalarElectricResistanceData(ScalarElectricResistanceData&& from) noexcept
    : ScalarElectricResistanceData() {
    *this = ::std::move(from);
  }

  inline ScalarElectricResistanceData& operator=(const ScalarElectricResistanceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarElectricResistanceData& operator=(ScalarElectricResistanceData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarElectricResistanceData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarElectricResistanceData* internal_default_instance() {
    return reinterpret_cast<const ScalarElectricResistanceData*>(
               &_ScalarElectricResistanceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ScalarElectricResistanceData& a, ScalarElectricResistanceData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarElectricResistanceData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarElectricResistanceData* New() const final {
    return CreateMaybeMessage<ScalarElectricResistanceData>(nullptr);
  }

  ScalarElectricResistanceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarElectricResistanceData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarElectricResistanceData& from);
  void MergeFrom(const ScalarElectricResistanceData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarElectricResistanceData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarElectricResistanceData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarElectricResistanceFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarElectricResistance = 1;
  bool has_scalarelectricresistance() const;
  private:
  bool _internal_has_scalarelectricresistance() const;
  public:
  void clear_scalarelectricresistance();
  const ::pulse::cdm::bind::ScalarData& scalarelectricresistance() const;
  ::pulse::cdm::bind::ScalarData* release_scalarelectricresistance();
  ::pulse::cdm::bind::ScalarData* mutable_scalarelectricresistance();
  void set_allocated_scalarelectricresistance(::pulse::cdm::bind::ScalarData* scalarelectricresistance);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarelectricresistance() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarelectricresistance();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarElectricResistanceData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarelectricresistance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarEnergyData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarEnergyData) */ {
 public:
  ScalarEnergyData();
  virtual ~ScalarEnergyData();

  ScalarEnergyData(const ScalarEnergyData& from);
  ScalarEnergyData(ScalarEnergyData&& from) noexcept
    : ScalarEnergyData() {
    *this = ::std::move(from);
  }

  inline ScalarEnergyData& operator=(const ScalarEnergyData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarEnergyData& operator=(ScalarEnergyData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarEnergyData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarEnergyData* internal_default_instance() {
    return reinterpret_cast<const ScalarEnergyData*>(
               &_ScalarEnergyData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ScalarEnergyData& a, ScalarEnergyData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarEnergyData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarEnergyData* New() const final {
    return CreateMaybeMessage<ScalarEnergyData>(nullptr);
  }

  ScalarEnergyData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarEnergyData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarEnergyData& from);
  void MergeFrom(const ScalarEnergyData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarEnergyData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarEnergyData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarEnergyFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarEnergy = 1;
  bool has_scalarenergy() const;
  private:
  bool _internal_has_scalarenergy() const;
  public:
  void clear_scalarenergy();
  const ::pulse::cdm::bind::ScalarData& scalarenergy() const;
  ::pulse::cdm::bind::ScalarData* release_scalarenergy();
  ::pulse::cdm::bind::ScalarData* mutable_scalarenergy();
  void set_allocated_scalarenergy(::pulse::cdm::bind::ScalarData* scalarenergy);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarenergy() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarenergy();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarEnergyData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarenergy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarEnergyPerAmountData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarEnergyPerAmountData) */ {
 public:
  ScalarEnergyPerAmountData();
  virtual ~ScalarEnergyPerAmountData();

  ScalarEnergyPerAmountData(const ScalarEnergyPerAmountData& from);
  ScalarEnergyPerAmountData(ScalarEnergyPerAmountData&& from) noexcept
    : ScalarEnergyPerAmountData() {
    *this = ::std::move(from);
  }

  inline ScalarEnergyPerAmountData& operator=(const ScalarEnergyPerAmountData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarEnergyPerAmountData& operator=(ScalarEnergyPerAmountData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarEnergyPerAmountData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarEnergyPerAmountData* internal_default_instance() {
    return reinterpret_cast<const ScalarEnergyPerAmountData*>(
               &_ScalarEnergyPerAmountData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ScalarEnergyPerAmountData& a, ScalarEnergyPerAmountData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarEnergyPerAmountData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarEnergyPerAmountData* New() const final {
    return CreateMaybeMessage<ScalarEnergyPerAmountData>(nullptr);
  }

  ScalarEnergyPerAmountData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarEnergyPerAmountData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarEnergyPerAmountData& from);
  void MergeFrom(const ScalarEnergyPerAmountData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarEnergyPerAmountData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarEnergyPerAmountData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarEnergyPerAmountFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarEnergyPerAmount = 1;
  bool has_scalarenergyperamount() const;
  private:
  bool _internal_has_scalarenergyperamount() const;
  public:
  void clear_scalarenergyperamount();
  const ::pulse::cdm::bind::ScalarData& scalarenergyperamount() const;
  ::pulse::cdm::bind::ScalarData* release_scalarenergyperamount();
  ::pulse::cdm::bind::ScalarData* mutable_scalarenergyperamount();
  void set_allocated_scalarenergyperamount(::pulse::cdm::bind::ScalarData* scalarenergyperamount);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarenergyperamount() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarenergyperamount();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarEnergyPerAmountData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarenergyperamount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarEnergyPerMassData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarEnergyPerMassData) */ {
 public:
  ScalarEnergyPerMassData();
  virtual ~ScalarEnergyPerMassData();

  ScalarEnergyPerMassData(const ScalarEnergyPerMassData& from);
  ScalarEnergyPerMassData(ScalarEnergyPerMassData&& from) noexcept
    : ScalarEnergyPerMassData() {
    *this = ::std::move(from);
  }

  inline ScalarEnergyPerMassData& operator=(const ScalarEnergyPerMassData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarEnergyPerMassData& operator=(ScalarEnergyPerMassData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarEnergyPerMassData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarEnergyPerMassData* internal_default_instance() {
    return reinterpret_cast<const ScalarEnergyPerMassData*>(
               &_ScalarEnergyPerMassData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ScalarEnergyPerMassData& a, ScalarEnergyPerMassData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarEnergyPerMassData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarEnergyPerMassData* New() const final {
    return CreateMaybeMessage<ScalarEnergyPerMassData>(nullptr);
  }

  ScalarEnergyPerMassData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarEnergyPerMassData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarEnergyPerMassData& from);
  void MergeFrom(const ScalarEnergyPerMassData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarEnergyPerMassData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarEnergyPerMassData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarEnergyPerMassFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarEnergyPerMass = 1;
  bool has_scalarenergypermass() const;
  private:
  bool _internal_has_scalarenergypermass() const;
  public:
  void clear_scalarenergypermass();
  const ::pulse::cdm::bind::ScalarData& scalarenergypermass() const;
  ::pulse::cdm::bind::ScalarData* release_scalarenergypermass();
  ::pulse::cdm::bind::ScalarData* mutable_scalarenergypermass();
  void set_allocated_scalarenergypermass(::pulse::cdm::bind::ScalarData* scalarenergypermass);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarenergypermass() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarenergypermass();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarEnergyPerMassData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarenergypermass_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarForceData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarForceData) */ {
 public:
  ScalarForceData();
  virtual ~ScalarForceData();

  ScalarForceData(const ScalarForceData& from);
  ScalarForceData(ScalarForceData&& from) noexcept
    : ScalarForceData() {
    *this = ::std::move(from);
  }

  inline ScalarForceData& operator=(const ScalarForceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarForceData& operator=(ScalarForceData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarForceData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarForceData* internal_default_instance() {
    return reinterpret_cast<const ScalarForceData*>(
               &_ScalarForceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ScalarForceData& a, ScalarForceData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarForceData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarForceData* New() const final {
    return CreateMaybeMessage<ScalarForceData>(nullptr);
  }

  ScalarForceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarForceData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarForceData& from);
  void MergeFrom(const ScalarForceData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarForceData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarForceData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarForceFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarForce = 1;
  bool has_scalarforce() const;
  private:
  bool _internal_has_scalarforce() const;
  public:
  void clear_scalarforce();
  const ::pulse::cdm::bind::ScalarData& scalarforce() const;
  ::pulse::cdm::bind::ScalarData* release_scalarforce();
  ::pulse::cdm::bind::ScalarData* mutable_scalarforce();
  void set_allocated_scalarforce(::pulse::cdm::bind::ScalarData* scalarforce);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarforce() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarforce();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarForceData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarforce_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarFrequencyData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarFrequencyData) */ {
 public:
  ScalarFrequencyData();
  virtual ~ScalarFrequencyData();

  ScalarFrequencyData(const ScalarFrequencyData& from);
  ScalarFrequencyData(ScalarFrequencyData&& from) noexcept
    : ScalarFrequencyData() {
    *this = ::std::move(from);
  }

  inline ScalarFrequencyData& operator=(const ScalarFrequencyData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarFrequencyData& operator=(ScalarFrequencyData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarFrequencyData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarFrequencyData* internal_default_instance() {
    return reinterpret_cast<const ScalarFrequencyData*>(
               &_ScalarFrequencyData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ScalarFrequencyData& a, ScalarFrequencyData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarFrequencyData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarFrequencyData* New() const final {
    return CreateMaybeMessage<ScalarFrequencyData>(nullptr);
  }

  ScalarFrequencyData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarFrequencyData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarFrequencyData& from);
  void MergeFrom(const ScalarFrequencyData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarFrequencyData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarFrequencyData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarFrequencyFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarFrequency = 1;
  bool has_scalarfrequency() const;
  private:
  bool _internal_has_scalarfrequency() const;
  public:
  void clear_scalarfrequency();
  const ::pulse::cdm::bind::ScalarData& scalarfrequency() const;
  ::pulse::cdm::bind::ScalarData* release_scalarfrequency();
  ::pulse::cdm::bind::ScalarData* mutable_scalarfrequency();
  void set_allocated_scalarfrequency(::pulse::cdm::bind::ScalarData* scalarfrequency);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarfrequency() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarfrequency();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarFrequencyData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarfrequency_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarHeatCapacitanceData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarHeatCapacitanceData) */ {
 public:
  ScalarHeatCapacitanceData();
  virtual ~ScalarHeatCapacitanceData();

  ScalarHeatCapacitanceData(const ScalarHeatCapacitanceData& from);
  ScalarHeatCapacitanceData(ScalarHeatCapacitanceData&& from) noexcept
    : ScalarHeatCapacitanceData() {
    *this = ::std::move(from);
  }

  inline ScalarHeatCapacitanceData& operator=(const ScalarHeatCapacitanceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarHeatCapacitanceData& operator=(ScalarHeatCapacitanceData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarHeatCapacitanceData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarHeatCapacitanceData* internal_default_instance() {
    return reinterpret_cast<const ScalarHeatCapacitanceData*>(
               &_ScalarHeatCapacitanceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ScalarHeatCapacitanceData& a, ScalarHeatCapacitanceData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarHeatCapacitanceData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarHeatCapacitanceData* New() const final {
    return CreateMaybeMessage<ScalarHeatCapacitanceData>(nullptr);
  }

  ScalarHeatCapacitanceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarHeatCapacitanceData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarHeatCapacitanceData& from);
  void MergeFrom(const ScalarHeatCapacitanceData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarHeatCapacitanceData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarHeatCapacitanceData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarHeatCapacitanceFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarHeatCapacitance = 1;
  bool has_scalarheatcapacitance() const;
  private:
  bool _internal_has_scalarheatcapacitance() const;
  public:
  void clear_scalarheatcapacitance();
  const ::pulse::cdm::bind::ScalarData& scalarheatcapacitance() const;
  ::pulse::cdm::bind::ScalarData* release_scalarheatcapacitance();
  ::pulse::cdm::bind::ScalarData* mutable_scalarheatcapacitance();
  void set_allocated_scalarheatcapacitance(::pulse::cdm::bind::ScalarData* scalarheatcapacitance);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarheatcapacitance() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarheatcapacitance();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarHeatCapacitanceData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarheatcapacitance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarHeatCapacitancePerAmountData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarHeatCapacitancePerAmountData) */ {
 public:
  ScalarHeatCapacitancePerAmountData();
  virtual ~ScalarHeatCapacitancePerAmountData();

  ScalarHeatCapacitancePerAmountData(const ScalarHeatCapacitancePerAmountData& from);
  ScalarHeatCapacitancePerAmountData(ScalarHeatCapacitancePerAmountData&& from) noexcept
    : ScalarHeatCapacitancePerAmountData() {
    *this = ::std::move(from);
  }

  inline ScalarHeatCapacitancePerAmountData& operator=(const ScalarHeatCapacitancePerAmountData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarHeatCapacitancePerAmountData& operator=(ScalarHeatCapacitancePerAmountData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarHeatCapacitancePerAmountData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarHeatCapacitancePerAmountData* internal_default_instance() {
    return reinterpret_cast<const ScalarHeatCapacitancePerAmountData*>(
               &_ScalarHeatCapacitancePerAmountData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ScalarHeatCapacitancePerAmountData& a, ScalarHeatCapacitancePerAmountData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarHeatCapacitancePerAmountData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarHeatCapacitancePerAmountData* New() const final {
    return CreateMaybeMessage<ScalarHeatCapacitancePerAmountData>(nullptr);
  }

  ScalarHeatCapacitancePerAmountData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarHeatCapacitancePerAmountData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarHeatCapacitancePerAmountData& from);
  void MergeFrom(const ScalarHeatCapacitancePerAmountData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarHeatCapacitancePerAmountData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarHeatCapacitancePerAmountData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarHeatCapacitancePerAmountFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarHeatCapacitancePerAmount = 1;
  bool has_scalarheatcapacitanceperamount() const;
  private:
  bool _internal_has_scalarheatcapacitanceperamount() const;
  public:
  void clear_scalarheatcapacitanceperamount();
  const ::pulse::cdm::bind::ScalarData& scalarheatcapacitanceperamount() const;
  ::pulse::cdm::bind::ScalarData* release_scalarheatcapacitanceperamount();
  ::pulse::cdm::bind::ScalarData* mutable_scalarheatcapacitanceperamount();
  void set_allocated_scalarheatcapacitanceperamount(::pulse::cdm::bind::ScalarData* scalarheatcapacitanceperamount);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarheatcapacitanceperamount() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarheatcapacitanceperamount();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarHeatCapacitancePerAmountData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarheatcapacitanceperamount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarHeatCapacitancePerMassData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarHeatCapacitancePerMassData) */ {
 public:
  ScalarHeatCapacitancePerMassData();
  virtual ~ScalarHeatCapacitancePerMassData();

  ScalarHeatCapacitancePerMassData(const ScalarHeatCapacitancePerMassData& from);
  ScalarHeatCapacitancePerMassData(ScalarHeatCapacitancePerMassData&& from) noexcept
    : ScalarHeatCapacitancePerMassData() {
    *this = ::std::move(from);
  }

  inline ScalarHeatCapacitancePerMassData& operator=(const ScalarHeatCapacitancePerMassData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarHeatCapacitancePerMassData& operator=(ScalarHeatCapacitancePerMassData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarHeatCapacitancePerMassData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarHeatCapacitancePerMassData* internal_default_instance() {
    return reinterpret_cast<const ScalarHeatCapacitancePerMassData*>(
               &_ScalarHeatCapacitancePerMassData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ScalarHeatCapacitancePerMassData& a, ScalarHeatCapacitancePerMassData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarHeatCapacitancePerMassData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarHeatCapacitancePerMassData* New() const final {
    return CreateMaybeMessage<ScalarHeatCapacitancePerMassData>(nullptr);
  }

  ScalarHeatCapacitancePerMassData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarHeatCapacitancePerMassData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarHeatCapacitancePerMassData& from);
  void MergeFrom(const ScalarHeatCapacitancePerMassData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarHeatCapacitancePerMassData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarHeatCapacitancePerMassData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarHeatCapacitancePerMassFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarHeatCapacitancePerMass = 1;
  bool has_scalarheatcapacitancepermass() const;
  private:
  bool _internal_has_scalarheatcapacitancepermass() const;
  public:
  void clear_scalarheatcapacitancepermass();
  const ::pulse::cdm::bind::ScalarData& scalarheatcapacitancepermass() const;
  ::pulse::cdm::bind::ScalarData* release_scalarheatcapacitancepermass();
  ::pulse::cdm::bind::ScalarData* mutable_scalarheatcapacitancepermass();
  void set_allocated_scalarheatcapacitancepermass(::pulse::cdm::bind::ScalarData* scalarheatcapacitancepermass);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarheatcapacitancepermass() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarheatcapacitancepermass();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarHeatCapacitancePerMassData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarheatcapacitancepermass_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarHeatConductanceData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarHeatConductanceData) */ {
 public:
  ScalarHeatConductanceData();
  virtual ~ScalarHeatConductanceData();

  ScalarHeatConductanceData(const ScalarHeatConductanceData& from);
  ScalarHeatConductanceData(ScalarHeatConductanceData&& from) noexcept
    : ScalarHeatConductanceData() {
    *this = ::std::move(from);
  }

  inline ScalarHeatConductanceData& operator=(const ScalarHeatConductanceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarHeatConductanceData& operator=(ScalarHeatConductanceData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarHeatConductanceData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarHeatConductanceData* internal_default_instance() {
    return reinterpret_cast<const ScalarHeatConductanceData*>(
               &_ScalarHeatConductanceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ScalarHeatConductanceData& a, ScalarHeatConductanceData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarHeatConductanceData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarHeatConductanceData* New() const final {
    return CreateMaybeMessage<ScalarHeatConductanceData>(nullptr);
  }

  ScalarHeatConductanceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarHeatConductanceData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarHeatConductanceData& from);
  void MergeFrom(const ScalarHeatConductanceData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarHeatConductanceData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarHeatConductanceData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarHeatConductanceFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarHeatConductance = 1;
  bool has_scalarheatconductance() const;
  private:
  bool _internal_has_scalarheatconductance() const;
  public:
  void clear_scalarheatconductance();
  const ::pulse::cdm::bind::ScalarData& scalarheatconductance() const;
  ::pulse::cdm::bind::ScalarData* release_scalarheatconductance();
  ::pulse::cdm::bind::ScalarData* mutable_scalarheatconductance();
  void set_allocated_scalarheatconductance(::pulse::cdm::bind::ScalarData* scalarheatconductance);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarheatconductance() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarheatconductance();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarHeatConductanceData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarheatconductance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarHeatConductancePerAreaData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarHeatConductancePerAreaData) */ {
 public:
  ScalarHeatConductancePerAreaData();
  virtual ~ScalarHeatConductancePerAreaData();

  ScalarHeatConductancePerAreaData(const ScalarHeatConductancePerAreaData& from);
  ScalarHeatConductancePerAreaData(ScalarHeatConductancePerAreaData&& from) noexcept
    : ScalarHeatConductancePerAreaData() {
    *this = ::std::move(from);
  }

  inline ScalarHeatConductancePerAreaData& operator=(const ScalarHeatConductancePerAreaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarHeatConductancePerAreaData& operator=(ScalarHeatConductancePerAreaData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarHeatConductancePerAreaData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarHeatConductancePerAreaData* internal_default_instance() {
    return reinterpret_cast<const ScalarHeatConductancePerAreaData*>(
               &_ScalarHeatConductancePerAreaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ScalarHeatConductancePerAreaData& a, ScalarHeatConductancePerAreaData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarHeatConductancePerAreaData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarHeatConductancePerAreaData* New() const final {
    return CreateMaybeMessage<ScalarHeatConductancePerAreaData>(nullptr);
  }

  ScalarHeatConductancePerAreaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarHeatConductancePerAreaData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarHeatConductancePerAreaData& from);
  void MergeFrom(const ScalarHeatConductancePerAreaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarHeatConductancePerAreaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarHeatConductancePerAreaData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarHeatConductancePerAreaFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarHeatConductancePerArea = 1;
  bool has_scalarheatconductanceperarea() const;
  private:
  bool _internal_has_scalarheatconductanceperarea() const;
  public:
  void clear_scalarheatconductanceperarea();
  const ::pulse::cdm::bind::ScalarData& scalarheatconductanceperarea() const;
  ::pulse::cdm::bind::ScalarData* release_scalarheatconductanceperarea();
  ::pulse::cdm::bind::ScalarData* mutable_scalarheatconductanceperarea();
  void set_allocated_scalarheatconductanceperarea(::pulse::cdm::bind::ScalarData* scalarheatconductanceperarea);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarheatconductanceperarea() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarheatconductanceperarea();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarHeatConductancePerAreaData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarheatconductanceperarea_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarHeatInductanceData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarHeatInductanceData) */ {
 public:
  ScalarHeatInductanceData();
  virtual ~ScalarHeatInductanceData();

  ScalarHeatInductanceData(const ScalarHeatInductanceData& from);
  ScalarHeatInductanceData(ScalarHeatInductanceData&& from) noexcept
    : ScalarHeatInductanceData() {
    *this = ::std::move(from);
  }

  inline ScalarHeatInductanceData& operator=(const ScalarHeatInductanceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarHeatInductanceData& operator=(ScalarHeatInductanceData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarHeatInductanceData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarHeatInductanceData* internal_default_instance() {
    return reinterpret_cast<const ScalarHeatInductanceData*>(
               &_ScalarHeatInductanceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ScalarHeatInductanceData& a, ScalarHeatInductanceData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarHeatInductanceData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarHeatInductanceData* New() const final {
    return CreateMaybeMessage<ScalarHeatInductanceData>(nullptr);
  }

  ScalarHeatInductanceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarHeatInductanceData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarHeatInductanceData& from);
  void MergeFrom(const ScalarHeatInductanceData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarHeatInductanceData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarHeatInductanceData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarHeatInductanceFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarHeatInductance = 1;
  bool has_scalarheatinductance() const;
  private:
  bool _internal_has_scalarheatinductance() const;
  public:
  void clear_scalarheatinductance();
  const ::pulse::cdm::bind::ScalarData& scalarheatinductance() const;
  ::pulse::cdm::bind::ScalarData* release_scalarheatinductance();
  ::pulse::cdm::bind::ScalarData* mutable_scalarheatinductance();
  void set_allocated_scalarheatinductance(::pulse::cdm::bind::ScalarData* scalarheatinductance);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarheatinductance() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarheatinductance();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarHeatInductanceData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarheatinductance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarHeatResistanceData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarHeatResistanceData) */ {
 public:
  ScalarHeatResistanceData();
  virtual ~ScalarHeatResistanceData();

  ScalarHeatResistanceData(const ScalarHeatResistanceData& from);
  ScalarHeatResistanceData(ScalarHeatResistanceData&& from) noexcept
    : ScalarHeatResistanceData() {
    *this = ::std::move(from);
  }

  inline ScalarHeatResistanceData& operator=(const ScalarHeatResistanceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarHeatResistanceData& operator=(ScalarHeatResistanceData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarHeatResistanceData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarHeatResistanceData* internal_default_instance() {
    return reinterpret_cast<const ScalarHeatResistanceData*>(
               &_ScalarHeatResistanceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ScalarHeatResistanceData& a, ScalarHeatResistanceData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarHeatResistanceData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarHeatResistanceData* New() const final {
    return CreateMaybeMessage<ScalarHeatResistanceData>(nullptr);
  }

  ScalarHeatResistanceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarHeatResistanceData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarHeatResistanceData& from);
  void MergeFrom(const ScalarHeatResistanceData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarHeatResistanceData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarHeatResistanceData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarHeatResistanceFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarHeatResistance = 1;
  bool has_scalarheatresistance() const;
  private:
  bool _internal_has_scalarheatresistance() const;
  public:
  void clear_scalarheatresistance();
  const ::pulse::cdm::bind::ScalarData& scalarheatresistance() const;
  ::pulse::cdm::bind::ScalarData* release_scalarheatresistance();
  ::pulse::cdm::bind::ScalarData* mutable_scalarheatresistance();
  void set_allocated_scalarheatresistance(::pulse::cdm::bind::ScalarData* scalarheatresistance);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarheatresistance() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarheatresistance();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarHeatResistanceData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarheatresistance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarHeatResistanceAreaData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarHeatResistanceAreaData) */ {
 public:
  ScalarHeatResistanceAreaData();
  virtual ~ScalarHeatResistanceAreaData();

  ScalarHeatResistanceAreaData(const ScalarHeatResistanceAreaData& from);
  ScalarHeatResistanceAreaData(ScalarHeatResistanceAreaData&& from) noexcept
    : ScalarHeatResistanceAreaData() {
    *this = ::std::move(from);
  }

  inline ScalarHeatResistanceAreaData& operator=(const ScalarHeatResistanceAreaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarHeatResistanceAreaData& operator=(ScalarHeatResistanceAreaData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarHeatResistanceAreaData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarHeatResistanceAreaData* internal_default_instance() {
    return reinterpret_cast<const ScalarHeatResistanceAreaData*>(
               &_ScalarHeatResistanceAreaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ScalarHeatResistanceAreaData& a, ScalarHeatResistanceAreaData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarHeatResistanceAreaData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarHeatResistanceAreaData* New() const final {
    return CreateMaybeMessage<ScalarHeatResistanceAreaData>(nullptr);
  }

  ScalarHeatResistanceAreaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarHeatResistanceAreaData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarHeatResistanceAreaData& from);
  void MergeFrom(const ScalarHeatResistanceAreaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarHeatResistanceAreaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarHeatResistanceAreaData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarHeatResistanceAreaFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarHeatResistanceArea = 1;
  bool has_scalarheatresistancearea() const;
  private:
  bool _internal_has_scalarheatresistancearea() const;
  public:
  void clear_scalarheatresistancearea();
  const ::pulse::cdm::bind::ScalarData& scalarheatresistancearea() const;
  ::pulse::cdm::bind::ScalarData* release_scalarheatresistancearea();
  ::pulse::cdm::bind::ScalarData* mutable_scalarheatresistancearea();
  void set_allocated_scalarheatresistancearea(::pulse::cdm::bind::ScalarData* scalarheatresistancearea);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarheatresistancearea() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarheatresistancearea();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarHeatResistanceAreaData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarheatresistancearea_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarInversePressureData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarInversePressureData) */ {
 public:
  ScalarInversePressureData();
  virtual ~ScalarInversePressureData();

  ScalarInversePressureData(const ScalarInversePressureData& from);
  ScalarInversePressureData(ScalarInversePressureData&& from) noexcept
    : ScalarInversePressureData() {
    *this = ::std::move(from);
  }

  inline ScalarInversePressureData& operator=(const ScalarInversePressureData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarInversePressureData& operator=(ScalarInversePressureData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarInversePressureData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarInversePressureData* internal_default_instance() {
    return reinterpret_cast<const ScalarInversePressureData*>(
               &_ScalarInversePressureData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(ScalarInversePressureData& a, ScalarInversePressureData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarInversePressureData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarInversePressureData* New() const final {
    return CreateMaybeMessage<ScalarInversePressureData>(nullptr);
  }

  ScalarInversePressureData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarInversePressureData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarInversePressureData& from);
  void MergeFrom(const ScalarInversePressureData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarInversePressureData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarInversePressureData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarInversePressureFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarInversePressure = 1;
  bool has_scalarinversepressure() const;
  private:
  bool _internal_has_scalarinversepressure() const;
  public:
  void clear_scalarinversepressure();
  const ::pulse::cdm::bind::ScalarData& scalarinversepressure() const;
  ::pulse::cdm::bind::ScalarData* release_scalarinversepressure();
  ::pulse::cdm::bind::ScalarData* mutable_scalarinversepressure();
  void set_allocated_scalarinversepressure(::pulse::cdm::bind::ScalarData* scalarinversepressure);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarinversepressure() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarinversepressure();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarInversePressureData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarinversepressure_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarInverseVolumeData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarInverseVolumeData) */ {
 public:
  ScalarInverseVolumeData();
  virtual ~ScalarInverseVolumeData();

  ScalarInverseVolumeData(const ScalarInverseVolumeData& from);
  ScalarInverseVolumeData(ScalarInverseVolumeData&& from) noexcept
    : ScalarInverseVolumeData() {
    *this = ::std::move(from);
  }

  inline ScalarInverseVolumeData& operator=(const ScalarInverseVolumeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarInverseVolumeData& operator=(ScalarInverseVolumeData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarInverseVolumeData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarInverseVolumeData* internal_default_instance() {
    return reinterpret_cast<const ScalarInverseVolumeData*>(
               &_ScalarInverseVolumeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(ScalarInverseVolumeData& a, ScalarInverseVolumeData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarInverseVolumeData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarInverseVolumeData* New() const final {
    return CreateMaybeMessage<ScalarInverseVolumeData>(nullptr);
  }

  ScalarInverseVolumeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarInverseVolumeData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarInverseVolumeData& from);
  void MergeFrom(const ScalarInverseVolumeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarInverseVolumeData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarInverseVolumeData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarInverseVolumeFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarInverseVolume = 1;
  bool has_scalarinversevolume() const;
  private:
  bool _internal_has_scalarinversevolume() const;
  public:
  void clear_scalarinversevolume();
  const ::pulse::cdm::bind::ScalarData& scalarinversevolume() const;
  ::pulse::cdm::bind::ScalarData* release_scalarinversevolume();
  ::pulse::cdm::bind::ScalarData* mutable_scalarinversevolume();
  void set_allocated_scalarinversevolume(::pulse::cdm::bind::ScalarData* scalarinversevolume);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarinversevolume() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarinversevolume();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarInverseVolumeData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarinversevolume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarLengthData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarLengthData) */ {
 public:
  ScalarLengthData();
  virtual ~ScalarLengthData();

  ScalarLengthData(const ScalarLengthData& from);
  ScalarLengthData(ScalarLengthData&& from) noexcept
    : ScalarLengthData() {
    *this = ::std::move(from);
  }

  inline ScalarLengthData& operator=(const ScalarLengthData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarLengthData& operator=(ScalarLengthData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarLengthData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarLengthData* internal_default_instance() {
    return reinterpret_cast<const ScalarLengthData*>(
               &_ScalarLengthData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ScalarLengthData& a, ScalarLengthData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarLengthData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarLengthData* New() const final {
    return CreateMaybeMessage<ScalarLengthData>(nullptr);
  }

  ScalarLengthData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarLengthData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarLengthData& from);
  void MergeFrom(const ScalarLengthData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarLengthData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarLengthData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarLengthFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarLength = 1;
  bool has_scalarlength() const;
  private:
  bool _internal_has_scalarlength() const;
  public:
  void clear_scalarlength();
  const ::pulse::cdm::bind::ScalarData& scalarlength() const;
  ::pulse::cdm::bind::ScalarData* release_scalarlength();
  ::pulse::cdm::bind::ScalarData* mutable_scalarlength();
  void set_allocated_scalarlength(::pulse::cdm::bind::ScalarData* scalarlength);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarlength() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarlength();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarLengthData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarlength_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarLengthPerTimeData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarLengthPerTimeData) */ {
 public:
  ScalarLengthPerTimeData();
  virtual ~ScalarLengthPerTimeData();

  ScalarLengthPerTimeData(const ScalarLengthPerTimeData& from);
  ScalarLengthPerTimeData(ScalarLengthPerTimeData&& from) noexcept
    : ScalarLengthPerTimeData() {
    *this = ::std::move(from);
  }

  inline ScalarLengthPerTimeData& operator=(const ScalarLengthPerTimeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarLengthPerTimeData& operator=(ScalarLengthPerTimeData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarLengthPerTimeData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarLengthPerTimeData* internal_default_instance() {
    return reinterpret_cast<const ScalarLengthPerTimeData*>(
               &_ScalarLengthPerTimeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(ScalarLengthPerTimeData& a, ScalarLengthPerTimeData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarLengthPerTimeData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarLengthPerTimeData* New() const final {
    return CreateMaybeMessage<ScalarLengthPerTimeData>(nullptr);
  }

  ScalarLengthPerTimeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarLengthPerTimeData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarLengthPerTimeData& from);
  void MergeFrom(const ScalarLengthPerTimeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarLengthPerTimeData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarLengthPerTimeData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarLengthPerTimeFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarLengthPerTime = 1;
  bool has_scalarlengthpertime() const;
  private:
  bool _internal_has_scalarlengthpertime() const;
  public:
  void clear_scalarlengthpertime();
  const ::pulse::cdm::bind::ScalarData& scalarlengthpertime() const;
  ::pulse::cdm::bind::ScalarData* release_scalarlengthpertime();
  ::pulse::cdm::bind::ScalarData* mutable_scalarlengthpertime();
  void set_allocated_scalarlengthpertime(::pulse::cdm::bind::ScalarData* scalarlengthpertime);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarlengthpertime() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarlengthpertime();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarLengthPerTimeData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarlengthpertime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarLengthPerTimePressureData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarLengthPerTimePressureData) */ {
 public:
  ScalarLengthPerTimePressureData();
  virtual ~ScalarLengthPerTimePressureData();

  ScalarLengthPerTimePressureData(const ScalarLengthPerTimePressureData& from);
  ScalarLengthPerTimePressureData(ScalarLengthPerTimePressureData&& from) noexcept
    : ScalarLengthPerTimePressureData() {
    *this = ::std::move(from);
  }

  inline ScalarLengthPerTimePressureData& operator=(const ScalarLengthPerTimePressureData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarLengthPerTimePressureData& operator=(ScalarLengthPerTimePressureData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarLengthPerTimePressureData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarLengthPerTimePressureData* internal_default_instance() {
    return reinterpret_cast<const ScalarLengthPerTimePressureData*>(
               &_ScalarLengthPerTimePressureData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(ScalarLengthPerTimePressureData& a, ScalarLengthPerTimePressureData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarLengthPerTimePressureData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarLengthPerTimePressureData* New() const final {
    return CreateMaybeMessage<ScalarLengthPerTimePressureData>(nullptr);
  }

  ScalarLengthPerTimePressureData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarLengthPerTimePressureData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarLengthPerTimePressureData& from);
  void MergeFrom(const ScalarLengthPerTimePressureData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarLengthPerTimePressureData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarLengthPerTimePressureData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarLengthPerTimePressureFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarLengthPerTimePressure = 1;
  bool has_scalarlengthpertimepressure() const;
  private:
  bool _internal_has_scalarlengthpertimepressure() const;
  public:
  void clear_scalarlengthpertimepressure();
  const ::pulse::cdm::bind::ScalarData& scalarlengthpertimepressure() const;
  ::pulse::cdm::bind::ScalarData* release_scalarlengthpertimepressure();
  ::pulse::cdm::bind::ScalarData* mutable_scalarlengthpertimepressure();
  void set_allocated_scalarlengthpertimepressure(::pulse::cdm::bind::ScalarData* scalarlengthpertimepressure);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarlengthpertimepressure() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarlengthpertimepressure();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarLengthPerTimePressureData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarlengthpertimepressure_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarMassData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarMassData) */ {
 public:
  ScalarMassData();
  virtual ~ScalarMassData();

  ScalarMassData(const ScalarMassData& from);
  ScalarMassData(ScalarMassData&& from) noexcept
    : ScalarMassData() {
    *this = ::std::move(from);
  }

  inline ScalarMassData& operator=(const ScalarMassData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarMassData& operator=(ScalarMassData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarMassData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarMassData* internal_default_instance() {
    return reinterpret_cast<const ScalarMassData*>(
               &_ScalarMassData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(ScalarMassData& a, ScalarMassData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarMassData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarMassData* New() const final {
    return CreateMaybeMessage<ScalarMassData>(nullptr);
  }

  ScalarMassData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarMassData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarMassData& from);
  void MergeFrom(const ScalarMassData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarMassData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarMassData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarMassFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarMass = 1;
  bool has_scalarmass() const;
  private:
  bool _internal_has_scalarmass() const;
  public:
  void clear_scalarmass();
  const ::pulse::cdm::bind::ScalarData& scalarmass() const;
  ::pulse::cdm::bind::ScalarData* release_scalarmass();
  ::pulse::cdm::bind::ScalarData* mutable_scalarmass();
  void set_allocated_scalarmass(::pulse::cdm::bind::ScalarData* scalarmass);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarmass() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarmass();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarMassData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarmass_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarMassPerAmountData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarMassPerAmountData) */ {
 public:
  ScalarMassPerAmountData();
  virtual ~ScalarMassPerAmountData();

  ScalarMassPerAmountData(const ScalarMassPerAmountData& from);
  ScalarMassPerAmountData(ScalarMassPerAmountData&& from) noexcept
    : ScalarMassPerAmountData() {
    *this = ::std::move(from);
  }

  inline ScalarMassPerAmountData& operator=(const ScalarMassPerAmountData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarMassPerAmountData& operator=(ScalarMassPerAmountData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarMassPerAmountData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarMassPerAmountData* internal_default_instance() {
    return reinterpret_cast<const ScalarMassPerAmountData*>(
               &_ScalarMassPerAmountData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(ScalarMassPerAmountData& a, ScalarMassPerAmountData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarMassPerAmountData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarMassPerAmountData* New() const final {
    return CreateMaybeMessage<ScalarMassPerAmountData>(nullptr);
  }

  ScalarMassPerAmountData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarMassPerAmountData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarMassPerAmountData& from);
  void MergeFrom(const ScalarMassPerAmountData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarMassPerAmountData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarMassPerAmountData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarMassPerAmountFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarMassPerAmount = 1;
  bool has_scalarmassperamount() const;
  private:
  bool _internal_has_scalarmassperamount() const;
  public:
  void clear_scalarmassperamount();
  const ::pulse::cdm::bind::ScalarData& scalarmassperamount() const;
  ::pulse::cdm::bind::ScalarData* release_scalarmassperamount();
  ::pulse::cdm::bind::ScalarData* mutable_scalarmassperamount();
  void set_allocated_scalarmassperamount(::pulse::cdm::bind::ScalarData* scalarmassperamount);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarmassperamount() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarmassperamount();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarMassPerAmountData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarmassperamount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarMassPerAreaTimeData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarMassPerAreaTimeData) */ {
 public:
  ScalarMassPerAreaTimeData();
  virtual ~ScalarMassPerAreaTimeData();

  ScalarMassPerAreaTimeData(const ScalarMassPerAreaTimeData& from);
  ScalarMassPerAreaTimeData(ScalarMassPerAreaTimeData&& from) noexcept
    : ScalarMassPerAreaTimeData() {
    *this = ::std::move(from);
  }

  inline ScalarMassPerAreaTimeData& operator=(const ScalarMassPerAreaTimeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarMassPerAreaTimeData& operator=(ScalarMassPerAreaTimeData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarMassPerAreaTimeData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarMassPerAreaTimeData* internal_default_instance() {
    return reinterpret_cast<const ScalarMassPerAreaTimeData*>(
               &_ScalarMassPerAreaTimeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(ScalarMassPerAreaTimeData& a, ScalarMassPerAreaTimeData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarMassPerAreaTimeData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarMassPerAreaTimeData* New() const final {
    return CreateMaybeMessage<ScalarMassPerAreaTimeData>(nullptr);
  }

  ScalarMassPerAreaTimeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarMassPerAreaTimeData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarMassPerAreaTimeData& from);
  void MergeFrom(const ScalarMassPerAreaTimeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarMassPerAreaTimeData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarMassPerAreaTimeData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarMassPerAreaTimeFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarMassPerAreaTime = 1;
  bool has_scalarmassperareatime() const;
  private:
  bool _internal_has_scalarmassperareatime() const;
  public:
  void clear_scalarmassperareatime();
  const ::pulse::cdm::bind::ScalarData& scalarmassperareatime() const;
  ::pulse::cdm::bind::ScalarData* release_scalarmassperareatime();
  ::pulse::cdm::bind::ScalarData* mutable_scalarmassperareatime();
  void set_allocated_scalarmassperareatime(::pulse::cdm::bind::ScalarData* scalarmassperareatime);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarmassperareatime() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarmassperareatime();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarMassPerAreaTimeData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarmassperareatime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarMassPerMassData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarMassPerMassData) */ {
 public:
  ScalarMassPerMassData();
  virtual ~ScalarMassPerMassData();

  ScalarMassPerMassData(const ScalarMassPerMassData& from);
  ScalarMassPerMassData(ScalarMassPerMassData&& from) noexcept
    : ScalarMassPerMassData() {
    *this = ::std::move(from);
  }

  inline ScalarMassPerMassData& operator=(const ScalarMassPerMassData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarMassPerMassData& operator=(ScalarMassPerMassData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarMassPerMassData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarMassPerMassData* internal_default_instance() {
    return reinterpret_cast<const ScalarMassPerMassData*>(
               &_ScalarMassPerMassData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(ScalarMassPerMassData& a, ScalarMassPerMassData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarMassPerMassData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarMassPerMassData* New() const final {
    return CreateMaybeMessage<ScalarMassPerMassData>(nullptr);
  }

  ScalarMassPerMassData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarMassPerMassData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarMassPerMassData& from);
  void MergeFrom(const ScalarMassPerMassData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarMassPerMassData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarMassPerMassData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarMassPerMassFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarMassPerMass = 1;
  bool has_scalarmasspermass() const;
  private:
  bool _internal_has_scalarmasspermass() const;
  public:
  void clear_scalarmasspermass();
  const ::pulse::cdm::bind::ScalarData& scalarmasspermass() const;
  ::pulse::cdm::bind::ScalarData* release_scalarmasspermass();
  ::pulse::cdm::bind::ScalarData* mutable_scalarmasspermass();
  void set_allocated_scalarmasspermass(::pulse::cdm::bind::ScalarData* scalarmasspermass);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarmasspermass() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarmasspermass();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarMassPerMassData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarmasspermass_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarMassPerTimeData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarMassPerTimeData) */ {
 public:
  ScalarMassPerTimeData();
  virtual ~ScalarMassPerTimeData();

  ScalarMassPerTimeData(const ScalarMassPerTimeData& from);
  ScalarMassPerTimeData(ScalarMassPerTimeData&& from) noexcept
    : ScalarMassPerTimeData() {
    *this = ::std::move(from);
  }

  inline ScalarMassPerTimeData& operator=(const ScalarMassPerTimeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarMassPerTimeData& operator=(ScalarMassPerTimeData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarMassPerTimeData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarMassPerTimeData* internal_default_instance() {
    return reinterpret_cast<const ScalarMassPerTimeData*>(
               &_ScalarMassPerTimeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(ScalarMassPerTimeData& a, ScalarMassPerTimeData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarMassPerTimeData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarMassPerTimeData* New() const final {
    return CreateMaybeMessage<ScalarMassPerTimeData>(nullptr);
  }

  ScalarMassPerTimeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarMassPerTimeData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarMassPerTimeData& from);
  void MergeFrom(const ScalarMassPerTimeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarMassPerTimeData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarMassPerTimeData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarMassPerTimeFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarMassPerTime = 1;
  bool has_scalarmasspertime() const;
  private:
  bool _internal_has_scalarmasspertime() const;
  public:
  void clear_scalarmasspertime();
  const ::pulse::cdm::bind::ScalarData& scalarmasspertime() const;
  ::pulse::cdm::bind::ScalarData* release_scalarmasspertime();
  ::pulse::cdm::bind::ScalarData* mutable_scalarmasspertime();
  void set_allocated_scalarmasspertime(::pulse::cdm::bind::ScalarData* scalarmasspertime);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarmasspertime() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarmasspertime();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarMassPerTimeData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarmasspertime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarMassPerVolumeData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarMassPerVolumeData) */ {
 public:
  ScalarMassPerVolumeData();
  virtual ~ScalarMassPerVolumeData();

  ScalarMassPerVolumeData(const ScalarMassPerVolumeData& from);
  ScalarMassPerVolumeData(ScalarMassPerVolumeData&& from) noexcept
    : ScalarMassPerVolumeData() {
    *this = ::std::move(from);
  }

  inline ScalarMassPerVolumeData& operator=(const ScalarMassPerVolumeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarMassPerVolumeData& operator=(ScalarMassPerVolumeData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarMassPerVolumeData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarMassPerVolumeData* internal_default_instance() {
    return reinterpret_cast<const ScalarMassPerVolumeData*>(
               &_ScalarMassPerVolumeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(ScalarMassPerVolumeData& a, ScalarMassPerVolumeData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarMassPerVolumeData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarMassPerVolumeData* New() const final {
    return CreateMaybeMessage<ScalarMassPerVolumeData>(nullptr);
  }

  ScalarMassPerVolumeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarMassPerVolumeData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarMassPerVolumeData& from);
  void MergeFrom(const ScalarMassPerVolumeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarMassPerVolumeData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarMassPerVolumeData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarMassPerVolumeFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarMassPerVolume = 1;
  bool has_scalarmasspervolume() const;
  private:
  bool _internal_has_scalarmasspervolume() const;
  public:
  void clear_scalarmasspervolume();
  const ::pulse::cdm::bind::ScalarData& scalarmasspervolume() const;
  ::pulse::cdm::bind::ScalarData* release_scalarmasspervolume();
  ::pulse::cdm::bind::ScalarData* mutable_scalarmasspervolume();
  void set_allocated_scalarmasspervolume(::pulse::cdm::bind::ScalarData* scalarmasspervolume);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarmasspervolume() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarmasspervolume();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarMassPerVolumeData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarmasspervolume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarOsmolalityData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarOsmolalityData) */ {
 public:
  ScalarOsmolalityData();
  virtual ~ScalarOsmolalityData();

  ScalarOsmolalityData(const ScalarOsmolalityData& from);
  ScalarOsmolalityData(ScalarOsmolalityData&& from) noexcept
    : ScalarOsmolalityData() {
    *this = ::std::move(from);
  }

  inline ScalarOsmolalityData& operator=(const ScalarOsmolalityData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarOsmolalityData& operator=(ScalarOsmolalityData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarOsmolalityData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarOsmolalityData* internal_default_instance() {
    return reinterpret_cast<const ScalarOsmolalityData*>(
               &_ScalarOsmolalityData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(ScalarOsmolalityData& a, ScalarOsmolalityData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarOsmolalityData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarOsmolalityData* New() const final {
    return CreateMaybeMessage<ScalarOsmolalityData>(nullptr);
  }

  ScalarOsmolalityData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarOsmolalityData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarOsmolalityData& from);
  void MergeFrom(const ScalarOsmolalityData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarOsmolalityData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarOsmolalityData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarOsmolalityFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarOsmolality = 1;
  bool has_scalarosmolality() const;
  private:
  bool _internal_has_scalarosmolality() const;
  public:
  void clear_scalarosmolality();
  const ::pulse::cdm::bind::ScalarData& scalarosmolality() const;
  ::pulse::cdm::bind::ScalarData* release_scalarosmolality();
  ::pulse::cdm::bind::ScalarData* mutable_scalarosmolality();
  void set_allocated_scalarosmolality(::pulse::cdm::bind::ScalarData* scalarosmolality);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarosmolality() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarosmolality();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarOsmolalityData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarosmolality_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarOsmolarityData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarOsmolarityData) */ {
 public:
  ScalarOsmolarityData();
  virtual ~ScalarOsmolarityData();

  ScalarOsmolarityData(const ScalarOsmolarityData& from);
  ScalarOsmolarityData(ScalarOsmolarityData&& from) noexcept
    : ScalarOsmolarityData() {
    *this = ::std::move(from);
  }

  inline ScalarOsmolarityData& operator=(const ScalarOsmolarityData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarOsmolarityData& operator=(ScalarOsmolarityData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarOsmolarityData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarOsmolarityData* internal_default_instance() {
    return reinterpret_cast<const ScalarOsmolarityData*>(
               &_ScalarOsmolarityData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(ScalarOsmolarityData& a, ScalarOsmolarityData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarOsmolarityData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarOsmolarityData* New() const final {
    return CreateMaybeMessage<ScalarOsmolarityData>(nullptr);
  }

  ScalarOsmolarityData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarOsmolarityData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarOsmolarityData& from);
  void MergeFrom(const ScalarOsmolarityData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarOsmolarityData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarOsmolarityData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarOsmolarityFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarOsmolarity = 1;
  bool has_scalarosmolarity() const;
  private:
  bool _internal_has_scalarosmolarity() const;
  public:
  void clear_scalarosmolarity();
  const ::pulse::cdm::bind::ScalarData& scalarosmolarity() const;
  ::pulse::cdm::bind::ScalarData* release_scalarosmolarity();
  ::pulse::cdm::bind::ScalarData* mutable_scalarosmolarity();
  void set_allocated_scalarosmolarity(::pulse::cdm::bind::ScalarData* scalarosmolarity);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarosmolarity() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarosmolarity();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarOsmolarityData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarosmolarity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarPowerData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarPowerData) */ {
 public:
  ScalarPowerData();
  virtual ~ScalarPowerData();

  ScalarPowerData(const ScalarPowerData& from);
  ScalarPowerData(ScalarPowerData&& from) noexcept
    : ScalarPowerData() {
    *this = ::std::move(from);
  }

  inline ScalarPowerData& operator=(const ScalarPowerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarPowerData& operator=(ScalarPowerData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarPowerData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarPowerData* internal_default_instance() {
    return reinterpret_cast<const ScalarPowerData*>(
               &_ScalarPowerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(ScalarPowerData& a, ScalarPowerData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarPowerData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarPowerData* New() const final {
    return CreateMaybeMessage<ScalarPowerData>(nullptr);
  }

  ScalarPowerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarPowerData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarPowerData& from);
  void MergeFrom(const ScalarPowerData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarPowerData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarPowerData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarPowerFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarPower = 1;
  bool has_scalarpower() const;
  private:
  bool _internal_has_scalarpower() const;
  public:
  void clear_scalarpower();
  const ::pulse::cdm::bind::ScalarData& scalarpower() const;
  ::pulse::cdm::bind::ScalarData* release_scalarpower();
  ::pulse::cdm::bind::ScalarData* mutable_scalarpower();
  void set_allocated_scalarpower(::pulse::cdm::bind::ScalarData* scalarpower);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarpower() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarpower();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarPowerData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarpower_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarPowerPerAreaTemperatureToTheFourthData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarPowerPerAreaTemperatureToTheFourthData) */ {
 public:
  ScalarPowerPerAreaTemperatureToTheFourthData();
  virtual ~ScalarPowerPerAreaTemperatureToTheFourthData();

  ScalarPowerPerAreaTemperatureToTheFourthData(const ScalarPowerPerAreaTemperatureToTheFourthData& from);
  ScalarPowerPerAreaTemperatureToTheFourthData(ScalarPowerPerAreaTemperatureToTheFourthData&& from) noexcept
    : ScalarPowerPerAreaTemperatureToTheFourthData() {
    *this = ::std::move(from);
  }

  inline ScalarPowerPerAreaTemperatureToTheFourthData& operator=(const ScalarPowerPerAreaTemperatureToTheFourthData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarPowerPerAreaTemperatureToTheFourthData& operator=(ScalarPowerPerAreaTemperatureToTheFourthData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarPowerPerAreaTemperatureToTheFourthData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarPowerPerAreaTemperatureToTheFourthData* internal_default_instance() {
    return reinterpret_cast<const ScalarPowerPerAreaTemperatureToTheFourthData*>(
               &_ScalarPowerPerAreaTemperatureToTheFourthData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(ScalarPowerPerAreaTemperatureToTheFourthData& a, ScalarPowerPerAreaTemperatureToTheFourthData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarPowerPerAreaTemperatureToTheFourthData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarPowerPerAreaTemperatureToTheFourthData* New() const final {
    return CreateMaybeMessage<ScalarPowerPerAreaTemperatureToTheFourthData>(nullptr);
  }

  ScalarPowerPerAreaTemperatureToTheFourthData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarPowerPerAreaTemperatureToTheFourthData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarPowerPerAreaTemperatureToTheFourthData& from);
  void MergeFrom(const ScalarPowerPerAreaTemperatureToTheFourthData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarPowerPerAreaTemperatureToTheFourthData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarPowerPerAreaTemperatureToTheFourthData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarPowerPerAreaTemperatureToTheFourthFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarPowerPerAreaTemperatureToTheFourth = 1;
  bool has_scalarpowerperareatemperaturetothefourth() const;
  private:
  bool _internal_has_scalarpowerperareatemperaturetothefourth() const;
  public:
  void clear_scalarpowerperareatemperaturetothefourth();
  const ::pulse::cdm::bind::ScalarData& scalarpowerperareatemperaturetothefourth() const;
  ::pulse::cdm::bind::ScalarData* release_scalarpowerperareatemperaturetothefourth();
  ::pulse::cdm::bind::ScalarData* mutable_scalarpowerperareatemperaturetothefourth();
  void set_allocated_scalarpowerperareatemperaturetothefourth(::pulse::cdm::bind::ScalarData* scalarpowerperareatemperaturetothefourth);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarpowerperareatemperaturetothefourth() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarpowerperareatemperaturetothefourth();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarPowerPerAreaTemperatureToTheFourthData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarpowerperareatemperaturetothefourth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarPressureData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarPressureData) */ {
 public:
  ScalarPressureData();
  virtual ~ScalarPressureData();

  ScalarPressureData(const ScalarPressureData& from);
  ScalarPressureData(ScalarPressureData&& from) noexcept
    : ScalarPressureData() {
    *this = ::std::move(from);
  }

  inline ScalarPressureData& operator=(const ScalarPressureData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarPressureData& operator=(ScalarPressureData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarPressureData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarPressureData* internal_default_instance() {
    return reinterpret_cast<const ScalarPressureData*>(
               &_ScalarPressureData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(ScalarPressureData& a, ScalarPressureData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarPressureData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarPressureData* New() const final {
    return CreateMaybeMessage<ScalarPressureData>(nullptr);
  }

  ScalarPressureData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarPressureData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarPressureData& from);
  void MergeFrom(const ScalarPressureData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarPressureData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarPressureData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarPressureFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarPressure = 1;
  bool has_scalarpressure() const;
  private:
  bool _internal_has_scalarpressure() const;
  public:
  void clear_scalarpressure();
  const ::pulse::cdm::bind::ScalarData& scalarpressure() const;
  ::pulse::cdm::bind::ScalarData* release_scalarpressure();
  ::pulse::cdm::bind::ScalarData* mutable_scalarpressure();
  void set_allocated_scalarpressure(::pulse::cdm::bind::ScalarData* scalarpressure);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarpressure() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarpressure();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarPressureData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarpressure_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarPressurePerVolumeData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarPressurePerVolumeData) */ {
 public:
  ScalarPressurePerVolumeData();
  virtual ~ScalarPressurePerVolumeData();

  ScalarPressurePerVolumeData(const ScalarPressurePerVolumeData& from);
  ScalarPressurePerVolumeData(ScalarPressurePerVolumeData&& from) noexcept
    : ScalarPressurePerVolumeData() {
    *this = ::std::move(from);
  }

  inline ScalarPressurePerVolumeData& operator=(const ScalarPressurePerVolumeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarPressurePerVolumeData& operator=(ScalarPressurePerVolumeData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarPressurePerVolumeData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarPressurePerVolumeData* internal_default_instance() {
    return reinterpret_cast<const ScalarPressurePerVolumeData*>(
               &_ScalarPressurePerVolumeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(ScalarPressurePerVolumeData& a, ScalarPressurePerVolumeData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarPressurePerVolumeData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarPressurePerVolumeData* New() const final {
    return CreateMaybeMessage<ScalarPressurePerVolumeData>(nullptr);
  }

  ScalarPressurePerVolumeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarPressurePerVolumeData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarPressurePerVolumeData& from);
  void MergeFrom(const ScalarPressurePerVolumeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarPressurePerVolumeData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarPressurePerVolumeData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarPressurePerVolumeFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarPressurePerVolume = 1;
  bool has_scalarpressurepervolume() const;
  private:
  bool _internal_has_scalarpressurepervolume() const;
  public:
  void clear_scalarpressurepervolume();
  const ::pulse::cdm::bind::ScalarData& scalarpressurepervolume() const;
  ::pulse::cdm::bind::ScalarData* release_scalarpressurepervolume();
  ::pulse::cdm::bind::ScalarData* mutable_scalarpressurepervolume();
  void set_allocated_scalarpressurepervolume(::pulse::cdm::bind::ScalarData* scalarpressurepervolume);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarpressurepervolume() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarpressurepervolume();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarPressurePerVolumeData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarpressurepervolume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarPressureTimePerVolumeAreaData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarPressureTimePerVolumeAreaData) */ {
 public:
  ScalarPressureTimePerVolumeAreaData();
  virtual ~ScalarPressureTimePerVolumeAreaData();

  ScalarPressureTimePerVolumeAreaData(const ScalarPressureTimePerVolumeAreaData& from);
  ScalarPressureTimePerVolumeAreaData(ScalarPressureTimePerVolumeAreaData&& from) noexcept
    : ScalarPressureTimePerVolumeAreaData() {
    *this = ::std::move(from);
  }

  inline ScalarPressureTimePerVolumeAreaData& operator=(const ScalarPressureTimePerVolumeAreaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarPressureTimePerVolumeAreaData& operator=(ScalarPressureTimePerVolumeAreaData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarPressureTimePerVolumeAreaData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarPressureTimePerVolumeAreaData* internal_default_instance() {
    return reinterpret_cast<const ScalarPressureTimePerVolumeAreaData*>(
               &_ScalarPressureTimePerVolumeAreaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(ScalarPressureTimePerVolumeAreaData& a, ScalarPressureTimePerVolumeAreaData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarPressureTimePerVolumeAreaData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarPressureTimePerVolumeAreaData* New() const final {
    return CreateMaybeMessage<ScalarPressureTimePerVolumeAreaData>(nullptr);
  }

  ScalarPressureTimePerVolumeAreaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarPressureTimePerVolumeAreaData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarPressureTimePerVolumeAreaData& from);
  void MergeFrom(const ScalarPressureTimePerVolumeAreaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarPressureTimePerVolumeAreaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarPressureTimePerVolumeAreaData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarPressureTimePerVolumeAreaFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarPressureTimePerVolumeArea = 1;
  bool has_scalarpressuretimepervolumearea() const;
  private:
  bool _internal_has_scalarpressuretimepervolumearea() const;
  public:
  void clear_scalarpressuretimepervolumearea();
  const ::pulse::cdm::bind::ScalarData& scalarpressuretimepervolumearea() const;
  ::pulse::cdm::bind::ScalarData* release_scalarpressuretimepervolumearea();
  ::pulse::cdm::bind::ScalarData* mutable_scalarpressuretimepervolumearea();
  void set_allocated_scalarpressuretimepervolumearea(::pulse::cdm::bind::ScalarData* scalarpressuretimepervolumearea);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarpressuretimepervolumearea() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarpressuretimepervolumearea();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarPressureTimePerVolumeAreaData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarpressuretimepervolumearea_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarPressureTimePerAreaData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarPressureTimePerAreaData) */ {
 public:
  ScalarPressureTimePerAreaData();
  virtual ~ScalarPressureTimePerAreaData();

  ScalarPressureTimePerAreaData(const ScalarPressureTimePerAreaData& from);
  ScalarPressureTimePerAreaData(ScalarPressureTimePerAreaData&& from) noexcept
    : ScalarPressureTimePerAreaData() {
    *this = ::std::move(from);
  }

  inline ScalarPressureTimePerAreaData& operator=(const ScalarPressureTimePerAreaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarPressureTimePerAreaData& operator=(ScalarPressureTimePerAreaData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarPressureTimePerAreaData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarPressureTimePerAreaData* internal_default_instance() {
    return reinterpret_cast<const ScalarPressureTimePerAreaData*>(
               &_ScalarPressureTimePerAreaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(ScalarPressureTimePerAreaData& a, ScalarPressureTimePerAreaData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarPressureTimePerAreaData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarPressureTimePerAreaData* New() const final {
    return CreateMaybeMessage<ScalarPressureTimePerAreaData>(nullptr);
  }

  ScalarPressureTimePerAreaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarPressureTimePerAreaData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarPressureTimePerAreaData& from);
  void MergeFrom(const ScalarPressureTimePerAreaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarPressureTimePerAreaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarPressureTimePerAreaData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarPressureTimePerAreaFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarPressureTimePerArea = 1;
  bool has_scalarpressuretimeperarea() const;
  private:
  bool _internal_has_scalarpressuretimeperarea() const;
  public:
  void clear_scalarpressuretimeperarea();
  const ::pulse::cdm::bind::ScalarData& scalarpressuretimeperarea() const;
  ::pulse::cdm::bind::ScalarData* release_scalarpressuretimeperarea();
  ::pulse::cdm::bind::ScalarData* mutable_scalarpressuretimeperarea();
  void set_allocated_scalarpressuretimeperarea(::pulse::cdm::bind::ScalarData* scalarpressuretimeperarea);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarpressuretimeperarea() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarpressuretimeperarea();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarPressureTimePerAreaData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarpressuretimeperarea_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarPressureTimePerVolumeData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarPressureTimePerVolumeData) */ {
 public:
  ScalarPressureTimePerVolumeData();
  virtual ~ScalarPressureTimePerVolumeData();

  ScalarPressureTimePerVolumeData(const ScalarPressureTimePerVolumeData& from);
  ScalarPressureTimePerVolumeData(ScalarPressureTimePerVolumeData&& from) noexcept
    : ScalarPressureTimePerVolumeData() {
    *this = ::std::move(from);
  }

  inline ScalarPressureTimePerVolumeData& operator=(const ScalarPressureTimePerVolumeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarPressureTimePerVolumeData& operator=(ScalarPressureTimePerVolumeData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarPressureTimePerVolumeData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarPressureTimePerVolumeData* internal_default_instance() {
    return reinterpret_cast<const ScalarPressureTimePerVolumeData*>(
               &_ScalarPressureTimePerVolumeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(ScalarPressureTimePerVolumeData& a, ScalarPressureTimePerVolumeData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarPressureTimePerVolumeData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarPressureTimePerVolumeData* New() const final {
    return CreateMaybeMessage<ScalarPressureTimePerVolumeData>(nullptr);
  }

  ScalarPressureTimePerVolumeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarPressureTimePerVolumeData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarPressureTimePerVolumeData& from);
  void MergeFrom(const ScalarPressureTimePerVolumeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarPressureTimePerVolumeData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarPressureTimePerVolumeData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarPressureTimePerVolumeFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarPressureTimePerVolume = 1;
  bool has_scalarpressuretimepervolume() const;
  private:
  bool _internal_has_scalarpressuretimepervolume() const;
  public:
  void clear_scalarpressuretimepervolume();
  const ::pulse::cdm::bind::ScalarData& scalarpressuretimepervolume() const;
  ::pulse::cdm::bind::ScalarData* release_scalarpressuretimepervolume();
  ::pulse::cdm::bind::ScalarData* mutable_scalarpressuretimepervolume();
  void set_allocated_scalarpressuretimepervolume(::pulse::cdm::bind::ScalarData* scalarpressuretimepervolume);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarpressuretimepervolume() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarpressuretimepervolume();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarPressureTimePerVolumeData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarpressuretimepervolume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarPressureTimeSquaredPerVolumeData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarPressureTimeSquaredPerVolumeData) */ {
 public:
  ScalarPressureTimeSquaredPerVolumeData();
  virtual ~ScalarPressureTimeSquaredPerVolumeData();

  ScalarPressureTimeSquaredPerVolumeData(const ScalarPressureTimeSquaredPerVolumeData& from);
  ScalarPressureTimeSquaredPerVolumeData(ScalarPressureTimeSquaredPerVolumeData&& from) noexcept
    : ScalarPressureTimeSquaredPerVolumeData() {
    *this = ::std::move(from);
  }

  inline ScalarPressureTimeSquaredPerVolumeData& operator=(const ScalarPressureTimeSquaredPerVolumeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarPressureTimeSquaredPerVolumeData& operator=(ScalarPressureTimeSquaredPerVolumeData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarPressureTimeSquaredPerVolumeData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarPressureTimeSquaredPerVolumeData* internal_default_instance() {
    return reinterpret_cast<const ScalarPressureTimeSquaredPerVolumeData*>(
               &_ScalarPressureTimeSquaredPerVolumeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(ScalarPressureTimeSquaredPerVolumeData& a, ScalarPressureTimeSquaredPerVolumeData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarPressureTimeSquaredPerVolumeData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarPressureTimeSquaredPerVolumeData* New() const final {
    return CreateMaybeMessage<ScalarPressureTimeSquaredPerVolumeData>(nullptr);
  }

  ScalarPressureTimeSquaredPerVolumeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarPressureTimeSquaredPerVolumeData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarPressureTimeSquaredPerVolumeData& from);
  void MergeFrom(const ScalarPressureTimeSquaredPerVolumeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarPressureTimeSquaredPerVolumeData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarPressureTimeSquaredPerVolumeData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarPressureTimeSquaredPerVolumeFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarPressureTimeSquaredPerVolume = 1;
  bool has_scalarpressuretimesquaredpervolume() const;
  private:
  bool _internal_has_scalarpressuretimesquaredpervolume() const;
  public:
  void clear_scalarpressuretimesquaredpervolume();
  const ::pulse::cdm::bind::ScalarData& scalarpressuretimesquaredpervolume() const;
  ::pulse::cdm::bind::ScalarData* release_scalarpressuretimesquaredpervolume();
  ::pulse::cdm::bind::ScalarData* mutable_scalarpressuretimesquaredpervolume();
  void set_allocated_scalarpressuretimesquaredpervolume(::pulse::cdm::bind::ScalarData* scalarpressuretimesquaredpervolume);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarpressuretimesquaredpervolume() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarpressuretimesquaredpervolume();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarPressureTimeSquaredPerVolumeData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarpressuretimesquaredpervolume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarTimeData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarTimeData) */ {
 public:
  ScalarTimeData();
  virtual ~ScalarTimeData();

  ScalarTimeData(const ScalarTimeData& from);
  ScalarTimeData(ScalarTimeData&& from) noexcept
    : ScalarTimeData() {
    *this = ::std::move(from);
  }

  inline ScalarTimeData& operator=(const ScalarTimeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarTimeData& operator=(ScalarTimeData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarTimeData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarTimeData* internal_default_instance() {
    return reinterpret_cast<const ScalarTimeData*>(
               &_ScalarTimeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(ScalarTimeData& a, ScalarTimeData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarTimeData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarTimeData* New() const final {
    return CreateMaybeMessage<ScalarTimeData>(nullptr);
  }

  ScalarTimeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarTimeData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarTimeData& from);
  void MergeFrom(const ScalarTimeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarTimeData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarTimeData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarTimeFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarTime = 1;
  bool has_scalartime() const;
  private:
  bool _internal_has_scalartime() const;
  public:
  void clear_scalartime();
  const ::pulse::cdm::bind::ScalarData& scalartime() const;
  ::pulse::cdm::bind::ScalarData* release_scalartime();
  ::pulse::cdm::bind::ScalarData* mutable_scalartime();
  void set_allocated_scalartime(::pulse::cdm::bind::ScalarData* scalartime);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalartime() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalartime();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarTimeData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalartime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarTemperatureData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarTemperatureData) */ {
 public:
  ScalarTemperatureData();
  virtual ~ScalarTemperatureData();

  ScalarTemperatureData(const ScalarTemperatureData& from);
  ScalarTemperatureData(ScalarTemperatureData&& from) noexcept
    : ScalarTemperatureData() {
    *this = ::std::move(from);
  }

  inline ScalarTemperatureData& operator=(const ScalarTemperatureData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarTemperatureData& operator=(ScalarTemperatureData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarTemperatureData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarTemperatureData* internal_default_instance() {
    return reinterpret_cast<const ScalarTemperatureData*>(
               &_ScalarTemperatureData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(ScalarTemperatureData& a, ScalarTemperatureData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarTemperatureData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarTemperatureData* New() const final {
    return CreateMaybeMessage<ScalarTemperatureData>(nullptr);
  }

  ScalarTemperatureData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarTemperatureData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarTemperatureData& from);
  void MergeFrom(const ScalarTemperatureData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarTemperatureData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarTemperatureData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarTemperatureFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarTemperature = 1;
  bool has_scalartemperature() const;
  private:
  bool _internal_has_scalartemperature() const;
  public:
  void clear_scalartemperature();
  const ::pulse::cdm::bind::ScalarData& scalartemperature() const;
  ::pulse::cdm::bind::ScalarData* release_scalartemperature();
  ::pulse::cdm::bind::ScalarData* mutable_scalartemperature();
  void set_allocated_scalartemperature(::pulse::cdm::bind::ScalarData* scalartemperature);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalartemperature() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalartemperature();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarTemperatureData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalartemperature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarVolumeData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarVolumeData) */ {
 public:
  ScalarVolumeData();
  virtual ~ScalarVolumeData();

  ScalarVolumeData(const ScalarVolumeData& from);
  ScalarVolumeData(ScalarVolumeData&& from) noexcept
    : ScalarVolumeData() {
    *this = ::std::move(from);
  }

  inline ScalarVolumeData& operator=(const ScalarVolumeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarVolumeData& operator=(ScalarVolumeData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarVolumeData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarVolumeData* internal_default_instance() {
    return reinterpret_cast<const ScalarVolumeData*>(
               &_ScalarVolumeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(ScalarVolumeData& a, ScalarVolumeData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarVolumeData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarVolumeData* New() const final {
    return CreateMaybeMessage<ScalarVolumeData>(nullptr);
  }

  ScalarVolumeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarVolumeData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarVolumeData& from);
  void MergeFrom(const ScalarVolumeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarVolumeData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarVolumeData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarVolumeFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarVolume = 1;
  bool has_scalarvolume() const;
  private:
  bool _internal_has_scalarvolume() const;
  public:
  void clear_scalarvolume();
  const ::pulse::cdm::bind::ScalarData& scalarvolume() const;
  ::pulse::cdm::bind::ScalarData* release_scalarvolume();
  ::pulse::cdm::bind::ScalarData* mutable_scalarvolume();
  void set_allocated_scalarvolume(::pulse::cdm::bind::ScalarData* scalarvolume);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarvolume() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarvolume();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarVolumeData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarvolume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarVolumePerTimeData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarVolumePerTimeData) */ {
 public:
  ScalarVolumePerTimeData();
  virtual ~ScalarVolumePerTimeData();

  ScalarVolumePerTimeData(const ScalarVolumePerTimeData& from);
  ScalarVolumePerTimeData(ScalarVolumePerTimeData&& from) noexcept
    : ScalarVolumePerTimeData() {
    *this = ::std::move(from);
  }

  inline ScalarVolumePerTimeData& operator=(const ScalarVolumePerTimeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarVolumePerTimeData& operator=(ScalarVolumePerTimeData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarVolumePerTimeData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarVolumePerTimeData* internal_default_instance() {
    return reinterpret_cast<const ScalarVolumePerTimeData*>(
               &_ScalarVolumePerTimeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(ScalarVolumePerTimeData& a, ScalarVolumePerTimeData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarVolumePerTimeData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarVolumePerTimeData* New() const final {
    return CreateMaybeMessage<ScalarVolumePerTimeData>(nullptr);
  }

  ScalarVolumePerTimeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarVolumePerTimeData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarVolumePerTimeData& from);
  void MergeFrom(const ScalarVolumePerTimeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarVolumePerTimeData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarVolumePerTimeData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarVolumePerTimeFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarVolumePerTime = 1;
  bool has_scalarvolumepertime() const;
  private:
  bool _internal_has_scalarvolumepertime() const;
  public:
  void clear_scalarvolumepertime();
  const ::pulse::cdm::bind::ScalarData& scalarvolumepertime() const;
  ::pulse::cdm::bind::ScalarData* release_scalarvolumepertime();
  ::pulse::cdm::bind::ScalarData* mutable_scalarvolumepertime();
  void set_allocated_scalarvolumepertime(::pulse::cdm::bind::ScalarData* scalarvolumepertime);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarvolumepertime() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarvolumepertime();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarVolumePerTimeData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarvolumepertime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarVolumePerPressureData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarVolumePerPressureData) */ {
 public:
  ScalarVolumePerPressureData();
  virtual ~ScalarVolumePerPressureData();

  ScalarVolumePerPressureData(const ScalarVolumePerPressureData& from);
  ScalarVolumePerPressureData(ScalarVolumePerPressureData&& from) noexcept
    : ScalarVolumePerPressureData() {
    *this = ::std::move(from);
  }

  inline ScalarVolumePerPressureData& operator=(const ScalarVolumePerPressureData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarVolumePerPressureData& operator=(ScalarVolumePerPressureData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarVolumePerPressureData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarVolumePerPressureData* internal_default_instance() {
    return reinterpret_cast<const ScalarVolumePerPressureData*>(
               &_ScalarVolumePerPressureData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(ScalarVolumePerPressureData& a, ScalarVolumePerPressureData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarVolumePerPressureData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarVolumePerPressureData* New() const final {
    return CreateMaybeMessage<ScalarVolumePerPressureData>(nullptr);
  }

  ScalarVolumePerPressureData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarVolumePerPressureData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarVolumePerPressureData& from);
  void MergeFrom(const ScalarVolumePerPressureData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarVolumePerPressureData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarVolumePerPressureData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarVolumePerPressureFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarVolumePerPressure = 1;
  bool has_scalarvolumeperpressure() const;
  private:
  bool _internal_has_scalarvolumeperpressure() const;
  public:
  void clear_scalarvolumeperpressure();
  const ::pulse::cdm::bind::ScalarData& scalarvolumeperpressure() const;
  ::pulse::cdm::bind::ScalarData* release_scalarvolumeperpressure();
  ::pulse::cdm::bind::ScalarData* mutable_scalarvolumeperpressure();
  void set_allocated_scalarvolumeperpressure(::pulse::cdm::bind::ScalarData* scalarvolumeperpressure);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarvolumeperpressure() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarvolumeperpressure();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarVolumePerPressureData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarvolumeperpressure_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarVolumePerTimeAreaData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarVolumePerTimeAreaData) */ {
 public:
  ScalarVolumePerTimeAreaData();
  virtual ~ScalarVolumePerTimeAreaData();

  ScalarVolumePerTimeAreaData(const ScalarVolumePerTimeAreaData& from);
  ScalarVolumePerTimeAreaData(ScalarVolumePerTimeAreaData&& from) noexcept
    : ScalarVolumePerTimeAreaData() {
    *this = ::std::move(from);
  }

  inline ScalarVolumePerTimeAreaData& operator=(const ScalarVolumePerTimeAreaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarVolumePerTimeAreaData& operator=(ScalarVolumePerTimeAreaData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarVolumePerTimeAreaData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarVolumePerTimeAreaData* internal_default_instance() {
    return reinterpret_cast<const ScalarVolumePerTimeAreaData*>(
               &_ScalarVolumePerTimeAreaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(ScalarVolumePerTimeAreaData& a, ScalarVolumePerTimeAreaData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarVolumePerTimeAreaData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarVolumePerTimeAreaData* New() const final {
    return CreateMaybeMessage<ScalarVolumePerTimeAreaData>(nullptr);
  }

  ScalarVolumePerTimeAreaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarVolumePerTimeAreaData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarVolumePerTimeAreaData& from);
  void MergeFrom(const ScalarVolumePerTimeAreaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarVolumePerTimeAreaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarVolumePerTimeAreaData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarVolumePerTimeAreaFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarVolumePerTimeArea = 1;
  bool has_scalarvolumepertimearea() const;
  private:
  bool _internal_has_scalarvolumepertimearea() const;
  public:
  void clear_scalarvolumepertimearea();
  const ::pulse::cdm::bind::ScalarData& scalarvolumepertimearea() const;
  ::pulse::cdm::bind::ScalarData* release_scalarvolumepertimearea();
  ::pulse::cdm::bind::ScalarData* mutable_scalarvolumepertimearea();
  void set_allocated_scalarvolumepertimearea(::pulse::cdm::bind::ScalarData* scalarvolumepertimearea);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarvolumepertimearea() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarvolumepertimearea();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarVolumePerTimeAreaData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarvolumepertimearea_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarVolumePerTimeMassData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarVolumePerTimeMassData) */ {
 public:
  ScalarVolumePerTimeMassData();
  virtual ~ScalarVolumePerTimeMassData();

  ScalarVolumePerTimeMassData(const ScalarVolumePerTimeMassData& from);
  ScalarVolumePerTimeMassData(ScalarVolumePerTimeMassData&& from) noexcept
    : ScalarVolumePerTimeMassData() {
    *this = ::std::move(from);
  }

  inline ScalarVolumePerTimeMassData& operator=(const ScalarVolumePerTimeMassData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarVolumePerTimeMassData& operator=(ScalarVolumePerTimeMassData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarVolumePerTimeMassData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarVolumePerTimeMassData* internal_default_instance() {
    return reinterpret_cast<const ScalarVolumePerTimeMassData*>(
               &_ScalarVolumePerTimeMassData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(ScalarVolumePerTimeMassData& a, ScalarVolumePerTimeMassData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarVolumePerTimeMassData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarVolumePerTimeMassData* New() const final {
    return CreateMaybeMessage<ScalarVolumePerTimeMassData>(nullptr);
  }

  ScalarVolumePerTimeMassData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarVolumePerTimeMassData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarVolumePerTimeMassData& from);
  void MergeFrom(const ScalarVolumePerTimeMassData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarVolumePerTimeMassData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarVolumePerTimeMassData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarVolumePerTimeMassFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarVolumePerTimeMass = 1;
  bool has_scalarvolumepertimemass() const;
  private:
  bool _internal_has_scalarvolumepertimemass() const;
  public:
  void clear_scalarvolumepertimemass();
  const ::pulse::cdm::bind::ScalarData& scalarvolumepertimemass() const;
  ::pulse::cdm::bind::ScalarData* release_scalarvolumepertimemass();
  ::pulse::cdm::bind::ScalarData* mutable_scalarvolumepertimemass();
  void set_allocated_scalarvolumepertimemass(::pulse::cdm::bind::ScalarData* scalarvolumepertimemass);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarvolumepertimemass() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarvolumepertimemass();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarVolumePerTimeMassData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarvolumepertimemass_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarVolumePerTimePressureData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarVolumePerTimePressureData) */ {
 public:
  ScalarVolumePerTimePressureData();
  virtual ~ScalarVolumePerTimePressureData();

  ScalarVolumePerTimePressureData(const ScalarVolumePerTimePressureData& from);
  ScalarVolumePerTimePressureData(ScalarVolumePerTimePressureData&& from) noexcept
    : ScalarVolumePerTimePressureData() {
    *this = ::std::move(from);
  }

  inline ScalarVolumePerTimePressureData& operator=(const ScalarVolumePerTimePressureData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarVolumePerTimePressureData& operator=(ScalarVolumePerTimePressureData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarVolumePerTimePressureData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarVolumePerTimePressureData* internal_default_instance() {
    return reinterpret_cast<const ScalarVolumePerTimePressureData*>(
               &_ScalarVolumePerTimePressureData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(ScalarVolumePerTimePressureData& a, ScalarVolumePerTimePressureData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarVolumePerTimePressureData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarVolumePerTimePressureData* New() const final {
    return CreateMaybeMessage<ScalarVolumePerTimePressureData>(nullptr);
  }

  ScalarVolumePerTimePressureData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarVolumePerTimePressureData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarVolumePerTimePressureData& from);
  void MergeFrom(const ScalarVolumePerTimePressureData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarVolumePerTimePressureData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarVolumePerTimePressureData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarVolumePerTimePressureFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarVolumePerTimePressure = 1;
  bool has_scalarvolumepertimepressure() const;
  private:
  bool _internal_has_scalarvolumepertimepressure() const;
  public:
  void clear_scalarvolumepertimepressure();
  const ::pulse::cdm::bind::ScalarData& scalarvolumepertimepressure() const;
  ::pulse::cdm::bind::ScalarData* release_scalarvolumepertimepressure();
  ::pulse::cdm::bind::ScalarData* mutable_scalarvolumepertimepressure();
  void set_allocated_scalarvolumepertimepressure(::pulse::cdm::bind::ScalarData* scalarvolumepertimepressure);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarvolumepertimepressure() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarvolumepertimepressure();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarVolumePerTimePressureData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarvolumepertimepressure_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ScalarVolumePerTimePressureAreaData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScalarVolumePerTimePressureAreaData) */ {
 public:
  ScalarVolumePerTimePressureAreaData();
  virtual ~ScalarVolumePerTimePressureAreaData();

  ScalarVolumePerTimePressureAreaData(const ScalarVolumePerTimePressureAreaData& from);
  ScalarVolumePerTimePressureAreaData(ScalarVolumePerTimePressureAreaData&& from) noexcept
    : ScalarVolumePerTimePressureAreaData() {
    *this = ::std::move(from);
  }

  inline ScalarVolumePerTimePressureAreaData& operator=(const ScalarVolumePerTimePressureAreaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarVolumePerTimePressureAreaData& operator=(ScalarVolumePerTimePressureAreaData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScalarVolumePerTimePressureAreaData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScalarVolumePerTimePressureAreaData* internal_default_instance() {
    return reinterpret_cast<const ScalarVolumePerTimePressureAreaData*>(
               &_ScalarVolumePerTimePressureAreaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(ScalarVolumePerTimePressureAreaData& a, ScalarVolumePerTimePressureAreaData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarVolumePerTimePressureAreaData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarVolumePerTimePressureAreaData* New() const final {
    return CreateMaybeMessage<ScalarVolumePerTimePressureAreaData>(nullptr);
  }

  ScalarVolumePerTimePressureAreaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarVolumePerTimePressureAreaData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarVolumePerTimePressureAreaData& from);
  void MergeFrom(const ScalarVolumePerTimePressureAreaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarVolumePerTimePressureAreaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScalarVolumePerTimePressureAreaData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarVolumePerTimePressureAreaFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarData ScalarVolumePerTimePressureArea = 1;
  bool has_scalarvolumepertimepressurearea() const;
  private:
  bool _internal_has_scalarvolumepertimepressurearea() const;
  public:
  void clear_scalarvolumepertimepressurearea();
  const ::pulse::cdm::bind::ScalarData& scalarvolumepertimepressurearea() const;
  ::pulse::cdm::bind::ScalarData* release_scalarvolumepertimepressurearea();
  ::pulse::cdm::bind::ScalarData* mutable_scalarvolumepertimepressurearea();
  void set_allocated_scalarvolumepertimepressurearea(::pulse::cdm::bind::ScalarData* scalarvolumepertimepressurearea);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_scalarvolumepertimepressurearea() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_scalarvolumepertimepressurearea();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScalarVolumePerTimePressureAreaData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ScalarData* scalarvolumepertimepressurearea_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class DoubleArrayData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.DoubleArrayData) */ {
 public:
  DoubleArrayData();
  virtual ~DoubleArrayData();

  DoubleArrayData(const DoubleArrayData& from);
  DoubleArrayData(DoubleArrayData&& from) noexcept
    : DoubleArrayData() {
    *this = ::std::move(from);
  }

  inline DoubleArrayData& operator=(const DoubleArrayData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoubleArrayData& operator=(DoubleArrayData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DoubleArrayData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoubleArrayData* internal_default_instance() {
    return reinterpret_cast<const DoubleArrayData*>(
               &_DoubleArrayData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(DoubleArrayData& a, DoubleArrayData& b) {
    a.Swap(&b);
  }
  inline void Swap(DoubleArrayData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DoubleArrayData* New() const final {
    return CreateMaybeMessage<DoubleArrayData>(nullptr);
  }

  DoubleArrayData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoubleArrayData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoubleArrayData& from);
  void MergeFrom(const DoubleArrayData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoubleArrayData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.DoubleArrayData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated double Value = 1 [packed = true];
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  double _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_value() const;
  void _internal_add_value(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_value();
  public:
  double value(int index) const;
  void set_value(int index, double value);
  void add_value(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.DoubleArrayData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > value_;
  mutable std::atomic<int> _value_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class IntegerArrayData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.IntegerArrayData) */ {
 public:
  IntegerArrayData();
  virtual ~IntegerArrayData();

  IntegerArrayData(const IntegerArrayData& from);
  IntegerArrayData(IntegerArrayData&& from) noexcept
    : IntegerArrayData() {
    *this = ::std::move(from);
  }

  inline IntegerArrayData& operator=(const IntegerArrayData& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntegerArrayData& operator=(IntegerArrayData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntegerArrayData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntegerArrayData* internal_default_instance() {
    return reinterpret_cast<const IntegerArrayData*>(
               &_IntegerArrayData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(IntegerArrayData& a, IntegerArrayData& b) {
    a.Swap(&b);
  }
  inline void Swap(IntegerArrayData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntegerArrayData* New() const final {
    return CreateMaybeMessage<IntegerArrayData>(nullptr);
  }

  IntegerArrayData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntegerArrayData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntegerArrayData& from);
  void MergeFrom(const IntegerArrayData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntegerArrayData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.IntegerArrayData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated int32 Value = 1 [packed = true];
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_value() const;
  void _internal_add_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_value();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 value(int index) const;
  void set_value(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.IntegerArrayData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > value_;
  mutable std::atomic<int> _value_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ArrayData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ArrayData) */ {
 public:
  ArrayData();
  virtual ~ArrayData();

  ArrayData(const ArrayData& from);
  ArrayData(ArrayData&& from) noexcept
    : ArrayData() {
    *this = ::std::move(from);
  }

  inline ArrayData& operator=(const ArrayData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArrayData& operator=(ArrayData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ArrayData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArrayData* internal_default_instance() {
    return reinterpret_cast<const ArrayData*>(
               &_ArrayData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(ArrayData& a, ArrayData& b) {
    a.Swap(&b);
  }
  inline void Swap(ArrayData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArrayData* New() const final {
    return CreateMaybeMessage<ArrayData>(nullptr);
  }

  ArrayData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArrayData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArrayData& from);
  void MergeFrom(const ArrayData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArrayData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ArrayData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnitFieldNumber = 2,
    kValueFieldNumber = 1,
  };
  // string Unit = 2;
  void clear_unit();
  const std::string& unit() const;
  void set_unit(const std::string& value);
  void set_unit(std::string&& value);
  void set_unit(const char* value);
  void set_unit(const char* value, size_t size);
  std::string* mutable_unit();
  std::string* release_unit();
  void set_allocated_unit(std::string* unit);
  private:
  const std::string& _internal_unit() const;
  void _internal_set_unit(const std::string& value);
  std::string* _internal_mutable_unit();
  public:

  // .pulse.cdm.bind.DoubleArrayData Value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::pulse::cdm::bind::DoubleArrayData& value() const;
  ::pulse::cdm::bind::DoubleArrayData* release_value();
  ::pulse::cdm::bind::DoubleArrayData* mutable_value();
  void set_allocated_value(::pulse::cdm::bind::DoubleArrayData* value);
  private:
  const ::pulse::cdm::bind::DoubleArrayData& _internal_value() const;
  ::pulse::cdm::bind::DoubleArrayData* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ArrayData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unit_;
  ::pulse::cdm::bind::DoubleArrayData* value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class ArrayTimeData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ArrayTimeData) */ {
 public:
  ArrayTimeData();
  virtual ~ArrayTimeData();

  ArrayTimeData(const ArrayTimeData& from);
  ArrayTimeData(ArrayTimeData&& from) noexcept
    : ArrayTimeData() {
    *this = ::std::move(from);
  }

  inline ArrayTimeData& operator=(const ArrayTimeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArrayTimeData& operator=(ArrayTimeData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ArrayTimeData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArrayTimeData* internal_default_instance() {
    return reinterpret_cast<const ArrayTimeData*>(
               &_ArrayTimeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(ArrayTimeData& a, ArrayTimeData& b) {
    a.Swap(&b);
  }
  inline void Swap(ArrayTimeData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArrayTimeData* New() const final {
    return CreateMaybeMessage<ArrayTimeData>(nullptr);
  }

  ArrayTimeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArrayTimeData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArrayTimeData& from);
  void MergeFrom(const ArrayTimeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArrayTimeData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ArrayTimeData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrayTimeFieldNumber = 1,
  };
  // .pulse.cdm.bind.ArrayData ArrayTime = 1;
  bool has_arraytime() const;
  private:
  bool _internal_has_arraytime() const;
  public:
  void clear_arraytime();
  const ::pulse::cdm::bind::ArrayData& arraytime() const;
  ::pulse::cdm::bind::ArrayData* release_arraytime();
  ::pulse::cdm::bind::ArrayData* mutable_arraytime();
  void set_allocated_arraytime(::pulse::cdm::bind::ArrayData* arraytime);
  private:
  const ::pulse::cdm::bind::ArrayData& _internal_arraytime() const;
  ::pulse::cdm::bind::ArrayData* _internal_mutable_arraytime();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ArrayTimeData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ArrayData* arraytime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class FunctionData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.FunctionData) */ {
 public:
  FunctionData();
  virtual ~FunctionData();

  FunctionData(const FunctionData& from);
  FunctionData(FunctionData&& from) noexcept
    : FunctionData() {
    *this = ::std::move(from);
  }

  inline FunctionData& operator=(const FunctionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionData& operator=(FunctionData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FunctionData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FunctionData* internal_default_instance() {
    return reinterpret_cast<const FunctionData*>(
               &_FunctionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(FunctionData& a, FunctionData& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FunctionData* New() const final {
    return CreateMaybeMessage<FunctionData>(nullptr);
  }

  FunctionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FunctionData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FunctionData& from);
  void MergeFrom(const FunctionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.FunctionData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDependentUnitFieldNumber = 3,
    kIndependentUnitFieldNumber = 4,
    kDependentFieldNumber = 1,
    kIndependentFieldNumber = 2,
  };
  // string DependentUnit = 3;
  void clear_dependentunit();
  const std::string& dependentunit() const;
  void set_dependentunit(const std::string& value);
  void set_dependentunit(std::string&& value);
  void set_dependentunit(const char* value);
  void set_dependentunit(const char* value, size_t size);
  std::string* mutable_dependentunit();
  std::string* release_dependentunit();
  void set_allocated_dependentunit(std::string* dependentunit);
  private:
  const std::string& _internal_dependentunit() const;
  void _internal_set_dependentunit(const std::string& value);
  std::string* _internal_mutable_dependentunit();
  public:

  // string IndependentUnit = 4;
  void clear_independentunit();
  const std::string& independentunit() const;
  void set_independentunit(const std::string& value);
  void set_independentunit(std::string&& value);
  void set_independentunit(const char* value);
  void set_independentunit(const char* value, size_t size);
  std::string* mutable_independentunit();
  std::string* release_independentunit();
  void set_allocated_independentunit(std::string* independentunit);
  private:
  const std::string& _internal_independentunit() const;
  void _internal_set_independentunit(const std::string& value);
  std::string* _internal_mutable_independentunit();
  public:

  // .pulse.cdm.bind.DoubleArrayData Dependent = 1;
  bool has_dependent() const;
  private:
  bool _internal_has_dependent() const;
  public:
  void clear_dependent();
  const ::pulse::cdm::bind::DoubleArrayData& dependent() const;
  ::pulse::cdm::bind::DoubleArrayData* release_dependent();
  ::pulse::cdm::bind::DoubleArrayData* mutable_dependent();
  void set_allocated_dependent(::pulse::cdm::bind::DoubleArrayData* dependent);
  private:
  const ::pulse::cdm::bind::DoubleArrayData& _internal_dependent() const;
  ::pulse::cdm::bind::DoubleArrayData* _internal_mutable_dependent();
  public:

  // .pulse.cdm.bind.DoubleArrayData Independent = 2;
  bool has_independent() const;
  private:
  bool _internal_has_independent() const;
  public:
  void clear_independent();
  const ::pulse::cdm::bind::DoubleArrayData& independent() const;
  ::pulse::cdm::bind::DoubleArrayData* release_independent();
  ::pulse::cdm::bind::DoubleArrayData* mutable_independent();
  void set_allocated_independent(::pulse::cdm::bind::DoubleArrayData* independent);
  private:
  const ::pulse::cdm::bind::DoubleArrayData& _internal_independent() const;
  ::pulse::cdm::bind::DoubleArrayData* _internal_mutable_independent();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.FunctionData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dependentunit_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr independentunit_;
  ::pulse::cdm::bind::DoubleArrayData* dependent_;
  ::pulse::cdm::bind::DoubleArrayData* independent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class FunctionVolumeVsTimeData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.FunctionVolumeVsTimeData) */ {
 public:
  FunctionVolumeVsTimeData();
  virtual ~FunctionVolumeVsTimeData();

  FunctionVolumeVsTimeData(const FunctionVolumeVsTimeData& from);
  FunctionVolumeVsTimeData(FunctionVolumeVsTimeData&& from) noexcept
    : FunctionVolumeVsTimeData() {
    *this = ::std::move(from);
  }

  inline FunctionVolumeVsTimeData& operator=(const FunctionVolumeVsTimeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionVolumeVsTimeData& operator=(FunctionVolumeVsTimeData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FunctionVolumeVsTimeData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FunctionVolumeVsTimeData* internal_default_instance() {
    return reinterpret_cast<const FunctionVolumeVsTimeData*>(
               &_FunctionVolumeVsTimeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(FunctionVolumeVsTimeData& a, FunctionVolumeVsTimeData& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionVolumeVsTimeData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FunctionVolumeVsTimeData* New() const final {
    return CreateMaybeMessage<FunctionVolumeVsTimeData>(nullptr);
  }

  FunctionVolumeVsTimeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FunctionVolumeVsTimeData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FunctionVolumeVsTimeData& from);
  void MergeFrom(const FunctionVolumeVsTimeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionVolumeVsTimeData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.FunctionVolumeVsTimeData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFunctionVolumeVsTimeFieldNumber = 1,
  };
  // .pulse.cdm.bind.FunctionData FunctionVolumeVsTime = 1;
  bool has_functionvolumevstime() const;
  private:
  bool _internal_has_functionvolumevstime() const;
  public:
  void clear_functionvolumevstime();
  const ::pulse::cdm::bind::FunctionData& functionvolumevstime() const;
  ::pulse::cdm::bind::FunctionData* release_functionvolumevstime();
  ::pulse::cdm::bind::FunctionData* mutable_functionvolumevstime();
  void set_allocated_functionvolumevstime(::pulse::cdm::bind::FunctionData* functionvolumevstime);
  private:
  const ::pulse::cdm::bind::FunctionData& _internal_functionvolumevstime() const;
  ::pulse::cdm::bind::FunctionData* _internal_mutable_functionvolumevstime();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.FunctionVolumeVsTimeData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::FunctionData* functionvolumevstime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class FunctionElectricPotentialVsTimeData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.FunctionElectricPotentialVsTimeData) */ {
 public:
  FunctionElectricPotentialVsTimeData();
  virtual ~FunctionElectricPotentialVsTimeData();

  FunctionElectricPotentialVsTimeData(const FunctionElectricPotentialVsTimeData& from);
  FunctionElectricPotentialVsTimeData(FunctionElectricPotentialVsTimeData&& from) noexcept
    : FunctionElectricPotentialVsTimeData() {
    *this = ::std::move(from);
  }

  inline FunctionElectricPotentialVsTimeData& operator=(const FunctionElectricPotentialVsTimeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionElectricPotentialVsTimeData& operator=(FunctionElectricPotentialVsTimeData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FunctionElectricPotentialVsTimeData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FunctionElectricPotentialVsTimeData* internal_default_instance() {
    return reinterpret_cast<const FunctionElectricPotentialVsTimeData*>(
               &_FunctionElectricPotentialVsTimeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(FunctionElectricPotentialVsTimeData& a, FunctionElectricPotentialVsTimeData& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionElectricPotentialVsTimeData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FunctionElectricPotentialVsTimeData* New() const final {
    return CreateMaybeMessage<FunctionElectricPotentialVsTimeData>(nullptr);
  }

  FunctionElectricPotentialVsTimeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FunctionElectricPotentialVsTimeData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FunctionElectricPotentialVsTimeData& from);
  void MergeFrom(const FunctionElectricPotentialVsTimeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionElectricPotentialVsTimeData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.FunctionElectricPotentialVsTimeData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFunctionElectricPotentialVsTimeFieldNumber = 1,
  };
  // .pulse.cdm.bind.FunctionData FunctionElectricPotentialVsTime = 1;
  bool has_functionelectricpotentialvstime() const;
  private:
  bool _internal_has_functionelectricpotentialvstime() const;
  public:
  void clear_functionelectricpotentialvstime();
  const ::pulse::cdm::bind::FunctionData& functionelectricpotentialvstime() const;
  ::pulse::cdm::bind::FunctionData* release_functionelectricpotentialvstime();
  ::pulse::cdm::bind::FunctionData* mutable_functionelectricpotentialvstime();
  void set_allocated_functionelectricpotentialvstime(::pulse::cdm::bind::FunctionData* functionelectricpotentialvstime);
  private:
  const ::pulse::cdm::bind::FunctionData& _internal_functionelectricpotentialvstime() const;
  ::pulse::cdm::bind::FunctionData* _internal_mutable_functionelectricpotentialvstime();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.FunctionElectricPotentialVsTimeData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::FunctionData* functionelectricpotentialvstime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class HistogramData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.HistogramData) */ {
 public:
  HistogramData();
  virtual ~HistogramData();

  HistogramData(const HistogramData& from);
  HistogramData(HistogramData&& from) noexcept
    : HistogramData() {
    *this = ::std::move(from);
  }

  inline HistogramData& operator=(const HistogramData& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistogramData& operator=(HistogramData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HistogramData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HistogramData* internal_default_instance() {
    return reinterpret_cast<const HistogramData*>(
               &_HistogramData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(HistogramData& a, HistogramData& b) {
    a.Swap(&b);
  }
  inline void Swap(HistogramData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HistogramData* New() const final {
    return CreateMaybeMessage<HistogramData>(nullptr);
  }

  HistogramData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HistogramData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HistogramData& from);
  void MergeFrom(const HistogramData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HistogramData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.HistogramData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHistogramFieldNumber = 1,
  };
  // .pulse.cdm.bind.FunctionData Histogram = 1;
  bool has_histogram() const;
  private:
  bool _internal_has_histogram() const;
  public:
  void clear_histogram();
  const ::pulse::cdm::bind::FunctionData& histogram() const;
  ::pulse::cdm::bind::FunctionData* release_histogram();
  ::pulse::cdm::bind::FunctionData* mutable_histogram();
  void set_allocated_histogram(::pulse::cdm::bind::FunctionData* histogram);
  private:
  const ::pulse::cdm::bind::FunctionData& _internal_histogram() const;
  ::pulse::cdm::bind::FunctionData* _internal_mutable_histogram();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.HistogramData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::FunctionData* histogram_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// -------------------------------------------------------------------

class HistogramFractionVsLengthData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.HistogramFractionVsLengthData) */ {
 public:
  HistogramFractionVsLengthData();
  virtual ~HistogramFractionVsLengthData();

  HistogramFractionVsLengthData(const HistogramFractionVsLengthData& from);
  HistogramFractionVsLengthData(HistogramFractionVsLengthData&& from) noexcept
    : HistogramFractionVsLengthData() {
    *this = ::std::move(from);
  }

  inline HistogramFractionVsLengthData& operator=(const HistogramFractionVsLengthData& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistogramFractionVsLengthData& operator=(HistogramFractionVsLengthData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HistogramFractionVsLengthData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HistogramFractionVsLengthData* internal_default_instance() {
    return reinterpret_cast<const HistogramFractionVsLengthData*>(
               &_HistogramFractionVsLengthData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(HistogramFractionVsLengthData& a, HistogramFractionVsLengthData& b) {
    a.Swap(&b);
  }
  inline void Swap(HistogramFractionVsLengthData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HistogramFractionVsLengthData* New() const final {
    return CreateMaybeMessage<HistogramFractionVsLengthData>(nullptr);
  }

  HistogramFractionVsLengthData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HistogramFractionVsLengthData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HistogramFractionVsLengthData& from);
  void MergeFrom(const HistogramFractionVsLengthData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HistogramFractionVsLengthData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.HistogramFractionVsLengthData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHistogramFractionVsLengthFieldNumber = 1,
  };
  // .pulse.cdm.bind.HistogramData HistogramFractionVsLength = 1;
  bool has_histogramfractionvslength() const;
  private:
  bool _internal_has_histogramfractionvslength() const;
  public:
  void clear_histogramfractionvslength();
  const ::pulse::cdm::bind::HistogramData& histogramfractionvslength() const;
  ::pulse::cdm::bind::HistogramData* release_histogramfractionvslength();
  ::pulse::cdm::bind::HistogramData* mutable_histogramfractionvslength();
  void set_allocated_histogramfractionvslength(::pulse::cdm::bind::HistogramData* histogramfractionvslength);
  private:
  const ::pulse::cdm::bind::HistogramData& _internal_histogramfractionvslength() const;
  ::pulse::cdm::bind::HistogramData* _internal_mutable_histogramfractionvslength();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.HistogramFractionVsLengthData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::HistogramData* histogramfractionvslength_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RunningAverageData

// double Sum = 1;
inline void RunningAverageData::clear_sum() {
  sum_ = 0;
}
inline double RunningAverageData::_internal_sum() const {
  return sum_;
}
inline double RunningAverageData::sum() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RunningAverageData.Sum)
  return _internal_sum();
}
inline void RunningAverageData::_internal_set_sum(double value) {
  
  sum_ = value;
}
inline void RunningAverageData::set_sum(double value) {
  _internal_set_sum(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.RunningAverageData.Sum)
}

// uint32 NumSamples = 2;
inline void RunningAverageData::clear_numsamples() {
  numsamples_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RunningAverageData::_internal_numsamples() const {
  return numsamples_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RunningAverageData::numsamples() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RunningAverageData.NumSamples)
  return _internal_numsamples();
}
inline void RunningAverageData::_internal_set_numsamples(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  numsamples_ = value;
}
inline void RunningAverageData::set_numsamples(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_numsamples(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.RunningAverageData.NumSamples)
}

// -------------------------------------------------------------------

// ScalarData

// double Value = 1;
inline void ScalarData::clear_value() {
  value_ = 0;
}
inline double ScalarData::_internal_value() const {
  return value_;
}
inline double ScalarData::value() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarData.Value)
  return _internal_value();
}
inline void ScalarData::_internal_set_value(double value) {
  
  value_ = value;
}
inline void ScalarData::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ScalarData.Value)
}

// string Unit = 2;
inline void ScalarData::clear_unit() {
  unit_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ScalarData::unit() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarData.Unit)
  return _internal_unit();
}
inline void ScalarData::set_unit(const std::string& value) {
  _internal_set_unit(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ScalarData.Unit)
}
inline std::string* ScalarData::mutable_unit() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarData.Unit)
  return _internal_mutable_unit();
}
inline const std::string& ScalarData::_internal_unit() const {
  return unit_.GetNoArena();
}
inline void ScalarData::_internal_set_unit(const std::string& value) {
  
  unit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ScalarData::set_unit(std::string&& value) {
  
  unit_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.ScalarData.Unit)
}
inline void ScalarData::set_unit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.ScalarData.Unit)
}
inline void ScalarData::set_unit(const char* value, size_t size) {
  
  unit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.ScalarData.Unit)
}
inline std::string* ScalarData::_internal_mutable_unit() {
  
  return unit_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ScalarData::release_unit() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarData.Unit)
  
  return unit_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ScalarData::set_allocated_unit(std::string* unit) {
  if (unit != nullptr) {
    
  } else {
    
  }
  unit_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unit);
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarData.Unit)
}

// bool ReadOnly = 3;
inline void ScalarData::clear_readonly() {
  readonly_ = false;
}
inline bool ScalarData::_internal_readonly() const {
  return readonly_;
}
inline bool ScalarData::readonly() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarData.ReadOnly)
  return _internal_readonly();
}
inline void ScalarData::_internal_set_readonly(bool value) {
  
  readonly_ = value;
}
inline void ScalarData::set_readonly(bool value) {
  _internal_set_readonly(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ScalarData.ReadOnly)
}

// -------------------------------------------------------------------

// Scalar0To1Data

// .pulse.cdm.bind.ScalarData Scalar0To1 = 1;
inline bool Scalar0To1Data::_internal_has_scalar0to1() const {
  return this != internal_default_instance() && scalar0to1_ != nullptr;
}
inline bool Scalar0To1Data::has_scalar0to1() const {
  return _internal_has_scalar0to1();
}
inline void Scalar0To1Data::clear_scalar0to1() {
  if (GetArenaNoVirtual() == nullptr && scalar0to1_ != nullptr) {
    delete scalar0to1_;
  }
  scalar0to1_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& Scalar0To1Data::_internal_scalar0to1() const {
  const ::pulse::cdm::bind::ScalarData* p = scalar0to1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& Scalar0To1Data::scalar0to1() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.Scalar0To1Data.Scalar0To1)
  return _internal_scalar0to1();
}
inline ::pulse::cdm::bind::ScalarData* Scalar0To1Data::release_scalar0to1() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.Scalar0To1Data.Scalar0To1)
  
  ::pulse::cdm::bind::ScalarData* temp = scalar0to1_;
  scalar0to1_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* Scalar0To1Data::_internal_mutable_scalar0to1() {
  
  if (scalar0to1_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalar0to1_ = p;
  }
  return scalar0to1_;
}
inline ::pulse::cdm::bind::ScalarData* Scalar0To1Data::mutable_scalar0to1() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.Scalar0To1Data.Scalar0To1)
  return _internal_mutable_scalar0to1();
}
inline void Scalar0To1Data::set_allocated_scalar0to1(::pulse::cdm::bind::ScalarData* scalar0to1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalar0to1_;
  }
  if (scalar0to1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalar0to1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalar0to1, submessage_arena);
    }
    
  } else {
    
  }
  scalar0to1_ = scalar0to1;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.Scalar0To1Data.Scalar0To1)
}

// -------------------------------------------------------------------

// ScalarNegative1To1Data

// .pulse.cdm.bind.ScalarData ScalarNegative1To1 = 1;
inline bool ScalarNegative1To1Data::_internal_has_scalarnegative1to1() const {
  return this != internal_default_instance() && scalarnegative1to1_ != nullptr;
}
inline bool ScalarNegative1To1Data::has_scalarnegative1to1() const {
  return _internal_has_scalarnegative1to1();
}
inline void ScalarNegative1To1Data::clear_scalarnegative1to1() {
  if (GetArenaNoVirtual() == nullptr && scalarnegative1to1_ != nullptr) {
    delete scalarnegative1to1_;
  }
  scalarnegative1to1_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarNegative1To1Data::_internal_scalarnegative1to1() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarnegative1to1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarNegative1To1Data::scalarnegative1to1() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarNegative1To1Data.ScalarNegative1To1)
  return _internal_scalarnegative1to1();
}
inline ::pulse::cdm::bind::ScalarData* ScalarNegative1To1Data::release_scalarnegative1to1() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarNegative1To1Data.ScalarNegative1To1)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarnegative1to1_;
  scalarnegative1to1_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarNegative1To1Data::_internal_mutable_scalarnegative1to1() {
  
  if (scalarnegative1to1_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarnegative1to1_ = p;
  }
  return scalarnegative1to1_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarNegative1To1Data::mutable_scalarnegative1to1() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarNegative1To1Data.ScalarNegative1To1)
  return _internal_mutable_scalarnegative1to1();
}
inline void ScalarNegative1To1Data::set_allocated_scalarnegative1to1(::pulse::cdm::bind::ScalarData* scalarnegative1to1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarnegative1to1_;
  }
  if (scalarnegative1to1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarnegative1to1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarnegative1to1, submessage_arena);
    }
    
  } else {
    
  }
  scalarnegative1to1_ = scalarnegative1to1;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarNegative1To1Data.ScalarNegative1To1)
}

// -------------------------------------------------------------------

// ScalarAmountData

// .pulse.cdm.bind.ScalarData ScalarAmount = 1;
inline bool ScalarAmountData::_internal_has_scalaramount() const {
  return this != internal_default_instance() && scalaramount_ != nullptr;
}
inline bool ScalarAmountData::has_scalaramount() const {
  return _internal_has_scalaramount();
}
inline void ScalarAmountData::clear_scalaramount() {
  if (GetArenaNoVirtual() == nullptr && scalaramount_ != nullptr) {
    delete scalaramount_;
  }
  scalaramount_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarAmountData::_internal_scalaramount() const {
  const ::pulse::cdm::bind::ScalarData* p = scalaramount_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarAmountData::scalaramount() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarAmountData.ScalarAmount)
  return _internal_scalaramount();
}
inline ::pulse::cdm::bind::ScalarData* ScalarAmountData::release_scalaramount() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarAmountData.ScalarAmount)
  
  ::pulse::cdm::bind::ScalarData* temp = scalaramount_;
  scalaramount_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarAmountData::_internal_mutable_scalaramount() {
  
  if (scalaramount_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalaramount_ = p;
  }
  return scalaramount_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarAmountData::mutable_scalaramount() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarAmountData.ScalarAmount)
  return _internal_mutable_scalaramount();
}
inline void ScalarAmountData::set_allocated_scalaramount(::pulse::cdm::bind::ScalarData* scalaramount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalaramount_;
  }
  if (scalaramount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalaramount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalaramount, submessage_arena);
    }
    
  } else {
    
  }
  scalaramount_ = scalaramount;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarAmountData.ScalarAmount)
}

// -------------------------------------------------------------------

// ScalarAmountPerMassData

// .pulse.cdm.bind.ScalarData ScalarAmountPerMass = 1;
inline bool ScalarAmountPerMassData::_internal_has_scalaramountpermass() const {
  return this != internal_default_instance() && scalaramountpermass_ != nullptr;
}
inline bool ScalarAmountPerMassData::has_scalaramountpermass() const {
  return _internal_has_scalaramountpermass();
}
inline void ScalarAmountPerMassData::clear_scalaramountpermass() {
  if (GetArenaNoVirtual() == nullptr && scalaramountpermass_ != nullptr) {
    delete scalaramountpermass_;
  }
  scalaramountpermass_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarAmountPerMassData::_internal_scalaramountpermass() const {
  const ::pulse::cdm::bind::ScalarData* p = scalaramountpermass_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarAmountPerMassData::scalaramountpermass() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarAmountPerMassData.ScalarAmountPerMass)
  return _internal_scalaramountpermass();
}
inline ::pulse::cdm::bind::ScalarData* ScalarAmountPerMassData::release_scalaramountpermass() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarAmountPerMassData.ScalarAmountPerMass)
  
  ::pulse::cdm::bind::ScalarData* temp = scalaramountpermass_;
  scalaramountpermass_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarAmountPerMassData::_internal_mutable_scalaramountpermass() {
  
  if (scalaramountpermass_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalaramountpermass_ = p;
  }
  return scalaramountpermass_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarAmountPerMassData::mutable_scalaramountpermass() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarAmountPerMassData.ScalarAmountPerMass)
  return _internal_mutable_scalaramountpermass();
}
inline void ScalarAmountPerMassData::set_allocated_scalaramountpermass(::pulse::cdm::bind::ScalarData* scalaramountpermass) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalaramountpermass_;
  }
  if (scalaramountpermass) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalaramountpermass = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalaramountpermass, submessage_arena);
    }
    
  } else {
    
  }
  scalaramountpermass_ = scalaramountpermass;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarAmountPerMassData.ScalarAmountPerMass)
}

// -------------------------------------------------------------------

// ScalarAmountPerTimeData

// .pulse.cdm.bind.ScalarData ScalarAmountPerTime = 1;
inline bool ScalarAmountPerTimeData::_internal_has_scalaramountpertime() const {
  return this != internal_default_instance() && scalaramountpertime_ != nullptr;
}
inline bool ScalarAmountPerTimeData::has_scalaramountpertime() const {
  return _internal_has_scalaramountpertime();
}
inline void ScalarAmountPerTimeData::clear_scalaramountpertime() {
  if (GetArenaNoVirtual() == nullptr && scalaramountpertime_ != nullptr) {
    delete scalaramountpertime_;
  }
  scalaramountpertime_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarAmountPerTimeData::_internal_scalaramountpertime() const {
  const ::pulse::cdm::bind::ScalarData* p = scalaramountpertime_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarAmountPerTimeData::scalaramountpertime() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarAmountPerTimeData.ScalarAmountPerTime)
  return _internal_scalaramountpertime();
}
inline ::pulse::cdm::bind::ScalarData* ScalarAmountPerTimeData::release_scalaramountpertime() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarAmountPerTimeData.ScalarAmountPerTime)
  
  ::pulse::cdm::bind::ScalarData* temp = scalaramountpertime_;
  scalaramountpertime_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarAmountPerTimeData::_internal_mutable_scalaramountpertime() {
  
  if (scalaramountpertime_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalaramountpertime_ = p;
  }
  return scalaramountpertime_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarAmountPerTimeData::mutable_scalaramountpertime() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarAmountPerTimeData.ScalarAmountPerTime)
  return _internal_mutable_scalaramountpertime();
}
inline void ScalarAmountPerTimeData::set_allocated_scalaramountpertime(::pulse::cdm::bind::ScalarData* scalaramountpertime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalaramountpertime_;
  }
  if (scalaramountpertime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalaramountpertime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalaramountpertime, submessage_arena);
    }
    
  } else {
    
  }
  scalaramountpertime_ = scalaramountpertime;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarAmountPerTimeData.ScalarAmountPerTime)
}

// -------------------------------------------------------------------

// ScalarAmountPerVolumeData

// .pulse.cdm.bind.ScalarData ScalarAmountPerVolume = 1;
inline bool ScalarAmountPerVolumeData::_internal_has_scalaramountpervolume() const {
  return this != internal_default_instance() && scalaramountpervolume_ != nullptr;
}
inline bool ScalarAmountPerVolumeData::has_scalaramountpervolume() const {
  return _internal_has_scalaramountpervolume();
}
inline void ScalarAmountPerVolumeData::clear_scalaramountpervolume() {
  if (GetArenaNoVirtual() == nullptr && scalaramountpervolume_ != nullptr) {
    delete scalaramountpervolume_;
  }
  scalaramountpervolume_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarAmountPerVolumeData::_internal_scalaramountpervolume() const {
  const ::pulse::cdm::bind::ScalarData* p = scalaramountpervolume_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarAmountPerVolumeData::scalaramountpervolume() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarAmountPerVolumeData.ScalarAmountPerVolume)
  return _internal_scalaramountpervolume();
}
inline ::pulse::cdm::bind::ScalarData* ScalarAmountPerVolumeData::release_scalaramountpervolume() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarAmountPerVolumeData.ScalarAmountPerVolume)
  
  ::pulse::cdm::bind::ScalarData* temp = scalaramountpervolume_;
  scalaramountpervolume_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarAmountPerVolumeData::_internal_mutable_scalaramountpervolume() {
  
  if (scalaramountpervolume_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalaramountpervolume_ = p;
  }
  return scalaramountpervolume_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarAmountPerVolumeData::mutable_scalaramountpervolume() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarAmountPerVolumeData.ScalarAmountPerVolume)
  return _internal_mutable_scalaramountpervolume();
}
inline void ScalarAmountPerVolumeData::set_allocated_scalaramountpervolume(::pulse::cdm::bind::ScalarData* scalaramountpervolume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalaramountpervolume_;
  }
  if (scalaramountpervolume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalaramountpervolume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalaramountpervolume, submessage_arena);
    }
    
  } else {
    
  }
  scalaramountpervolume_ = scalaramountpervolume;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarAmountPerVolumeData.ScalarAmountPerVolume)
}

// -------------------------------------------------------------------

// ScalarAreaData

// .pulse.cdm.bind.ScalarData ScalarArea = 1;
inline bool ScalarAreaData::_internal_has_scalararea() const {
  return this != internal_default_instance() && scalararea_ != nullptr;
}
inline bool ScalarAreaData::has_scalararea() const {
  return _internal_has_scalararea();
}
inline void ScalarAreaData::clear_scalararea() {
  if (GetArenaNoVirtual() == nullptr && scalararea_ != nullptr) {
    delete scalararea_;
  }
  scalararea_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarAreaData::_internal_scalararea() const {
  const ::pulse::cdm::bind::ScalarData* p = scalararea_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarAreaData::scalararea() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarAreaData.ScalarArea)
  return _internal_scalararea();
}
inline ::pulse::cdm::bind::ScalarData* ScalarAreaData::release_scalararea() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarAreaData.ScalarArea)
  
  ::pulse::cdm::bind::ScalarData* temp = scalararea_;
  scalararea_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarAreaData::_internal_mutable_scalararea() {
  
  if (scalararea_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalararea_ = p;
  }
  return scalararea_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarAreaData::mutable_scalararea() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarAreaData.ScalarArea)
  return _internal_mutable_scalararea();
}
inline void ScalarAreaData::set_allocated_scalararea(::pulse::cdm::bind::ScalarData* scalararea) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalararea_;
  }
  if (scalararea) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalararea = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalararea, submessage_arena);
    }
    
  } else {
    
  }
  scalararea_ = scalararea;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarAreaData.ScalarArea)
}

// -------------------------------------------------------------------

// ScalarAreaPerTimePressureData

// .pulse.cdm.bind.ScalarData ScalarAreaPerTimePressure = 1;
inline bool ScalarAreaPerTimePressureData::_internal_has_scalarareapertimepressure() const {
  return this != internal_default_instance() && scalarareapertimepressure_ != nullptr;
}
inline bool ScalarAreaPerTimePressureData::has_scalarareapertimepressure() const {
  return _internal_has_scalarareapertimepressure();
}
inline void ScalarAreaPerTimePressureData::clear_scalarareapertimepressure() {
  if (GetArenaNoVirtual() == nullptr && scalarareapertimepressure_ != nullptr) {
    delete scalarareapertimepressure_;
  }
  scalarareapertimepressure_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarAreaPerTimePressureData::_internal_scalarareapertimepressure() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarareapertimepressure_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarAreaPerTimePressureData::scalarareapertimepressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarAreaPerTimePressureData.ScalarAreaPerTimePressure)
  return _internal_scalarareapertimepressure();
}
inline ::pulse::cdm::bind::ScalarData* ScalarAreaPerTimePressureData::release_scalarareapertimepressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarAreaPerTimePressureData.ScalarAreaPerTimePressure)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarareapertimepressure_;
  scalarareapertimepressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarAreaPerTimePressureData::_internal_mutable_scalarareapertimepressure() {
  
  if (scalarareapertimepressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarareapertimepressure_ = p;
  }
  return scalarareapertimepressure_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarAreaPerTimePressureData::mutable_scalarareapertimepressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarAreaPerTimePressureData.ScalarAreaPerTimePressure)
  return _internal_mutable_scalarareapertimepressure();
}
inline void ScalarAreaPerTimePressureData::set_allocated_scalarareapertimepressure(::pulse::cdm::bind::ScalarData* scalarareapertimepressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarareapertimepressure_;
  }
  if (scalarareapertimepressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarareapertimepressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarareapertimepressure, submessage_arena);
    }
    
  } else {
    
  }
  scalarareapertimepressure_ = scalarareapertimepressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarAreaPerTimePressureData.ScalarAreaPerTimePressure)
}

// -------------------------------------------------------------------

// ScalarElectricCapacitanceData

// .pulse.cdm.bind.ScalarData ScalarElectricCapacitance = 1;
inline bool ScalarElectricCapacitanceData::_internal_has_scalarelectriccapacitance() const {
  return this != internal_default_instance() && scalarelectriccapacitance_ != nullptr;
}
inline bool ScalarElectricCapacitanceData::has_scalarelectriccapacitance() const {
  return _internal_has_scalarelectriccapacitance();
}
inline void ScalarElectricCapacitanceData::clear_scalarelectriccapacitance() {
  if (GetArenaNoVirtual() == nullptr && scalarelectriccapacitance_ != nullptr) {
    delete scalarelectriccapacitance_;
  }
  scalarelectriccapacitance_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarElectricCapacitanceData::_internal_scalarelectriccapacitance() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarelectriccapacitance_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarElectricCapacitanceData::scalarelectriccapacitance() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarElectricCapacitanceData.ScalarElectricCapacitance)
  return _internal_scalarelectriccapacitance();
}
inline ::pulse::cdm::bind::ScalarData* ScalarElectricCapacitanceData::release_scalarelectriccapacitance() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarElectricCapacitanceData.ScalarElectricCapacitance)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarelectriccapacitance_;
  scalarelectriccapacitance_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarElectricCapacitanceData::_internal_mutable_scalarelectriccapacitance() {
  
  if (scalarelectriccapacitance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarelectriccapacitance_ = p;
  }
  return scalarelectriccapacitance_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarElectricCapacitanceData::mutable_scalarelectriccapacitance() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarElectricCapacitanceData.ScalarElectricCapacitance)
  return _internal_mutable_scalarelectriccapacitance();
}
inline void ScalarElectricCapacitanceData::set_allocated_scalarelectriccapacitance(::pulse::cdm::bind::ScalarData* scalarelectriccapacitance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarelectriccapacitance_;
  }
  if (scalarelectriccapacitance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarelectriccapacitance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarelectriccapacitance, submessage_arena);
    }
    
  } else {
    
  }
  scalarelectriccapacitance_ = scalarelectriccapacitance;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarElectricCapacitanceData.ScalarElectricCapacitance)
}

// -------------------------------------------------------------------

// ScalarElectricChargeData

// .pulse.cdm.bind.ScalarData ScalarElectricCharge = 1;
inline bool ScalarElectricChargeData::_internal_has_scalarelectriccharge() const {
  return this != internal_default_instance() && scalarelectriccharge_ != nullptr;
}
inline bool ScalarElectricChargeData::has_scalarelectriccharge() const {
  return _internal_has_scalarelectriccharge();
}
inline void ScalarElectricChargeData::clear_scalarelectriccharge() {
  if (GetArenaNoVirtual() == nullptr && scalarelectriccharge_ != nullptr) {
    delete scalarelectriccharge_;
  }
  scalarelectriccharge_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarElectricChargeData::_internal_scalarelectriccharge() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarelectriccharge_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarElectricChargeData::scalarelectriccharge() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarElectricChargeData.ScalarElectricCharge)
  return _internal_scalarelectriccharge();
}
inline ::pulse::cdm::bind::ScalarData* ScalarElectricChargeData::release_scalarelectriccharge() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarElectricChargeData.ScalarElectricCharge)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarelectriccharge_;
  scalarelectriccharge_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarElectricChargeData::_internal_mutable_scalarelectriccharge() {
  
  if (scalarelectriccharge_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarelectriccharge_ = p;
  }
  return scalarelectriccharge_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarElectricChargeData::mutable_scalarelectriccharge() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarElectricChargeData.ScalarElectricCharge)
  return _internal_mutable_scalarelectriccharge();
}
inline void ScalarElectricChargeData::set_allocated_scalarelectriccharge(::pulse::cdm::bind::ScalarData* scalarelectriccharge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarelectriccharge_;
  }
  if (scalarelectriccharge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarelectriccharge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarelectriccharge, submessage_arena);
    }
    
  } else {
    
  }
  scalarelectriccharge_ = scalarelectriccharge;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarElectricChargeData.ScalarElectricCharge)
}

// -------------------------------------------------------------------

// ScalarElectricCurrentData

// .pulse.cdm.bind.ScalarData ScalarElectricCurrent = 1;
inline bool ScalarElectricCurrentData::_internal_has_scalarelectriccurrent() const {
  return this != internal_default_instance() && scalarelectriccurrent_ != nullptr;
}
inline bool ScalarElectricCurrentData::has_scalarelectriccurrent() const {
  return _internal_has_scalarelectriccurrent();
}
inline void ScalarElectricCurrentData::clear_scalarelectriccurrent() {
  if (GetArenaNoVirtual() == nullptr && scalarelectriccurrent_ != nullptr) {
    delete scalarelectriccurrent_;
  }
  scalarelectriccurrent_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarElectricCurrentData::_internal_scalarelectriccurrent() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarelectriccurrent_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarElectricCurrentData::scalarelectriccurrent() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarElectricCurrentData.ScalarElectricCurrent)
  return _internal_scalarelectriccurrent();
}
inline ::pulse::cdm::bind::ScalarData* ScalarElectricCurrentData::release_scalarelectriccurrent() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarElectricCurrentData.ScalarElectricCurrent)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarelectriccurrent_;
  scalarelectriccurrent_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarElectricCurrentData::_internal_mutable_scalarelectriccurrent() {
  
  if (scalarelectriccurrent_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarelectriccurrent_ = p;
  }
  return scalarelectriccurrent_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarElectricCurrentData::mutable_scalarelectriccurrent() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarElectricCurrentData.ScalarElectricCurrent)
  return _internal_mutable_scalarelectriccurrent();
}
inline void ScalarElectricCurrentData::set_allocated_scalarelectriccurrent(::pulse::cdm::bind::ScalarData* scalarelectriccurrent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarelectriccurrent_;
  }
  if (scalarelectriccurrent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarelectriccurrent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarelectriccurrent, submessage_arena);
    }
    
  } else {
    
  }
  scalarelectriccurrent_ = scalarelectriccurrent;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarElectricCurrentData.ScalarElectricCurrent)
}

// -------------------------------------------------------------------

// ScalarElectricPotentialData

// .pulse.cdm.bind.ScalarData ScalarElectricPotential = 1;
inline bool ScalarElectricPotentialData::_internal_has_scalarelectricpotential() const {
  return this != internal_default_instance() && scalarelectricpotential_ != nullptr;
}
inline bool ScalarElectricPotentialData::has_scalarelectricpotential() const {
  return _internal_has_scalarelectricpotential();
}
inline void ScalarElectricPotentialData::clear_scalarelectricpotential() {
  if (GetArenaNoVirtual() == nullptr && scalarelectricpotential_ != nullptr) {
    delete scalarelectricpotential_;
  }
  scalarelectricpotential_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarElectricPotentialData::_internal_scalarelectricpotential() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarelectricpotential_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarElectricPotentialData::scalarelectricpotential() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarElectricPotentialData.ScalarElectricPotential)
  return _internal_scalarelectricpotential();
}
inline ::pulse::cdm::bind::ScalarData* ScalarElectricPotentialData::release_scalarelectricpotential() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarElectricPotentialData.ScalarElectricPotential)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarelectricpotential_;
  scalarelectricpotential_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarElectricPotentialData::_internal_mutable_scalarelectricpotential() {
  
  if (scalarelectricpotential_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarelectricpotential_ = p;
  }
  return scalarelectricpotential_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarElectricPotentialData::mutable_scalarelectricpotential() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarElectricPotentialData.ScalarElectricPotential)
  return _internal_mutable_scalarelectricpotential();
}
inline void ScalarElectricPotentialData::set_allocated_scalarelectricpotential(::pulse::cdm::bind::ScalarData* scalarelectricpotential) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarelectricpotential_;
  }
  if (scalarelectricpotential) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarelectricpotential = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarelectricpotential, submessage_arena);
    }
    
  } else {
    
  }
  scalarelectricpotential_ = scalarelectricpotential;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarElectricPotentialData.ScalarElectricPotential)
}

// -------------------------------------------------------------------

// ScalarElectricInductanceData

// .pulse.cdm.bind.ScalarData ScalarElectricInductance = 1;
inline bool ScalarElectricInductanceData::_internal_has_scalarelectricinductance() const {
  return this != internal_default_instance() && scalarelectricinductance_ != nullptr;
}
inline bool ScalarElectricInductanceData::has_scalarelectricinductance() const {
  return _internal_has_scalarelectricinductance();
}
inline void ScalarElectricInductanceData::clear_scalarelectricinductance() {
  if (GetArenaNoVirtual() == nullptr && scalarelectricinductance_ != nullptr) {
    delete scalarelectricinductance_;
  }
  scalarelectricinductance_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarElectricInductanceData::_internal_scalarelectricinductance() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarelectricinductance_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarElectricInductanceData::scalarelectricinductance() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarElectricInductanceData.ScalarElectricInductance)
  return _internal_scalarelectricinductance();
}
inline ::pulse::cdm::bind::ScalarData* ScalarElectricInductanceData::release_scalarelectricinductance() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarElectricInductanceData.ScalarElectricInductance)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarelectricinductance_;
  scalarelectricinductance_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarElectricInductanceData::_internal_mutable_scalarelectricinductance() {
  
  if (scalarelectricinductance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarelectricinductance_ = p;
  }
  return scalarelectricinductance_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarElectricInductanceData::mutable_scalarelectricinductance() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarElectricInductanceData.ScalarElectricInductance)
  return _internal_mutable_scalarelectricinductance();
}
inline void ScalarElectricInductanceData::set_allocated_scalarelectricinductance(::pulse::cdm::bind::ScalarData* scalarelectricinductance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarelectricinductance_;
  }
  if (scalarelectricinductance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarelectricinductance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarelectricinductance, submessage_arena);
    }
    
  } else {
    
  }
  scalarelectricinductance_ = scalarelectricinductance;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarElectricInductanceData.ScalarElectricInductance)
}

// -------------------------------------------------------------------

// ScalarElectricResistanceData

// .pulse.cdm.bind.ScalarData ScalarElectricResistance = 1;
inline bool ScalarElectricResistanceData::_internal_has_scalarelectricresistance() const {
  return this != internal_default_instance() && scalarelectricresistance_ != nullptr;
}
inline bool ScalarElectricResistanceData::has_scalarelectricresistance() const {
  return _internal_has_scalarelectricresistance();
}
inline void ScalarElectricResistanceData::clear_scalarelectricresistance() {
  if (GetArenaNoVirtual() == nullptr && scalarelectricresistance_ != nullptr) {
    delete scalarelectricresistance_;
  }
  scalarelectricresistance_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarElectricResistanceData::_internal_scalarelectricresistance() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarelectricresistance_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarElectricResistanceData::scalarelectricresistance() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarElectricResistanceData.ScalarElectricResistance)
  return _internal_scalarelectricresistance();
}
inline ::pulse::cdm::bind::ScalarData* ScalarElectricResistanceData::release_scalarelectricresistance() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarElectricResistanceData.ScalarElectricResistance)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarelectricresistance_;
  scalarelectricresistance_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarElectricResistanceData::_internal_mutable_scalarelectricresistance() {
  
  if (scalarelectricresistance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarelectricresistance_ = p;
  }
  return scalarelectricresistance_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarElectricResistanceData::mutable_scalarelectricresistance() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarElectricResistanceData.ScalarElectricResistance)
  return _internal_mutable_scalarelectricresistance();
}
inline void ScalarElectricResistanceData::set_allocated_scalarelectricresistance(::pulse::cdm::bind::ScalarData* scalarelectricresistance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarelectricresistance_;
  }
  if (scalarelectricresistance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarelectricresistance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarelectricresistance, submessage_arena);
    }
    
  } else {
    
  }
  scalarelectricresistance_ = scalarelectricresistance;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarElectricResistanceData.ScalarElectricResistance)
}

// -------------------------------------------------------------------

// ScalarEnergyData

// .pulse.cdm.bind.ScalarData ScalarEnergy = 1;
inline bool ScalarEnergyData::_internal_has_scalarenergy() const {
  return this != internal_default_instance() && scalarenergy_ != nullptr;
}
inline bool ScalarEnergyData::has_scalarenergy() const {
  return _internal_has_scalarenergy();
}
inline void ScalarEnergyData::clear_scalarenergy() {
  if (GetArenaNoVirtual() == nullptr && scalarenergy_ != nullptr) {
    delete scalarenergy_;
  }
  scalarenergy_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarEnergyData::_internal_scalarenergy() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarenergy_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarEnergyData::scalarenergy() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarEnergyData.ScalarEnergy)
  return _internal_scalarenergy();
}
inline ::pulse::cdm::bind::ScalarData* ScalarEnergyData::release_scalarenergy() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarEnergyData.ScalarEnergy)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarenergy_;
  scalarenergy_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarEnergyData::_internal_mutable_scalarenergy() {
  
  if (scalarenergy_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarenergy_ = p;
  }
  return scalarenergy_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarEnergyData::mutable_scalarenergy() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarEnergyData.ScalarEnergy)
  return _internal_mutable_scalarenergy();
}
inline void ScalarEnergyData::set_allocated_scalarenergy(::pulse::cdm::bind::ScalarData* scalarenergy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarenergy_;
  }
  if (scalarenergy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarenergy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarenergy, submessage_arena);
    }
    
  } else {
    
  }
  scalarenergy_ = scalarenergy;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarEnergyData.ScalarEnergy)
}

// -------------------------------------------------------------------

// ScalarEnergyPerAmountData

// .pulse.cdm.bind.ScalarData ScalarEnergyPerAmount = 1;
inline bool ScalarEnergyPerAmountData::_internal_has_scalarenergyperamount() const {
  return this != internal_default_instance() && scalarenergyperamount_ != nullptr;
}
inline bool ScalarEnergyPerAmountData::has_scalarenergyperamount() const {
  return _internal_has_scalarenergyperamount();
}
inline void ScalarEnergyPerAmountData::clear_scalarenergyperamount() {
  if (GetArenaNoVirtual() == nullptr && scalarenergyperamount_ != nullptr) {
    delete scalarenergyperamount_;
  }
  scalarenergyperamount_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarEnergyPerAmountData::_internal_scalarenergyperamount() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarenergyperamount_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarEnergyPerAmountData::scalarenergyperamount() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarEnergyPerAmountData.ScalarEnergyPerAmount)
  return _internal_scalarenergyperamount();
}
inline ::pulse::cdm::bind::ScalarData* ScalarEnergyPerAmountData::release_scalarenergyperamount() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarEnergyPerAmountData.ScalarEnergyPerAmount)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarenergyperamount_;
  scalarenergyperamount_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarEnergyPerAmountData::_internal_mutable_scalarenergyperamount() {
  
  if (scalarenergyperamount_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarenergyperamount_ = p;
  }
  return scalarenergyperamount_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarEnergyPerAmountData::mutable_scalarenergyperamount() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarEnergyPerAmountData.ScalarEnergyPerAmount)
  return _internal_mutable_scalarenergyperamount();
}
inline void ScalarEnergyPerAmountData::set_allocated_scalarenergyperamount(::pulse::cdm::bind::ScalarData* scalarenergyperamount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarenergyperamount_;
  }
  if (scalarenergyperamount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarenergyperamount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarenergyperamount, submessage_arena);
    }
    
  } else {
    
  }
  scalarenergyperamount_ = scalarenergyperamount;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarEnergyPerAmountData.ScalarEnergyPerAmount)
}

// -------------------------------------------------------------------

// ScalarEnergyPerMassData

// .pulse.cdm.bind.ScalarData ScalarEnergyPerMass = 1;
inline bool ScalarEnergyPerMassData::_internal_has_scalarenergypermass() const {
  return this != internal_default_instance() && scalarenergypermass_ != nullptr;
}
inline bool ScalarEnergyPerMassData::has_scalarenergypermass() const {
  return _internal_has_scalarenergypermass();
}
inline void ScalarEnergyPerMassData::clear_scalarenergypermass() {
  if (GetArenaNoVirtual() == nullptr && scalarenergypermass_ != nullptr) {
    delete scalarenergypermass_;
  }
  scalarenergypermass_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarEnergyPerMassData::_internal_scalarenergypermass() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarenergypermass_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarEnergyPerMassData::scalarenergypermass() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarEnergyPerMassData.ScalarEnergyPerMass)
  return _internal_scalarenergypermass();
}
inline ::pulse::cdm::bind::ScalarData* ScalarEnergyPerMassData::release_scalarenergypermass() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarEnergyPerMassData.ScalarEnergyPerMass)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarenergypermass_;
  scalarenergypermass_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarEnergyPerMassData::_internal_mutable_scalarenergypermass() {
  
  if (scalarenergypermass_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarenergypermass_ = p;
  }
  return scalarenergypermass_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarEnergyPerMassData::mutable_scalarenergypermass() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarEnergyPerMassData.ScalarEnergyPerMass)
  return _internal_mutable_scalarenergypermass();
}
inline void ScalarEnergyPerMassData::set_allocated_scalarenergypermass(::pulse::cdm::bind::ScalarData* scalarenergypermass) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarenergypermass_;
  }
  if (scalarenergypermass) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarenergypermass = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarenergypermass, submessage_arena);
    }
    
  } else {
    
  }
  scalarenergypermass_ = scalarenergypermass;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarEnergyPerMassData.ScalarEnergyPerMass)
}

// -------------------------------------------------------------------

// ScalarForceData

// .pulse.cdm.bind.ScalarData ScalarForce = 1;
inline bool ScalarForceData::_internal_has_scalarforce() const {
  return this != internal_default_instance() && scalarforce_ != nullptr;
}
inline bool ScalarForceData::has_scalarforce() const {
  return _internal_has_scalarforce();
}
inline void ScalarForceData::clear_scalarforce() {
  if (GetArenaNoVirtual() == nullptr && scalarforce_ != nullptr) {
    delete scalarforce_;
  }
  scalarforce_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarForceData::_internal_scalarforce() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarforce_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarForceData::scalarforce() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarForceData.ScalarForce)
  return _internal_scalarforce();
}
inline ::pulse::cdm::bind::ScalarData* ScalarForceData::release_scalarforce() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarForceData.ScalarForce)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarforce_;
  scalarforce_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarForceData::_internal_mutable_scalarforce() {
  
  if (scalarforce_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarforce_ = p;
  }
  return scalarforce_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarForceData::mutable_scalarforce() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarForceData.ScalarForce)
  return _internal_mutable_scalarforce();
}
inline void ScalarForceData::set_allocated_scalarforce(::pulse::cdm::bind::ScalarData* scalarforce) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarforce_;
  }
  if (scalarforce) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarforce = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarforce, submessage_arena);
    }
    
  } else {
    
  }
  scalarforce_ = scalarforce;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarForceData.ScalarForce)
}

// -------------------------------------------------------------------

// ScalarFrequencyData

// .pulse.cdm.bind.ScalarData ScalarFrequency = 1;
inline bool ScalarFrequencyData::_internal_has_scalarfrequency() const {
  return this != internal_default_instance() && scalarfrequency_ != nullptr;
}
inline bool ScalarFrequencyData::has_scalarfrequency() const {
  return _internal_has_scalarfrequency();
}
inline void ScalarFrequencyData::clear_scalarfrequency() {
  if (GetArenaNoVirtual() == nullptr && scalarfrequency_ != nullptr) {
    delete scalarfrequency_;
  }
  scalarfrequency_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarFrequencyData::_internal_scalarfrequency() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarfrequency_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarFrequencyData::scalarfrequency() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarFrequencyData.ScalarFrequency)
  return _internal_scalarfrequency();
}
inline ::pulse::cdm::bind::ScalarData* ScalarFrequencyData::release_scalarfrequency() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarFrequencyData.ScalarFrequency)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarfrequency_;
  scalarfrequency_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarFrequencyData::_internal_mutable_scalarfrequency() {
  
  if (scalarfrequency_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarfrequency_ = p;
  }
  return scalarfrequency_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarFrequencyData::mutable_scalarfrequency() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarFrequencyData.ScalarFrequency)
  return _internal_mutable_scalarfrequency();
}
inline void ScalarFrequencyData::set_allocated_scalarfrequency(::pulse::cdm::bind::ScalarData* scalarfrequency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarfrequency_;
  }
  if (scalarfrequency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarfrequency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarfrequency, submessage_arena);
    }
    
  } else {
    
  }
  scalarfrequency_ = scalarfrequency;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarFrequencyData.ScalarFrequency)
}

// -------------------------------------------------------------------

// ScalarHeatCapacitanceData

// .pulse.cdm.bind.ScalarData ScalarHeatCapacitance = 1;
inline bool ScalarHeatCapacitanceData::_internal_has_scalarheatcapacitance() const {
  return this != internal_default_instance() && scalarheatcapacitance_ != nullptr;
}
inline bool ScalarHeatCapacitanceData::has_scalarheatcapacitance() const {
  return _internal_has_scalarheatcapacitance();
}
inline void ScalarHeatCapacitanceData::clear_scalarheatcapacitance() {
  if (GetArenaNoVirtual() == nullptr && scalarheatcapacitance_ != nullptr) {
    delete scalarheatcapacitance_;
  }
  scalarheatcapacitance_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarHeatCapacitanceData::_internal_scalarheatcapacitance() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarheatcapacitance_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarHeatCapacitanceData::scalarheatcapacitance() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarHeatCapacitanceData.ScalarHeatCapacitance)
  return _internal_scalarheatcapacitance();
}
inline ::pulse::cdm::bind::ScalarData* ScalarHeatCapacitanceData::release_scalarheatcapacitance() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarHeatCapacitanceData.ScalarHeatCapacitance)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarheatcapacitance_;
  scalarheatcapacitance_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarHeatCapacitanceData::_internal_mutable_scalarheatcapacitance() {
  
  if (scalarheatcapacitance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarheatcapacitance_ = p;
  }
  return scalarheatcapacitance_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarHeatCapacitanceData::mutable_scalarheatcapacitance() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarHeatCapacitanceData.ScalarHeatCapacitance)
  return _internal_mutable_scalarheatcapacitance();
}
inline void ScalarHeatCapacitanceData::set_allocated_scalarheatcapacitance(::pulse::cdm::bind::ScalarData* scalarheatcapacitance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarheatcapacitance_;
  }
  if (scalarheatcapacitance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarheatcapacitance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarheatcapacitance, submessage_arena);
    }
    
  } else {
    
  }
  scalarheatcapacitance_ = scalarheatcapacitance;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarHeatCapacitanceData.ScalarHeatCapacitance)
}

// -------------------------------------------------------------------

// ScalarHeatCapacitancePerAmountData

// .pulse.cdm.bind.ScalarData ScalarHeatCapacitancePerAmount = 1;
inline bool ScalarHeatCapacitancePerAmountData::_internal_has_scalarheatcapacitanceperamount() const {
  return this != internal_default_instance() && scalarheatcapacitanceperamount_ != nullptr;
}
inline bool ScalarHeatCapacitancePerAmountData::has_scalarheatcapacitanceperamount() const {
  return _internal_has_scalarheatcapacitanceperamount();
}
inline void ScalarHeatCapacitancePerAmountData::clear_scalarheatcapacitanceperamount() {
  if (GetArenaNoVirtual() == nullptr && scalarheatcapacitanceperamount_ != nullptr) {
    delete scalarheatcapacitanceperamount_;
  }
  scalarheatcapacitanceperamount_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarHeatCapacitancePerAmountData::_internal_scalarheatcapacitanceperamount() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarheatcapacitanceperamount_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarHeatCapacitancePerAmountData::scalarheatcapacitanceperamount() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarHeatCapacitancePerAmountData.ScalarHeatCapacitancePerAmount)
  return _internal_scalarheatcapacitanceperamount();
}
inline ::pulse::cdm::bind::ScalarData* ScalarHeatCapacitancePerAmountData::release_scalarheatcapacitanceperamount() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarHeatCapacitancePerAmountData.ScalarHeatCapacitancePerAmount)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarheatcapacitanceperamount_;
  scalarheatcapacitanceperamount_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarHeatCapacitancePerAmountData::_internal_mutable_scalarheatcapacitanceperamount() {
  
  if (scalarheatcapacitanceperamount_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarheatcapacitanceperamount_ = p;
  }
  return scalarheatcapacitanceperamount_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarHeatCapacitancePerAmountData::mutable_scalarheatcapacitanceperamount() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarHeatCapacitancePerAmountData.ScalarHeatCapacitancePerAmount)
  return _internal_mutable_scalarheatcapacitanceperamount();
}
inline void ScalarHeatCapacitancePerAmountData::set_allocated_scalarheatcapacitanceperamount(::pulse::cdm::bind::ScalarData* scalarheatcapacitanceperamount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarheatcapacitanceperamount_;
  }
  if (scalarheatcapacitanceperamount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarheatcapacitanceperamount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarheatcapacitanceperamount, submessage_arena);
    }
    
  } else {
    
  }
  scalarheatcapacitanceperamount_ = scalarheatcapacitanceperamount;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarHeatCapacitancePerAmountData.ScalarHeatCapacitancePerAmount)
}

// -------------------------------------------------------------------

// ScalarHeatCapacitancePerMassData

// .pulse.cdm.bind.ScalarData ScalarHeatCapacitancePerMass = 1;
inline bool ScalarHeatCapacitancePerMassData::_internal_has_scalarheatcapacitancepermass() const {
  return this != internal_default_instance() && scalarheatcapacitancepermass_ != nullptr;
}
inline bool ScalarHeatCapacitancePerMassData::has_scalarheatcapacitancepermass() const {
  return _internal_has_scalarheatcapacitancepermass();
}
inline void ScalarHeatCapacitancePerMassData::clear_scalarheatcapacitancepermass() {
  if (GetArenaNoVirtual() == nullptr && scalarheatcapacitancepermass_ != nullptr) {
    delete scalarheatcapacitancepermass_;
  }
  scalarheatcapacitancepermass_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarHeatCapacitancePerMassData::_internal_scalarheatcapacitancepermass() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarheatcapacitancepermass_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarHeatCapacitancePerMassData::scalarheatcapacitancepermass() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarHeatCapacitancePerMassData.ScalarHeatCapacitancePerMass)
  return _internal_scalarheatcapacitancepermass();
}
inline ::pulse::cdm::bind::ScalarData* ScalarHeatCapacitancePerMassData::release_scalarheatcapacitancepermass() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarHeatCapacitancePerMassData.ScalarHeatCapacitancePerMass)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarheatcapacitancepermass_;
  scalarheatcapacitancepermass_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarHeatCapacitancePerMassData::_internal_mutable_scalarheatcapacitancepermass() {
  
  if (scalarheatcapacitancepermass_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarheatcapacitancepermass_ = p;
  }
  return scalarheatcapacitancepermass_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarHeatCapacitancePerMassData::mutable_scalarheatcapacitancepermass() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarHeatCapacitancePerMassData.ScalarHeatCapacitancePerMass)
  return _internal_mutable_scalarheatcapacitancepermass();
}
inline void ScalarHeatCapacitancePerMassData::set_allocated_scalarheatcapacitancepermass(::pulse::cdm::bind::ScalarData* scalarheatcapacitancepermass) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarheatcapacitancepermass_;
  }
  if (scalarheatcapacitancepermass) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarheatcapacitancepermass = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarheatcapacitancepermass, submessage_arena);
    }
    
  } else {
    
  }
  scalarheatcapacitancepermass_ = scalarheatcapacitancepermass;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarHeatCapacitancePerMassData.ScalarHeatCapacitancePerMass)
}

// -------------------------------------------------------------------

// ScalarHeatConductanceData

// .pulse.cdm.bind.ScalarData ScalarHeatConductance = 1;
inline bool ScalarHeatConductanceData::_internal_has_scalarheatconductance() const {
  return this != internal_default_instance() && scalarheatconductance_ != nullptr;
}
inline bool ScalarHeatConductanceData::has_scalarheatconductance() const {
  return _internal_has_scalarheatconductance();
}
inline void ScalarHeatConductanceData::clear_scalarheatconductance() {
  if (GetArenaNoVirtual() == nullptr && scalarheatconductance_ != nullptr) {
    delete scalarheatconductance_;
  }
  scalarheatconductance_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarHeatConductanceData::_internal_scalarheatconductance() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarheatconductance_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarHeatConductanceData::scalarheatconductance() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarHeatConductanceData.ScalarHeatConductance)
  return _internal_scalarheatconductance();
}
inline ::pulse::cdm::bind::ScalarData* ScalarHeatConductanceData::release_scalarheatconductance() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarHeatConductanceData.ScalarHeatConductance)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarheatconductance_;
  scalarheatconductance_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarHeatConductanceData::_internal_mutable_scalarheatconductance() {
  
  if (scalarheatconductance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarheatconductance_ = p;
  }
  return scalarheatconductance_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarHeatConductanceData::mutable_scalarheatconductance() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarHeatConductanceData.ScalarHeatConductance)
  return _internal_mutable_scalarheatconductance();
}
inline void ScalarHeatConductanceData::set_allocated_scalarheatconductance(::pulse::cdm::bind::ScalarData* scalarheatconductance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarheatconductance_;
  }
  if (scalarheatconductance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarheatconductance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarheatconductance, submessage_arena);
    }
    
  } else {
    
  }
  scalarheatconductance_ = scalarheatconductance;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarHeatConductanceData.ScalarHeatConductance)
}

// -------------------------------------------------------------------

// ScalarHeatConductancePerAreaData

// .pulse.cdm.bind.ScalarData ScalarHeatConductancePerArea = 1;
inline bool ScalarHeatConductancePerAreaData::_internal_has_scalarheatconductanceperarea() const {
  return this != internal_default_instance() && scalarheatconductanceperarea_ != nullptr;
}
inline bool ScalarHeatConductancePerAreaData::has_scalarheatconductanceperarea() const {
  return _internal_has_scalarheatconductanceperarea();
}
inline void ScalarHeatConductancePerAreaData::clear_scalarheatconductanceperarea() {
  if (GetArenaNoVirtual() == nullptr && scalarheatconductanceperarea_ != nullptr) {
    delete scalarheatconductanceperarea_;
  }
  scalarheatconductanceperarea_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarHeatConductancePerAreaData::_internal_scalarheatconductanceperarea() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarheatconductanceperarea_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarHeatConductancePerAreaData::scalarheatconductanceperarea() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarHeatConductancePerAreaData.ScalarHeatConductancePerArea)
  return _internal_scalarheatconductanceperarea();
}
inline ::pulse::cdm::bind::ScalarData* ScalarHeatConductancePerAreaData::release_scalarheatconductanceperarea() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarHeatConductancePerAreaData.ScalarHeatConductancePerArea)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarheatconductanceperarea_;
  scalarheatconductanceperarea_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarHeatConductancePerAreaData::_internal_mutable_scalarheatconductanceperarea() {
  
  if (scalarheatconductanceperarea_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarheatconductanceperarea_ = p;
  }
  return scalarheatconductanceperarea_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarHeatConductancePerAreaData::mutable_scalarheatconductanceperarea() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarHeatConductancePerAreaData.ScalarHeatConductancePerArea)
  return _internal_mutable_scalarheatconductanceperarea();
}
inline void ScalarHeatConductancePerAreaData::set_allocated_scalarheatconductanceperarea(::pulse::cdm::bind::ScalarData* scalarheatconductanceperarea) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarheatconductanceperarea_;
  }
  if (scalarheatconductanceperarea) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarheatconductanceperarea = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarheatconductanceperarea, submessage_arena);
    }
    
  } else {
    
  }
  scalarheatconductanceperarea_ = scalarheatconductanceperarea;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarHeatConductancePerAreaData.ScalarHeatConductancePerArea)
}

// -------------------------------------------------------------------

// ScalarHeatInductanceData

// .pulse.cdm.bind.ScalarData ScalarHeatInductance = 1;
inline bool ScalarHeatInductanceData::_internal_has_scalarheatinductance() const {
  return this != internal_default_instance() && scalarheatinductance_ != nullptr;
}
inline bool ScalarHeatInductanceData::has_scalarheatinductance() const {
  return _internal_has_scalarheatinductance();
}
inline void ScalarHeatInductanceData::clear_scalarheatinductance() {
  if (GetArenaNoVirtual() == nullptr && scalarheatinductance_ != nullptr) {
    delete scalarheatinductance_;
  }
  scalarheatinductance_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarHeatInductanceData::_internal_scalarheatinductance() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarheatinductance_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarHeatInductanceData::scalarheatinductance() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarHeatInductanceData.ScalarHeatInductance)
  return _internal_scalarheatinductance();
}
inline ::pulse::cdm::bind::ScalarData* ScalarHeatInductanceData::release_scalarheatinductance() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarHeatInductanceData.ScalarHeatInductance)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarheatinductance_;
  scalarheatinductance_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarHeatInductanceData::_internal_mutable_scalarheatinductance() {
  
  if (scalarheatinductance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarheatinductance_ = p;
  }
  return scalarheatinductance_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarHeatInductanceData::mutable_scalarheatinductance() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarHeatInductanceData.ScalarHeatInductance)
  return _internal_mutable_scalarheatinductance();
}
inline void ScalarHeatInductanceData::set_allocated_scalarheatinductance(::pulse::cdm::bind::ScalarData* scalarheatinductance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarheatinductance_;
  }
  if (scalarheatinductance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarheatinductance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarheatinductance, submessage_arena);
    }
    
  } else {
    
  }
  scalarheatinductance_ = scalarheatinductance;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarHeatInductanceData.ScalarHeatInductance)
}

// -------------------------------------------------------------------

// ScalarHeatResistanceData

// .pulse.cdm.bind.ScalarData ScalarHeatResistance = 1;
inline bool ScalarHeatResistanceData::_internal_has_scalarheatresistance() const {
  return this != internal_default_instance() && scalarheatresistance_ != nullptr;
}
inline bool ScalarHeatResistanceData::has_scalarheatresistance() const {
  return _internal_has_scalarheatresistance();
}
inline void ScalarHeatResistanceData::clear_scalarheatresistance() {
  if (GetArenaNoVirtual() == nullptr && scalarheatresistance_ != nullptr) {
    delete scalarheatresistance_;
  }
  scalarheatresistance_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarHeatResistanceData::_internal_scalarheatresistance() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarheatresistance_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarHeatResistanceData::scalarheatresistance() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarHeatResistanceData.ScalarHeatResistance)
  return _internal_scalarheatresistance();
}
inline ::pulse::cdm::bind::ScalarData* ScalarHeatResistanceData::release_scalarheatresistance() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarHeatResistanceData.ScalarHeatResistance)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarheatresistance_;
  scalarheatresistance_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarHeatResistanceData::_internal_mutable_scalarheatresistance() {
  
  if (scalarheatresistance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarheatresistance_ = p;
  }
  return scalarheatresistance_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarHeatResistanceData::mutable_scalarheatresistance() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarHeatResistanceData.ScalarHeatResistance)
  return _internal_mutable_scalarheatresistance();
}
inline void ScalarHeatResistanceData::set_allocated_scalarheatresistance(::pulse::cdm::bind::ScalarData* scalarheatresistance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarheatresistance_;
  }
  if (scalarheatresistance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarheatresistance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarheatresistance, submessage_arena);
    }
    
  } else {
    
  }
  scalarheatresistance_ = scalarheatresistance;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarHeatResistanceData.ScalarHeatResistance)
}

// -------------------------------------------------------------------

// ScalarHeatResistanceAreaData

// .pulse.cdm.bind.ScalarData ScalarHeatResistanceArea = 1;
inline bool ScalarHeatResistanceAreaData::_internal_has_scalarheatresistancearea() const {
  return this != internal_default_instance() && scalarheatresistancearea_ != nullptr;
}
inline bool ScalarHeatResistanceAreaData::has_scalarheatresistancearea() const {
  return _internal_has_scalarheatresistancearea();
}
inline void ScalarHeatResistanceAreaData::clear_scalarheatresistancearea() {
  if (GetArenaNoVirtual() == nullptr && scalarheatresistancearea_ != nullptr) {
    delete scalarheatresistancearea_;
  }
  scalarheatresistancearea_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarHeatResistanceAreaData::_internal_scalarheatresistancearea() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarheatresistancearea_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarHeatResistanceAreaData::scalarheatresistancearea() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarHeatResistanceAreaData.ScalarHeatResistanceArea)
  return _internal_scalarheatresistancearea();
}
inline ::pulse::cdm::bind::ScalarData* ScalarHeatResistanceAreaData::release_scalarheatresistancearea() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarHeatResistanceAreaData.ScalarHeatResistanceArea)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarheatresistancearea_;
  scalarheatresistancearea_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarHeatResistanceAreaData::_internal_mutable_scalarheatresistancearea() {
  
  if (scalarheatresistancearea_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarheatresistancearea_ = p;
  }
  return scalarheatresistancearea_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarHeatResistanceAreaData::mutable_scalarheatresistancearea() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarHeatResistanceAreaData.ScalarHeatResistanceArea)
  return _internal_mutable_scalarheatresistancearea();
}
inline void ScalarHeatResistanceAreaData::set_allocated_scalarheatresistancearea(::pulse::cdm::bind::ScalarData* scalarheatresistancearea) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarheatresistancearea_;
  }
  if (scalarheatresistancearea) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarheatresistancearea = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarheatresistancearea, submessage_arena);
    }
    
  } else {
    
  }
  scalarheatresistancearea_ = scalarheatresistancearea;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarHeatResistanceAreaData.ScalarHeatResistanceArea)
}

// -------------------------------------------------------------------

// ScalarInversePressureData

// .pulse.cdm.bind.ScalarData ScalarInversePressure = 1;
inline bool ScalarInversePressureData::_internal_has_scalarinversepressure() const {
  return this != internal_default_instance() && scalarinversepressure_ != nullptr;
}
inline bool ScalarInversePressureData::has_scalarinversepressure() const {
  return _internal_has_scalarinversepressure();
}
inline void ScalarInversePressureData::clear_scalarinversepressure() {
  if (GetArenaNoVirtual() == nullptr && scalarinversepressure_ != nullptr) {
    delete scalarinversepressure_;
  }
  scalarinversepressure_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarInversePressureData::_internal_scalarinversepressure() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarinversepressure_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarInversePressureData::scalarinversepressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarInversePressureData.ScalarInversePressure)
  return _internal_scalarinversepressure();
}
inline ::pulse::cdm::bind::ScalarData* ScalarInversePressureData::release_scalarinversepressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarInversePressureData.ScalarInversePressure)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarinversepressure_;
  scalarinversepressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarInversePressureData::_internal_mutable_scalarinversepressure() {
  
  if (scalarinversepressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarinversepressure_ = p;
  }
  return scalarinversepressure_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarInversePressureData::mutable_scalarinversepressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarInversePressureData.ScalarInversePressure)
  return _internal_mutable_scalarinversepressure();
}
inline void ScalarInversePressureData::set_allocated_scalarinversepressure(::pulse::cdm::bind::ScalarData* scalarinversepressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarinversepressure_;
  }
  if (scalarinversepressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarinversepressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarinversepressure, submessage_arena);
    }
    
  } else {
    
  }
  scalarinversepressure_ = scalarinversepressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarInversePressureData.ScalarInversePressure)
}

// -------------------------------------------------------------------

// ScalarInverseVolumeData

// .pulse.cdm.bind.ScalarData ScalarInverseVolume = 1;
inline bool ScalarInverseVolumeData::_internal_has_scalarinversevolume() const {
  return this != internal_default_instance() && scalarinversevolume_ != nullptr;
}
inline bool ScalarInverseVolumeData::has_scalarinversevolume() const {
  return _internal_has_scalarinversevolume();
}
inline void ScalarInverseVolumeData::clear_scalarinversevolume() {
  if (GetArenaNoVirtual() == nullptr && scalarinversevolume_ != nullptr) {
    delete scalarinversevolume_;
  }
  scalarinversevolume_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarInverseVolumeData::_internal_scalarinversevolume() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarinversevolume_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarInverseVolumeData::scalarinversevolume() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarInverseVolumeData.ScalarInverseVolume)
  return _internal_scalarinversevolume();
}
inline ::pulse::cdm::bind::ScalarData* ScalarInverseVolumeData::release_scalarinversevolume() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarInverseVolumeData.ScalarInverseVolume)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarinversevolume_;
  scalarinversevolume_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarInverseVolumeData::_internal_mutable_scalarinversevolume() {
  
  if (scalarinversevolume_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarinversevolume_ = p;
  }
  return scalarinversevolume_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarInverseVolumeData::mutable_scalarinversevolume() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarInverseVolumeData.ScalarInverseVolume)
  return _internal_mutable_scalarinversevolume();
}
inline void ScalarInverseVolumeData::set_allocated_scalarinversevolume(::pulse::cdm::bind::ScalarData* scalarinversevolume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarinversevolume_;
  }
  if (scalarinversevolume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarinversevolume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarinversevolume, submessage_arena);
    }
    
  } else {
    
  }
  scalarinversevolume_ = scalarinversevolume;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarInverseVolumeData.ScalarInverseVolume)
}

// -------------------------------------------------------------------

// ScalarLengthData

// .pulse.cdm.bind.ScalarData ScalarLength = 1;
inline bool ScalarLengthData::_internal_has_scalarlength() const {
  return this != internal_default_instance() && scalarlength_ != nullptr;
}
inline bool ScalarLengthData::has_scalarlength() const {
  return _internal_has_scalarlength();
}
inline void ScalarLengthData::clear_scalarlength() {
  if (GetArenaNoVirtual() == nullptr && scalarlength_ != nullptr) {
    delete scalarlength_;
  }
  scalarlength_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarLengthData::_internal_scalarlength() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarlength_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarLengthData::scalarlength() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarLengthData.ScalarLength)
  return _internal_scalarlength();
}
inline ::pulse::cdm::bind::ScalarData* ScalarLengthData::release_scalarlength() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarLengthData.ScalarLength)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarlength_;
  scalarlength_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarLengthData::_internal_mutable_scalarlength() {
  
  if (scalarlength_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarlength_ = p;
  }
  return scalarlength_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarLengthData::mutable_scalarlength() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarLengthData.ScalarLength)
  return _internal_mutable_scalarlength();
}
inline void ScalarLengthData::set_allocated_scalarlength(::pulse::cdm::bind::ScalarData* scalarlength) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarlength_;
  }
  if (scalarlength) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarlength = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarlength, submessage_arena);
    }
    
  } else {
    
  }
  scalarlength_ = scalarlength;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarLengthData.ScalarLength)
}

// -------------------------------------------------------------------

// ScalarLengthPerTimeData

// .pulse.cdm.bind.ScalarData ScalarLengthPerTime = 1;
inline bool ScalarLengthPerTimeData::_internal_has_scalarlengthpertime() const {
  return this != internal_default_instance() && scalarlengthpertime_ != nullptr;
}
inline bool ScalarLengthPerTimeData::has_scalarlengthpertime() const {
  return _internal_has_scalarlengthpertime();
}
inline void ScalarLengthPerTimeData::clear_scalarlengthpertime() {
  if (GetArenaNoVirtual() == nullptr && scalarlengthpertime_ != nullptr) {
    delete scalarlengthpertime_;
  }
  scalarlengthpertime_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarLengthPerTimeData::_internal_scalarlengthpertime() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarlengthpertime_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarLengthPerTimeData::scalarlengthpertime() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarLengthPerTimeData.ScalarLengthPerTime)
  return _internal_scalarlengthpertime();
}
inline ::pulse::cdm::bind::ScalarData* ScalarLengthPerTimeData::release_scalarlengthpertime() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarLengthPerTimeData.ScalarLengthPerTime)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarlengthpertime_;
  scalarlengthpertime_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarLengthPerTimeData::_internal_mutable_scalarlengthpertime() {
  
  if (scalarlengthpertime_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarlengthpertime_ = p;
  }
  return scalarlengthpertime_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarLengthPerTimeData::mutable_scalarlengthpertime() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarLengthPerTimeData.ScalarLengthPerTime)
  return _internal_mutable_scalarlengthpertime();
}
inline void ScalarLengthPerTimeData::set_allocated_scalarlengthpertime(::pulse::cdm::bind::ScalarData* scalarlengthpertime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarlengthpertime_;
  }
  if (scalarlengthpertime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarlengthpertime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarlengthpertime, submessage_arena);
    }
    
  } else {
    
  }
  scalarlengthpertime_ = scalarlengthpertime;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarLengthPerTimeData.ScalarLengthPerTime)
}

// -------------------------------------------------------------------

// ScalarLengthPerTimePressureData

// .pulse.cdm.bind.ScalarData ScalarLengthPerTimePressure = 1;
inline bool ScalarLengthPerTimePressureData::_internal_has_scalarlengthpertimepressure() const {
  return this != internal_default_instance() && scalarlengthpertimepressure_ != nullptr;
}
inline bool ScalarLengthPerTimePressureData::has_scalarlengthpertimepressure() const {
  return _internal_has_scalarlengthpertimepressure();
}
inline void ScalarLengthPerTimePressureData::clear_scalarlengthpertimepressure() {
  if (GetArenaNoVirtual() == nullptr && scalarlengthpertimepressure_ != nullptr) {
    delete scalarlengthpertimepressure_;
  }
  scalarlengthpertimepressure_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarLengthPerTimePressureData::_internal_scalarlengthpertimepressure() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarlengthpertimepressure_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarLengthPerTimePressureData::scalarlengthpertimepressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarLengthPerTimePressureData.ScalarLengthPerTimePressure)
  return _internal_scalarlengthpertimepressure();
}
inline ::pulse::cdm::bind::ScalarData* ScalarLengthPerTimePressureData::release_scalarlengthpertimepressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarLengthPerTimePressureData.ScalarLengthPerTimePressure)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarlengthpertimepressure_;
  scalarlengthpertimepressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarLengthPerTimePressureData::_internal_mutable_scalarlengthpertimepressure() {
  
  if (scalarlengthpertimepressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarlengthpertimepressure_ = p;
  }
  return scalarlengthpertimepressure_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarLengthPerTimePressureData::mutable_scalarlengthpertimepressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarLengthPerTimePressureData.ScalarLengthPerTimePressure)
  return _internal_mutable_scalarlengthpertimepressure();
}
inline void ScalarLengthPerTimePressureData::set_allocated_scalarlengthpertimepressure(::pulse::cdm::bind::ScalarData* scalarlengthpertimepressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarlengthpertimepressure_;
  }
  if (scalarlengthpertimepressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarlengthpertimepressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarlengthpertimepressure, submessage_arena);
    }
    
  } else {
    
  }
  scalarlengthpertimepressure_ = scalarlengthpertimepressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarLengthPerTimePressureData.ScalarLengthPerTimePressure)
}

// -------------------------------------------------------------------

// ScalarMassData

// .pulse.cdm.bind.ScalarData ScalarMass = 1;
inline bool ScalarMassData::_internal_has_scalarmass() const {
  return this != internal_default_instance() && scalarmass_ != nullptr;
}
inline bool ScalarMassData::has_scalarmass() const {
  return _internal_has_scalarmass();
}
inline void ScalarMassData::clear_scalarmass() {
  if (GetArenaNoVirtual() == nullptr && scalarmass_ != nullptr) {
    delete scalarmass_;
  }
  scalarmass_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarMassData::_internal_scalarmass() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarmass_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarMassData::scalarmass() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarMassData.ScalarMass)
  return _internal_scalarmass();
}
inline ::pulse::cdm::bind::ScalarData* ScalarMassData::release_scalarmass() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarMassData.ScalarMass)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarmass_;
  scalarmass_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarMassData::_internal_mutable_scalarmass() {
  
  if (scalarmass_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarmass_ = p;
  }
  return scalarmass_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarMassData::mutable_scalarmass() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarMassData.ScalarMass)
  return _internal_mutable_scalarmass();
}
inline void ScalarMassData::set_allocated_scalarmass(::pulse::cdm::bind::ScalarData* scalarmass) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarmass_;
  }
  if (scalarmass) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarmass = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarmass, submessage_arena);
    }
    
  } else {
    
  }
  scalarmass_ = scalarmass;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarMassData.ScalarMass)
}

// -------------------------------------------------------------------

// ScalarMassPerAmountData

// .pulse.cdm.bind.ScalarData ScalarMassPerAmount = 1;
inline bool ScalarMassPerAmountData::_internal_has_scalarmassperamount() const {
  return this != internal_default_instance() && scalarmassperamount_ != nullptr;
}
inline bool ScalarMassPerAmountData::has_scalarmassperamount() const {
  return _internal_has_scalarmassperamount();
}
inline void ScalarMassPerAmountData::clear_scalarmassperamount() {
  if (GetArenaNoVirtual() == nullptr && scalarmassperamount_ != nullptr) {
    delete scalarmassperamount_;
  }
  scalarmassperamount_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarMassPerAmountData::_internal_scalarmassperamount() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarmassperamount_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarMassPerAmountData::scalarmassperamount() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarMassPerAmountData.ScalarMassPerAmount)
  return _internal_scalarmassperamount();
}
inline ::pulse::cdm::bind::ScalarData* ScalarMassPerAmountData::release_scalarmassperamount() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarMassPerAmountData.ScalarMassPerAmount)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarmassperamount_;
  scalarmassperamount_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarMassPerAmountData::_internal_mutable_scalarmassperamount() {
  
  if (scalarmassperamount_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarmassperamount_ = p;
  }
  return scalarmassperamount_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarMassPerAmountData::mutable_scalarmassperamount() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarMassPerAmountData.ScalarMassPerAmount)
  return _internal_mutable_scalarmassperamount();
}
inline void ScalarMassPerAmountData::set_allocated_scalarmassperamount(::pulse::cdm::bind::ScalarData* scalarmassperamount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarmassperamount_;
  }
  if (scalarmassperamount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarmassperamount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarmassperamount, submessage_arena);
    }
    
  } else {
    
  }
  scalarmassperamount_ = scalarmassperamount;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarMassPerAmountData.ScalarMassPerAmount)
}

// -------------------------------------------------------------------

// ScalarMassPerAreaTimeData

// .pulse.cdm.bind.ScalarData ScalarMassPerAreaTime = 1;
inline bool ScalarMassPerAreaTimeData::_internal_has_scalarmassperareatime() const {
  return this != internal_default_instance() && scalarmassperareatime_ != nullptr;
}
inline bool ScalarMassPerAreaTimeData::has_scalarmassperareatime() const {
  return _internal_has_scalarmassperareatime();
}
inline void ScalarMassPerAreaTimeData::clear_scalarmassperareatime() {
  if (GetArenaNoVirtual() == nullptr && scalarmassperareatime_ != nullptr) {
    delete scalarmassperareatime_;
  }
  scalarmassperareatime_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarMassPerAreaTimeData::_internal_scalarmassperareatime() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarmassperareatime_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarMassPerAreaTimeData::scalarmassperareatime() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarMassPerAreaTimeData.ScalarMassPerAreaTime)
  return _internal_scalarmassperareatime();
}
inline ::pulse::cdm::bind::ScalarData* ScalarMassPerAreaTimeData::release_scalarmassperareatime() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarMassPerAreaTimeData.ScalarMassPerAreaTime)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarmassperareatime_;
  scalarmassperareatime_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarMassPerAreaTimeData::_internal_mutable_scalarmassperareatime() {
  
  if (scalarmassperareatime_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarmassperareatime_ = p;
  }
  return scalarmassperareatime_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarMassPerAreaTimeData::mutable_scalarmassperareatime() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarMassPerAreaTimeData.ScalarMassPerAreaTime)
  return _internal_mutable_scalarmassperareatime();
}
inline void ScalarMassPerAreaTimeData::set_allocated_scalarmassperareatime(::pulse::cdm::bind::ScalarData* scalarmassperareatime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarmassperareatime_;
  }
  if (scalarmassperareatime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarmassperareatime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarmassperareatime, submessage_arena);
    }
    
  } else {
    
  }
  scalarmassperareatime_ = scalarmassperareatime;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarMassPerAreaTimeData.ScalarMassPerAreaTime)
}

// -------------------------------------------------------------------

// ScalarMassPerMassData

// .pulse.cdm.bind.ScalarData ScalarMassPerMass = 1;
inline bool ScalarMassPerMassData::_internal_has_scalarmasspermass() const {
  return this != internal_default_instance() && scalarmasspermass_ != nullptr;
}
inline bool ScalarMassPerMassData::has_scalarmasspermass() const {
  return _internal_has_scalarmasspermass();
}
inline void ScalarMassPerMassData::clear_scalarmasspermass() {
  if (GetArenaNoVirtual() == nullptr && scalarmasspermass_ != nullptr) {
    delete scalarmasspermass_;
  }
  scalarmasspermass_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarMassPerMassData::_internal_scalarmasspermass() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarmasspermass_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarMassPerMassData::scalarmasspermass() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarMassPerMassData.ScalarMassPerMass)
  return _internal_scalarmasspermass();
}
inline ::pulse::cdm::bind::ScalarData* ScalarMassPerMassData::release_scalarmasspermass() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarMassPerMassData.ScalarMassPerMass)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarmasspermass_;
  scalarmasspermass_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarMassPerMassData::_internal_mutable_scalarmasspermass() {
  
  if (scalarmasspermass_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarmasspermass_ = p;
  }
  return scalarmasspermass_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarMassPerMassData::mutable_scalarmasspermass() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarMassPerMassData.ScalarMassPerMass)
  return _internal_mutable_scalarmasspermass();
}
inline void ScalarMassPerMassData::set_allocated_scalarmasspermass(::pulse::cdm::bind::ScalarData* scalarmasspermass) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarmasspermass_;
  }
  if (scalarmasspermass) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarmasspermass = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarmasspermass, submessage_arena);
    }
    
  } else {
    
  }
  scalarmasspermass_ = scalarmasspermass;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarMassPerMassData.ScalarMassPerMass)
}

// -------------------------------------------------------------------

// ScalarMassPerTimeData

// .pulse.cdm.bind.ScalarData ScalarMassPerTime = 1;
inline bool ScalarMassPerTimeData::_internal_has_scalarmasspertime() const {
  return this != internal_default_instance() && scalarmasspertime_ != nullptr;
}
inline bool ScalarMassPerTimeData::has_scalarmasspertime() const {
  return _internal_has_scalarmasspertime();
}
inline void ScalarMassPerTimeData::clear_scalarmasspertime() {
  if (GetArenaNoVirtual() == nullptr && scalarmasspertime_ != nullptr) {
    delete scalarmasspertime_;
  }
  scalarmasspertime_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarMassPerTimeData::_internal_scalarmasspertime() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarmasspertime_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarMassPerTimeData::scalarmasspertime() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarMassPerTimeData.ScalarMassPerTime)
  return _internal_scalarmasspertime();
}
inline ::pulse::cdm::bind::ScalarData* ScalarMassPerTimeData::release_scalarmasspertime() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarMassPerTimeData.ScalarMassPerTime)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarmasspertime_;
  scalarmasspertime_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarMassPerTimeData::_internal_mutable_scalarmasspertime() {
  
  if (scalarmasspertime_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarmasspertime_ = p;
  }
  return scalarmasspertime_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarMassPerTimeData::mutable_scalarmasspertime() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarMassPerTimeData.ScalarMassPerTime)
  return _internal_mutable_scalarmasspertime();
}
inline void ScalarMassPerTimeData::set_allocated_scalarmasspertime(::pulse::cdm::bind::ScalarData* scalarmasspertime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarmasspertime_;
  }
  if (scalarmasspertime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarmasspertime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarmasspertime, submessage_arena);
    }
    
  } else {
    
  }
  scalarmasspertime_ = scalarmasspertime;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarMassPerTimeData.ScalarMassPerTime)
}

// -------------------------------------------------------------------

// ScalarMassPerVolumeData

// .pulse.cdm.bind.ScalarData ScalarMassPerVolume = 1;
inline bool ScalarMassPerVolumeData::_internal_has_scalarmasspervolume() const {
  return this != internal_default_instance() && scalarmasspervolume_ != nullptr;
}
inline bool ScalarMassPerVolumeData::has_scalarmasspervolume() const {
  return _internal_has_scalarmasspervolume();
}
inline void ScalarMassPerVolumeData::clear_scalarmasspervolume() {
  if (GetArenaNoVirtual() == nullptr && scalarmasspervolume_ != nullptr) {
    delete scalarmasspervolume_;
  }
  scalarmasspervolume_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarMassPerVolumeData::_internal_scalarmasspervolume() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarmasspervolume_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarMassPerVolumeData::scalarmasspervolume() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarMassPerVolumeData.ScalarMassPerVolume)
  return _internal_scalarmasspervolume();
}
inline ::pulse::cdm::bind::ScalarData* ScalarMassPerVolumeData::release_scalarmasspervolume() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarMassPerVolumeData.ScalarMassPerVolume)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarmasspervolume_;
  scalarmasspervolume_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarMassPerVolumeData::_internal_mutable_scalarmasspervolume() {
  
  if (scalarmasspervolume_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarmasspervolume_ = p;
  }
  return scalarmasspervolume_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarMassPerVolumeData::mutable_scalarmasspervolume() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarMassPerVolumeData.ScalarMassPerVolume)
  return _internal_mutable_scalarmasspervolume();
}
inline void ScalarMassPerVolumeData::set_allocated_scalarmasspervolume(::pulse::cdm::bind::ScalarData* scalarmasspervolume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarmasspervolume_;
  }
  if (scalarmasspervolume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarmasspervolume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarmasspervolume, submessage_arena);
    }
    
  } else {
    
  }
  scalarmasspervolume_ = scalarmasspervolume;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarMassPerVolumeData.ScalarMassPerVolume)
}

// -------------------------------------------------------------------

// ScalarOsmolalityData

// .pulse.cdm.bind.ScalarData ScalarOsmolality = 1;
inline bool ScalarOsmolalityData::_internal_has_scalarosmolality() const {
  return this != internal_default_instance() && scalarosmolality_ != nullptr;
}
inline bool ScalarOsmolalityData::has_scalarosmolality() const {
  return _internal_has_scalarosmolality();
}
inline void ScalarOsmolalityData::clear_scalarosmolality() {
  if (GetArenaNoVirtual() == nullptr && scalarosmolality_ != nullptr) {
    delete scalarosmolality_;
  }
  scalarosmolality_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarOsmolalityData::_internal_scalarosmolality() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarosmolality_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarOsmolalityData::scalarosmolality() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarOsmolalityData.ScalarOsmolality)
  return _internal_scalarosmolality();
}
inline ::pulse::cdm::bind::ScalarData* ScalarOsmolalityData::release_scalarosmolality() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarOsmolalityData.ScalarOsmolality)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarosmolality_;
  scalarosmolality_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarOsmolalityData::_internal_mutable_scalarosmolality() {
  
  if (scalarosmolality_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarosmolality_ = p;
  }
  return scalarosmolality_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarOsmolalityData::mutable_scalarosmolality() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarOsmolalityData.ScalarOsmolality)
  return _internal_mutable_scalarosmolality();
}
inline void ScalarOsmolalityData::set_allocated_scalarosmolality(::pulse::cdm::bind::ScalarData* scalarosmolality) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarosmolality_;
  }
  if (scalarosmolality) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarosmolality = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarosmolality, submessage_arena);
    }
    
  } else {
    
  }
  scalarosmolality_ = scalarosmolality;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarOsmolalityData.ScalarOsmolality)
}

// -------------------------------------------------------------------

// ScalarOsmolarityData

// .pulse.cdm.bind.ScalarData ScalarOsmolarity = 1;
inline bool ScalarOsmolarityData::_internal_has_scalarosmolarity() const {
  return this != internal_default_instance() && scalarosmolarity_ != nullptr;
}
inline bool ScalarOsmolarityData::has_scalarosmolarity() const {
  return _internal_has_scalarosmolarity();
}
inline void ScalarOsmolarityData::clear_scalarosmolarity() {
  if (GetArenaNoVirtual() == nullptr && scalarosmolarity_ != nullptr) {
    delete scalarosmolarity_;
  }
  scalarosmolarity_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarOsmolarityData::_internal_scalarosmolarity() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarosmolarity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarOsmolarityData::scalarosmolarity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarOsmolarityData.ScalarOsmolarity)
  return _internal_scalarosmolarity();
}
inline ::pulse::cdm::bind::ScalarData* ScalarOsmolarityData::release_scalarosmolarity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarOsmolarityData.ScalarOsmolarity)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarosmolarity_;
  scalarosmolarity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarOsmolarityData::_internal_mutable_scalarosmolarity() {
  
  if (scalarosmolarity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarosmolarity_ = p;
  }
  return scalarosmolarity_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarOsmolarityData::mutable_scalarosmolarity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarOsmolarityData.ScalarOsmolarity)
  return _internal_mutable_scalarosmolarity();
}
inline void ScalarOsmolarityData::set_allocated_scalarosmolarity(::pulse::cdm::bind::ScalarData* scalarosmolarity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarosmolarity_;
  }
  if (scalarosmolarity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarosmolarity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarosmolarity, submessage_arena);
    }
    
  } else {
    
  }
  scalarosmolarity_ = scalarosmolarity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarOsmolarityData.ScalarOsmolarity)
}

// -------------------------------------------------------------------

// ScalarPowerData

// .pulse.cdm.bind.ScalarData ScalarPower = 1;
inline bool ScalarPowerData::_internal_has_scalarpower() const {
  return this != internal_default_instance() && scalarpower_ != nullptr;
}
inline bool ScalarPowerData::has_scalarpower() const {
  return _internal_has_scalarpower();
}
inline void ScalarPowerData::clear_scalarpower() {
  if (GetArenaNoVirtual() == nullptr && scalarpower_ != nullptr) {
    delete scalarpower_;
  }
  scalarpower_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarPowerData::_internal_scalarpower() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarpower_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarPowerData::scalarpower() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarPowerData.ScalarPower)
  return _internal_scalarpower();
}
inline ::pulse::cdm::bind::ScalarData* ScalarPowerData::release_scalarpower() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarPowerData.ScalarPower)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarpower_;
  scalarpower_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarPowerData::_internal_mutable_scalarpower() {
  
  if (scalarpower_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarpower_ = p;
  }
  return scalarpower_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarPowerData::mutable_scalarpower() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarPowerData.ScalarPower)
  return _internal_mutable_scalarpower();
}
inline void ScalarPowerData::set_allocated_scalarpower(::pulse::cdm::bind::ScalarData* scalarpower) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarpower_;
  }
  if (scalarpower) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarpower = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarpower, submessage_arena);
    }
    
  } else {
    
  }
  scalarpower_ = scalarpower;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarPowerData.ScalarPower)
}

// -------------------------------------------------------------------

// ScalarPowerPerAreaTemperatureToTheFourthData

// .pulse.cdm.bind.ScalarData ScalarPowerPerAreaTemperatureToTheFourth = 1;
inline bool ScalarPowerPerAreaTemperatureToTheFourthData::_internal_has_scalarpowerperareatemperaturetothefourth() const {
  return this != internal_default_instance() && scalarpowerperareatemperaturetothefourth_ != nullptr;
}
inline bool ScalarPowerPerAreaTemperatureToTheFourthData::has_scalarpowerperareatemperaturetothefourth() const {
  return _internal_has_scalarpowerperareatemperaturetothefourth();
}
inline void ScalarPowerPerAreaTemperatureToTheFourthData::clear_scalarpowerperareatemperaturetothefourth() {
  if (GetArenaNoVirtual() == nullptr && scalarpowerperareatemperaturetothefourth_ != nullptr) {
    delete scalarpowerperareatemperaturetothefourth_;
  }
  scalarpowerperareatemperaturetothefourth_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarPowerPerAreaTemperatureToTheFourthData::_internal_scalarpowerperareatemperaturetothefourth() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarpowerperareatemperaturetothefourth_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarPowerPerAreaTemperatureToTheFourthData::scalarpowerperareatemperaturetothefourth() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarPowerPerAreaTemperatureToTheFourthData.ScalarPowerPerAreaTemperatureToTheFourth)
  return _internal_scalarpowerperareatemperaturetothefourth();
}
inline ::pulse::cdm::bind::ScalarData* ScalarPowerPerAreaTemperatureToTheFourthData::release_scalarpowerperareatemperaturetothefourth() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarPowerPerAreaTemperatureToTheFourthData.ScalarPowerPerAreaTemperatureToTheFourth)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarpowerperareatemperaturetothefourth_;
  scalarpowerperareatemperaturetothefourth_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarPowerPerAreaTemperatureToTheFourthData::_internal_mutable_scalarpowerperareatemperaturetothefourth() {
  
  if (scalarpowerperareatemperaturetothefourth_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarpowerperareatemperaturetothefourth_ = p;
  }
  return scalarpowerperareatemperaturetothefourth_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarPowerPerAreaTemperatureToTheFourthData::mutable_scalarpowerperareatemperaturetothefourth() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarPowerPerAreaTemperatureToTheFourthData.ScalarPowerPerAreaTemperatureToTheFourth)
  return _internal_mutable_scalarpowerperareatemperaturetothefourth();
}
inline void ScalarPowerPerAreaTemperatureToTheFourthData::set_allocated_scalarpowerperareatemperaturetothefourth(::pulse::cdm::bind::ScalarData* scalarpowerperareatemperaturetothefourth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarpowerperareatemperaturetothefourth_;
  }
  if (scalarpowerperareatemperaturetothefourth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarpowerperareatemperaturetothefourth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarpowerperareatemperaturetothefourth, submessage_arena);
    }
    
  } else {
    
  }
  scalarpowerperareatemperaturetothefourth_ = scalarpowerperareatemperaturetothefourth;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarPowerPerAreaTemperatureToTheFourthData.ScalarPowerPerAreaTemperatureToTheFourth)
}

// -------------------------------------------------------------------

// ScalarPressureData

// .pulse.cdm.bind.ScalarData ScalarPressure = 1;
inline bool ScalarPressureData::_internal_has_scalarpressure() const {
  return this != internal_default_instance() && scalarpressure_ != nullptr;
}
inline bool ScalarPressureData::has_scalarpressure() const {
  return _internal_has_scalarpressure();
}
inline void ScalarPressureData::clear_scalarpressure() {
  if (GetArenaNoVirtual() == nullptr && scalarpressure_ != nullptr) {
    delete scalarpressure_;
  }
  scalarpressure_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarPressureData::_internal_scalarpressure() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarpressure_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarPressureData::scalarpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarPressureData.ScalarPressure)
  return _internal_scalarpressure();
}
inline ::pulse::cdm::bind::ScalarData* ScalarPressureData::release_scalarpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarPressureData.ScalarPressure)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarpressure_;
  scalarpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarPressureData::_internal_mutable_scalarpressure() {
  
  if (scalarpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarpressure_ = p;
  }
  return scalarpressure_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarPressureData::mutable_scalarpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarPressureData.ScalarPressure)
  return _internal_mutable_scalarpressure();
}
inline void ScalarPressureData::set_allocated_scalarpressure(::pulse::cdm::bind::ScalarData* scalarpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarpressure_;
  }
  if (scalarpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarpressure, submessage_arena);
    }
    
  } else {
    
  }
  scalarpressure_ = scalarpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarPressureData.ScalarPressure)
}

// -------------------------------------------------------------------

// ScalarPressurePerVolumeData

// .pulse.cdm.bind.ScalarData ScalarPressurePerVolume = 1;
inline bool ScalarPressurePerVolumeData::_internal_has_scalarpressurepervolume() const {
  return this != internal_default_instance() && scalarpressurepervolume_ != nullptr;
}
inline bool ScalarPressurePerVolumeData::has_scalarpressurepervolume() const {
  return _internal_has_scalarpressurepervolume();
}
inline void ScalarPressurePerVolumeData::clear_scalarpressurepervolume() {
  if (GetArenaNoVirtual() == nullptr && scalarpressurepervolume_ != nullptr) {
    delete scalarpressurepervolume_;
  }
  scalarpressurepervolume_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarPressurePerVolumeData::_internal_scalarpressurepervolume() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarpressurepervolume_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarPressurePerVolumeData::scalarpressurepervolume() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarPressurePerVolumeData.ScalarPressurePerVolume)
  return _internal_scalarpressurepervolume();
}
inline ::pulse::cdm::bind::ScalarData* ScalarPressurePerVolumeData::release_scalarpressurepervolume() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarPressurePerVolumeData.ScalarPressurePerVolume)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarpressurepervolume_;
  scalarpressurepervolume_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarPressurePerVolumeData::_internal_mutable_scalarpressurepervolume() {
  
  if (scalarpressurepervolume_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarpressurepervolume_ = p;
  }
  return scalarpressurepervolume_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarPressurePerVolumeData::mutable_scalarpressurepervolume() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarPressurePerVolumeData.ScalarPressurePerVolume)
  return _internal_mutable_scalarpressurepervolume();
}
inline void ScalarPressurePerVolumeData::set_allocated_scalarpressurepervolume(::pulse::cdm::bind::ScalarData* scalarpressurepervolume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarpressurepervolume_;
  }
  if (scalarpressurepervolume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarpressurepervolume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarpressurepervolume, submessage_arena);
    }
    
  } else {
    
  }
  scalarpressurepervolume_ = scalarpressurepervolume;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarPressurePerVolumeData.ScalarPressurePerVolume)
}

// -------------------------------------------------------------------

// ScalarPressureTimePerVolumeAreaData

// .pulse.cdm.bind.ScalarData ScalarPressureTimePerVolumeArea = 1;
inline bool ScalarPressureTimePerVolumeAreaData::_internal_has_scalarpressuretimepervolumearea() const {
  return this != internal_default_instance() && scalarpressuretimepervolumearea_ != nullptr;
}
inline bool ScalarPressureTimePerVolumeAreaData::has_scalarpressuretimepervolumearea() const {
  return _internal_has_scalarpressuretimepervolumearea();
}
inline void ScalarPressureTimePerVolumeAreaData::clear_scalarpressuretimepervolumearea() {
  if (GetArenaNoVirtual() == nullptr && scalarpressuretimepervolumearea_ != nullptr) {
    delete scalarpressuretimepervolumearea_;
  }
  scalarpressuretimepervolumearea_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarPressureTimePerVolumeAreaData::_internal_scalarpressuretimepervolumearea() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarpressuretimepervolumearea_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarPressureTimePerVolumeAreaData::scalarpressuretimepervolumearea() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarPressureTimePerVolumeAreaData.ScalarPressureTimePerVolumeArea)
  return _internal_scalarpressuretimepervolumearea();
}
inline ::pulse::cdm::bind::ScalarData* ScalarPressureTimePerVolumeAreaData::release_scalarpressuretimepervolumearea() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarPressureTimePerVolumeAreaData.ScalarPressureTimePerVolumeArea)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarpressuretimepervolumearea_;
  scalarpressuretimepervolumearea_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarPressureTimePerVolumeAreaData::_internal_mutable_scalarpressuretimepervolumearea() {
  
  if (scalarpressuretimepervolumearea_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarpressuretimepervolumearea_ = p;
  }
  return scalarpressuretimepervolumearea_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarPressureTimePerVolumeAreaData::mutable_scalarpressuretimepervolumearea() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarPressureTimePerVolumeAreaData.ScalarPressureTimePerVolumeArea)
  return _internal_mutable_scalarpressuretimepervolumearea();
}
inline void ScalarPressureTimePerVolumeAreaData::set_allocated_scalarpressuretimepervolumearea(::pulse::cdm::bind::ScalarData* scalarpressuretimepervolumearea) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarpressuretimepervolumearea_;
  }
  if (scalarpressuretimepervolumearea) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarpressuretimepervolumearea = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarpressuretimepervolumearea, submessage_arena);
    }
    
  } else {
    
  }
  scalarpressuretimepervolumearea_ = scalarpressuretimepervolumearea;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarPressureTimePerVolumeAreaData.ScalarPressureTimePerVolumeArea)
}

// -------------------------------------------------------------------

// ScalarPressureTimePerAreaData

// .pulse.cdm.bind.ScalarData ScalarPressureTimePerArea = 1;
inline bool ScalarPressureTimePerAreaData::_internal_has_scalarpressuretimeperarea() const {
  return this != internal_default_instance() && scalarpressuretimeperarea_ != nullptr;
}
inline bool ScalarPressureTimePerAreaData::has_scalarpressuretimeperarea() const {
  return _internal_has_scalarpressuretimeperarea();
}
inline void ScalarPressureTimePerAreaData::clear_scalarpressuretimeperarea() {
  if (GetArenaNoVirtual() == nullptr && scalarpressuretimeperarea_ != nullptr) {
    delete scalarpressuretimeperarea_;
  }
  scalarpressuretimeperarea_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarPressureTimePerAreaData::_internal_scalarpressuretimeperarea() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarpressuretimeperarea_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarPressureTimePerAreaData::scalarpressuretimeperarea() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarPressureTimePerAreaData.ScalarPressureTimePerArea)
  return _internal_scalarpressuretimeperarea();
}
inline ::pulse::cdm::bind::ScalarData* ScalarPressureTimePerAreaData::release_scalarpressuretimeperarea() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarPressureTimePerAreaData.ScalarPressureTimePerArea)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarpressuretimeperarea_;
  scalarpressuretimeperarea_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarPressureTimePerAreaData::_internal_mutable_scalarpressuretimeperarea() {
  
  if (scalarpressuretimeperarea_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarpressuretimeperarea_ = p;
  }
  return scalarpressuretimeperarea_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarPressureTimePerAreaData::mutable_scalarpressuretimeperarea() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarPressureTimePerAreaData.ScalarPressureTimePerArea)
  return _internal_mutable_scalarpressuretimeperarea();
}
inline void ScalarPressureTimePerAreaData::set_allocated_scalarpressuretimeperarea(::pulse::cdm::bind::ScalarData* scalarpressuretimeperarea) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarpressuretimeperarea_;
  }
  if (scalarpressuretimeperarea) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarpressuretimeperarea = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarpressuretimeperarea, submessage_arena);
    }
    
  } else {
    
  }
  scalarpressuretimeperarea_ = scalarpressuretimeperarea;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarPressureTimePerAreaData.ScalarPressureTimePerArea)
}

// -------------------------------------------------------------------

// ScalarPressureTimePerVolumeData

// .pulse.cdm.bind.ScalarData ScalarPressureTimePerVolume = 1;
inline bool ScalarPressureTimePerVolumeData::_internal_has_scalarpressuretimepervolume() const {
  return this != internal_default_instance() && scalarpressuretimepervolume_ != nullptr;
}
inline bool ScalarPressureTimePerVolumeData::has_scalarpressuretimepervolume() const {
  return _internal_has_scalarpressuretimepervolume();
}
inline void ScalarPressureTimePerVolumeData::clear_scalarpressuretimepervolume() {
  if (GetArenaNoVirtual() == nullptr && scalarpressuretimepervolume_ != nullptr) {
    delete scalarpressuretimepervolume_;
  }
  scalarpressuretimepervolume_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarPressureTimePerVolumeData::_internal_scalarpressuretimepervolume() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarpressuretimepervolume_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarPressureTimePerVolumeData::scalarpressuretimepervolume() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarPressureTimePerVolumeData.ScalarPressureTimePerVolume)
  return _internal_scalarpressuretimepervolume();
}
inline ::pulse::cdm::bind::ScalarData* ScalarPressureTimePerVolumeData::release_scalarpressuretimepervolume() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarPressureTimePerVolumeData.ScalarPressureTimePerVolume)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarpressuretimepervolume_;
  scalarpressuretimepervolume_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarPressureTimePerVolumeData::_internal_mutable_scalarpressuretimepervolume() {
  
  if (scalarpressuretimepervolume_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarpressuretimepervolume_ = p;
  }
  return scalarpressuretimepervolume_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarPressureTimePerVolumeData::mutable_scalarpressuretimepervolume() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarPressureTimePerVolumeData.ScalarPressureTimePerVolume)
  return _internal_mutable_scalarpressuretimepervolume();
}
inline void ScalarPressureTimePerVolumeData::set_allocated_scalarpressuretimepervolume(::pulse::cdm::bind::ScalarData* scalarpressuretimepervolume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarpressuretimepervolume_;
  }
  if (scalarpressuretimepervolume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarpressuretimepervolume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarpressuretimepervolume, submessage_arena);
    }
    
  } else {
    
  }
  scalarpressuretimepervolume_ = scalarpressuretimepervolume;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarPressureTimePerVolumeData.ScalarPressureTimePerVolume)
}

// -------------------------------------------------------------------

// ScalarPressureTimeSquaredPerVolumeData

// .pulse.cdm.bind.ScalarData ScalarPressureTimeSquaredPerVolume = 1;
inline bool ScalarPressureTimeSquaredPerVolumeData::_internal_has_scalarpressuretimesquaredpervolume() const {
  return this != internal_default_instance() && scalarpressuretimesquaredpervolume_ != nullptr;
}
inline bool ScalarPressureTimeSquaredPerVolumeData::has_scalarpressuretimesquaredpervolume() const {
  return _internal_has_scalarpressuretimesquaredpervolume();
}
inline void ScalarPressureTimeSquaredPerVolumeData::clear_scalarpressuretimesquaredpervolume() {
  if (GetArenaNoVirtual() == nullptr && scalarpressuretimesquaredpervolume_ != nullptr) {
    delete scalarpressuretimesquaredpervolume_;
  }
  scalarpressuretimesquaredpervolume_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarPressureTimeSquaredPerVolumeData::_internal_scalarpressuretimesquaredpervolume() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarpressuretimesquaredpervolume_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarPressureTimeSquaredPerVolumeData::scalarpressuretimesquaredpervolume() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarPressureTimeSquaredPerVolumeData.ScalarPressureTimeSquaredPerVolume)
  return _internal_scalarpressuretimesquaredpervolume();
}
inline ::pulse::cdm::bind::ScalarData* ScalarPressureTimeSquaredPerVolumeData::release_scalarpressuretimesquaredpervolume() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarPressureTimeSquaredPerVolumeData.ScalarPressureTimeSquaredPerVolume)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarpressuretimesquaredpervolume_;
  scalarpressuretimesquaredpervolume_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarPressureTimeSquaredPerVolumeData::_internal_mutable_scalarpressuretimesquaredpervolume() {
  
  if (scalarpressuretimesquaredpervolume_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarpressuretimesquaredpervolume_ = p;
  }
  return scalarpressuretimesquaredpervolume_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarPressureTimeSquaredPerVolumeData::mutable_scalarpressuretimesquaredpervolume() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarPressureTimeSquaredPerVolumeData.ScalarPressureTimeSquaredPerVolume)
  return _internal_mutable_scalarpressuretimesquaredpervolume();
}
inline void ScalarPressureTimeSquaredPerVolumeData::set_allocated_scalarpressuretimesquaredpervolume(::pulse::cdm::bind::ScalarData* scalarpressuretimesquaredpervolume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarpressuretimesquaredpervolume_;
  }
  if (scalarpressuretimesquaredpervolume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarpressuretimesquaredpervolume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarpressuretimesquaredpervolume, submessage_arena);
    }
    
  } else {
    
  }
  scalarpressuretimesquaredpervolume_ = scalarpressuretimesquaredpervolume;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarPressureTimeSquaredPerVolumeData.ScalarPressureTimeSquaredPerVolume)
}

// -------------------------------------------------------------------

// ScalarTimeData

// .pulse.cdm.bind.ScalarData ScalarTime = 1;
inline bool ScalarTimeData::_internal_has_scalartime() const {
  return this != internal_default_instance() && scalartime_ != nullptr;
}
inline bool ScalarTimeData::has_scalartime() const {
  return _internal_has_scalartime();
}
inline void ScalarTimeData::clear_scalartime() {
  if (GetArenaNoVirtual() == nullptr && scalartime_ != nullptr) {
    delete scalartime_;
  }
  scalartime_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarTimeData::_internal_scalartime() const {
  const ::pulse::cdm::bind::ScalarData* p = scalartime_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarTimeData::scalartime() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarTimeData.ScalarTime)
  return _internal_scalartime();
}
inline ::pulse::cdm::bind::ScalarData* ScalarTimeData::release_scalartime() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarTimeData.ScalarTime)
  
  ::pulse::cdm::bind::ScalarData* temp = scalartime_;
  scalartime_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarTimeData::_internal_mutable_scalartime() {
  
  if (scalartime_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalartime_ = p;
  }
  return scalartime_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarTimeData::mutable_scalartime() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarTimeData.ScalarTime)
  return _internal_mutable_scalartime();
}
inline void ScalarTimeData::set_allocated_scalartime(::pulse::cdm::bind::ScalarData* scalartime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalartime_;
  }
  if (scalartime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalartime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalartime, submessage_arena);
    }
    
  } else {
    
  }
  scalartime_ = scalartime;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarTimeData.ScalarTime)
}

// -------------------------------------------------------------------

// ScalarTemperatureData

// .pulse.cdm.bind.ScalarData ScalarTemperature = 1;
inline bool ScalarTemperatureData::_internal_has_scalartemperature() const {
  return this != internal_default_instance() && scalartemperature_ != nullptr;
}
inline bool ScalarTemperatureData::has_scalartemperature() const {
  return _internal_has_scalartemperature();
}
inline void ScalarTemperatureData::clear_scalartemperature() {
  if (GetArenaNoVirtual() == nullptr && scalartemperature_ != nullptr) {
    delete scalartemperature_;
  }
  scalartemperature_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarTemperatureData::_internal_scalartemperature() const {
  const ::pulse::cdm::bind::ScalarData* p = scalartemperature_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarTemperatureData::scalartemperature() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarTemperatureData.ScalarTemperature)
  return _internal_scalartemperature();
}
inline ::pulse::cdm::bind::ScalarData* ScalarTemperatureData::release_scalartemperature() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarTemperatureData.ScalarTemperature)
  
  ::pulse::cdm::bind::ScalarData* temp = scalartemperature_;
  scalartemperature_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarTemperatureData::_internal_mutable_scalartemperature() {
  
  if (scalartemperature_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalartemperature_ = p;
  }
  return scalartemperature_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarTemperatureData::mutable_scalartemperature() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarTemperatureData.ScalarTemperature)
  return _internal_mutable_scalartemperature();
}
inline void ScalarTemperatureData::set_allocated_scalartemperature(::pulse::cdm::bind::ScalarData* scalartemperature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalartemperature_;
  }
  if (scalartemperature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalartemperature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalartemperature, submessage_arena);
    }
    
  } else {
    
  }
  scalartemperature_ = scalartemperature;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarTemperatureData.ScalarTemperature)
}

// -------------------------------------------------------------------

// ScalarVolumeData

// .pulse.cdm.bind.ScalarData ScalarVolume = 1;
inline bool ScalarVolumeData::_internal_has_scalarvolume() const {
  return this != internal_default_instance() && scalarvolume_ != nullptr;
}
inline bool ScalarVolumeData::has_scalarvolume() const {
  return _internal_has_scalarvolume();
}
inline void ScalarVolumeData::clear_scalarvolume() {
  if (GetArenaNoVirtual() == nullptr && scalarvolume_ != nullptr) {
    delete scalarvolume_;
  }
  scalarvolume_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarVolumeData::_internal_scalarvolume() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarvolume_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarVolumeData::scalarvolume() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarVolumeData.ScalarVolume)
  return _internal_scalarvolume();
}
inline ::pulse::cdm::bind::ScalarData* ScalarVolumeData::release_scalarvolume() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarVolumeData.ScalarVolume)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarvolume_;
  scalarvolume_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarVolumeData::_internal_mutable_scalarvolume() {
  
  if (scalarvolume_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarvolume_ = p;
  }
  return scalarvolume_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarVolumeData::mutable_scalarvolume() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarVolumeData.ScalarVolume)
  return _internal_mutable_scalarvolume();
}
inline void ScalarVolumeData::set_allocated_scalarvolume(::pulse::cdm::bind::ScalarData* scalarvolume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarvolume_;
  }
  if (scalarvolume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarvolume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarvolume, submessage_arena);
    }
    
  } else {
    
  }
  scalarvolume_ = scalarvolume;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarVolumeData.ScalarVolume)
}

// -------------------------------------------------------------------

// ScalarVolumePerTimeData

// .pulse.cdm.bind.ScalarData ScalarVolumePerTime = 1;
inline bool ScalarVolumePerTimeData::_internal_has_scalarvolumepertime() const {
  return this != internal_default_instance() && scalarvolumepertime_ != nullptr;
}
inline bool ScalarVolumePerTimeData::has_scalarvolumepertime() const {
  return _internal_has_scalarvolumepertime();
}
inline void ScalarVolumePerTimeData::clear_scalarvolumepertime() {
  if (GetArenaNoVirtual() == nullptr && scalarvolumepertime_ != nullptr) {
    delete scalarvolumepertime_;
  }
  scalarvolumepertime_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarVolumePerTimeData::_internal_scalarvolumepertime() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarvolumepertime_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarVolumePerTimeData::scalarvolumepertime() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarVolumePerTimeData.ScalarVolumePerTime)
  return _internal_scalarvolumepertime();
}
inline ::pulse::cdm::bind::ScalarData* ScalarVolumePerTimeData::release_scalarvolumepertime() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarVolumePerTimeData.ScalarVolumePerTime)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarvolumepertime_;
  scalarvolumepertime_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarVolumePerTimeData::_internal_mutable_scalarvolumepertime() {
  
  if (scalarvolumepertime_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarvolumepertime_ = p;
  }
  return scalarvolumepertime_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarVolumePerTimeData::mutable_scalarvolumepertime() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarVolumePerTimeData.ScalarVolumePerTime)
  return _internal_mutable_scalarvolumepertime();
}
inline void ScalarVolumePerTimeData::set_allocated_scalarvolumepertime(::pulse::cdm::bind::ScalarData* scalarvolumepertime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarvolumepertime_;
  }
  if (scalarvolumepertime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarvolumepertime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarvolumepertime, submessage_arena);
    }
    
  } else {
    
  }
  scalarvolumepertime_ = scalarvolumepertime;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarVolumePerTimeData.ScalarVolumePerTime)
}

// -------------------------------------------------------------------

// ScalarVolumePerPressureData

// .pulse.cdm.bind.ScalarData ScalarVolumePerPressure = 1;
inline bool ScalarVolumePerPressureData::_internal_has_scalarvolumeperpressure() const {
  return this != internal_default_instance() && scalarvolumeperpressure_ != nullptr;
}
inline bool ScalarVolumePerPressureData::has_scalarvolumeperpressure() const {
  return _internal_has_scalarvolumeperpressure();
}
inline void ScalarVolumePerPressureData::clear_scalarvolumeperpressure() {
  if (GetArenaNoVirtual() == nullptr && scalarvolumeperpressure_ != nullptr) {
    delete scalarvolumeperpressure_;
  }
  scalarvolumeperpressure_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarVolumePerPressureData::_internal_scalarvolumeperpressure() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarvolumeperpressure_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarVolumePerPressureData::scalarvolumeperpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarVolumePerPressureData.ScalarVolumePerPressure)
  return _internal_scalarvolumeperpressure();
}
inline ::pulse::cdm::bind::ScalarData* ScalarVolumePerPressureData::release_scalarvolumeperpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarVolumePerPressureData.ScalarVolumePerPressure)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarvolumeperpressure_;
  scalarvolumeperpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarVolumePerPressureData::_internal_mutable_scalarvolumeperpressure() {
  
  if (scalarvolumeperpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarvolumeperpressure_ = p;
  }
  return scalarvolumeperpressure_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarVolumePerPressureData::mutable_scalarvolumeperpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarVolumePerPressureData.ScalarVolumePerPressure)
  return _internal_mutable_scalarvolumeperpressure();
}
inline void ScalarVolumePerPressureData::set_allocated_scalarvolumeperpressure(::pulse::cdm::bind::ScalarData* scalarvolumeperpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarvolumeperpressure_;
  }
  if (scalarvolumeperpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarvolumeperpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarvolumeperpressure, submessage_arena);
    }
    
  } else {
    
  }
  scalarvolumeperpressure_ = scalarvolumeperpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarVolumePerPressureData.ScalarVolumePerPressure)
}

// -------------------------------------------------------------------

// ScalarVolumePerTimeAreaData

// .pulse.cdm.bind.ScalarData ScalarVolumePerTimeArea = 1;
inline bool ScalarVolumePerTimeAreaData::_internal_has_scalarvolumepertimearea() const {
  return this != internal_default_instance() && scalarvolumepertimearea_ != nullptr;
}
inline bool ScalarVolumePerTimeAreaData::has_scalarvolumepertimearea() const {
  return _internal_has_scalarvolumepertimearea();
}
inline void ScalarVolumePerTimeAreaData::clear_scalarvolumepertimearea() {
  if (GetArenaNoVirtual() == nullptr && scalarvolumepertimearea_ != nullptr) {
    delete scalarvolumepertimearea_;
  }
  scalarvolumepertimearea_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarVolumePerTimeAreaData::_internal_scalarvolumepertimearea() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarvolumepertimearea_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarVolumePerTimeAreaData::scalarvolumepertimearea() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarVolumePerTimeAreaData.ScalarVolumePerTimeArea)
  return _internal_scalarvolumepertimearea();
}
inline ::pulse::cdm::bind::ScalarData* ScalarVolumePerTimeAreaData::release_scalarvolumepertimearea() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarVolumePerTimeAreaData.ScalarVolumePerTimeArea)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarvolumepertimearea_;
  scalarvolumepertimearea_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarVolumePerTimeAreaData::_internal_mutable_scalarvolumepertimearea() {
  
  if (scalarvolumepertimearea_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarvolumepertimearea_ = p;
  }
  return scalarvolumepertimearea_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarVolumePerTimeAreaData::mutable_scalarvolumepertimearea() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarVolumePerTimeAreaData.ScalarVolumePerTimeArea)
  return _internal_mutable_scalarvolumepertimearea();
}
inline void ScalarVolumePerTimeAreaData::set_allocated_scalarvolumepertimearea(::pulse::cdm::bind::ScalarData* scalarvolumepertimearea) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarvolumepertimearea_;
  }
  if (scalarvolumepertimearea) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarvolumepertimearea = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarvolumepertimearea, submessage_arena);
    }
    
  } else {
    
  }
  scalarvolumepertimearea_ = scalarvolumepertimearea;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarVolumePerTimeAreaData.ScalarVolumePerTimeArea)
}

// -------------------------------------------------------------------

// ScalarVolumePerTimeMassData

// .pulse.cdm.bind.ScalarData ScalarVolumePerTimeMass = 1;
inline bool ScalarVolumePerTimeMassData::_internal_has_scalarvolumepertimemass() const {
  return this != internal_default_instance() && scalarvolumepertimemass_ != nullptr;
}
inline bool ScalarVolumePerTimeMassData::has_scalarvolumepertimemass() const {
  return _internal_has_scalarvolumepertimemass();
}
inline void ScalarVolumePerTimeMassData::clear_scalarvolumepertimemass() {
  if (GetArenaNoVirtual() == nullptr && scalarvolumepertimemass_ != nullptr) {
    delete scalarvolumepertimemass_;
  }
  scalarvolumepertimemass_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarVolumePerTimeMassData::_internal_scalarvolumepertimemass() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarvolumepertimemass_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarVolumePerTimeMassData::scalarvolumepertimemass() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarVolumePerTimeMassData.ScalarVolumePerTimeMass)
  return _internal_scalarvolumepertimemass();
}
inline ::pulse::cdm::bind::ScalarData* ScalarVolumePerTimeMassData::release_scalarvolumepertimemass() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarVolumePerTimeMassData.ScalarVolumePerTimeMass)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarvolumepertimemass_;
  scalarvolumepertimemass_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarVolumePerTimeMassData::_internal_mutable_scalarvolumepertimemass() {
  
  if (scalarvolumepertimemass_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarvolumepertimemass_ = p;
  }
  return scalarvolumepertimemass_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarVolumePerTimeMassData::mutable_scalarvolumepertimemass() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarVolumePerTimeMassData.ScalarVolumePerTimeMass)
  return _internal_mutable_scalarvolumepertimemass();
}
inline void ScalarVolumePerTimeMassData::set_allocated_scalarvolumepertimemass(::pulse::cdm::bind::ScalarData* scalarvolumepertimemass) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarvolumepertimemass_;
  }
  if (scalarvolumepertimemass) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarvolumepertimemass = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarvolumepertimemass, submessage_arena);
    }
    
  } else {
    
  }
  scalarvolumepertimemass_ = scalarvolumepertimemass;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarVolumePerTimeMassData.ScalarVolumePerTimeMass)
}

// -------------------------------------------------------------------

// ScalarVolumePerTimePressureData

// .pulse.cdm.bind.ScalarData ScalarVolumePerTimePressure = 1;
inline bool ScalarVolumePerTimePressureData::_internal_has_scalarvolumepertimepressure() const {
  return this != internal_default_instance() && scalarvolumepertimepressure_ != nullptr;
}
inline bool ScalarVolumePerTimePressureData::has_scalarvolumepertimepressure() const {
  return _internal_has_scalarvolumepertimepressure();
}
inline void ScalarVolumePerTimePressureData::clear_scalarvolumepertimepressure() {
  if (GetArenaNoVirtual() == nullptr && scalarvolumepertimepressure_ != nullptr) {
    delete scalarvolumepertimepressure_;
  }
  scalarvolumepertimepressure_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarVolumePerTimePressureData::_internal_scalarvolumepertimepressure() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarvolumepertimepressure_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarVolumePerTimePressureData::scalarvolumepertimepressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarVolumePerTimePressureData.ScalarVolumePerTimePressure)
  return _internal_scalarvolumepertimepressure();
}
inline ::pulse::cdm::bind::ScalarData* ScalarVolumePerTimePressureData::release_scalarvolumepertimepressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarVolumePerTimePressureData.ScalarVolumePerTimePressure)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarvolumepertimepressure_;
  scalarvolumepertimepressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarVolumePerTimePressureData::_internal_mutable_scalarvolumepertimepressure() {
  
  if (scalarvolumepertimepressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarvolumepertimepressure_ = p;
  }
  return scalarvolumepertimepressure_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarVolumePerTimePressureData::mutable_scalarvolumepertimepressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarVolumePerTimePressureData.ScalarVolumePerTimePressure)
  return _internal_mutable_scalarvolumepertimepressure();
}
inline void ScalarVolumePerTimePressureData::set_allocated_scalarvolumepertimepressure(::pulse::cdm::bind::ScalarData* scalarvolumepertimepressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarvolumepertimepressure_;
  }
  if (scalarvolumepertimepressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarvolumepertimepressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarvolumepertimepressure, submessage_arena);
    }
    
  } else {
    
  }
  scalarvolumepertimepressure_ = scalarvolumepertimepressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarVolumePerTimePressureData.ScalarVolumePerTimePressure)
}

// -------------------------------------------------------------------

// ScalarVolumePerTimePressureAreaData

// .pulse.cdm.bind.ScalarData ScalarVolumePerTimePressureArea = 1;
inline bool ScalarVolumePerTimePressureAreaData::_internal_has_scalarvolumepertimepressurearea() const {
  return this != internal_default_instance() && scalarvolumepertimepressurearea_ != nullptr;
}
inline bool ScalarVolumePerTimePressureAreaData::has_scalarvolumepertimepressurearea() const {
  return _internal_has_scalarvolumepertimepressurearea();
}
inline void ScalarVolumePerTimePressureAreaData::clear_scalarvolumepertimepressurearea() {
  if (GetArenaNoVirtual() == nullptr && scalarvolumepertimepressurearea_ != nullptr) {
    delete scalarvolumepertimepressurearea_;
  }
  scalarvolumepertimepressurearea_ = nullptr;
}
inline const ::pulse::cdm::bind::ScalarData& ScalarVolumePerTimePressureAreaData::_internal_scalarvolumepertimepressurearea() const {
  const ::pulse::cdm::bind::ScalarData* p = scalarvolumepertimepressurearea_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ScalarData*>(
      &::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ScalarVolumePerTimePressureAreaData::scalarvolumepertimepressurearea() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScalarVolumePerTimePressureAreaData.ScalarVolumePerTimePressureArea)
  return _internal_scalarvolumepertimepressurearea();
}
inline ::pulse::cdm::bind::ScalarData* ScalarVolumePerTimePressureAreaData::release_scalarvolumepertimepressurearea() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScalarVolumePerTimePressureAreaData.ScalarVolumePerTimePressureArea)
  
  ::pulse::cdm::bind::ScalarData* temp = scalarvolumepertimepressurearea_;
  scalarvolumepertimepressurearea_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ScalarVolumePerTimePressureAreaData::_internal_mutable_scalarvolumepertimepressurearea() {
  
  if (scalarvolumepertimepressurearea_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArenaNoVirtual());
    scalarvolumepertimepressurearea_ = p;
  }
  return scalarvolumepertimepressurearea_;
}
inline ::pulse::cdm::bind::ScalarData* ScalarVolumePerTimePressureAreaData::mutable_scalarvolumepertimepressurearea() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScalarVolumePerTimePressureAreaData.ScalarVolumePerTimePressureArea)
  return _internal_mutable_scalarvolumepertimepressurearea();
}
inline void ScalarVolumePerTimePressureAreaData::set_allocated_scalarvolumepertimepressurearea(::pulse::cdm::bind::ScalarData* scalarvolumepertimepressurearea) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scalarvolumepertimepressurearea_;
  }
  if (scalarvolumepertimepressurearea) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scalarvolumepertimepressurearea = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalarvolumepertimepressurearea, submessage_arena);
    }
    
  } else {
    
  }
  scalarvolumepertimepressurearea_ = scalarvolumepertimepressurearea;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScalarVolumePerTimePressureAreaData.ScalarVolumePerTimePressureArea)
}

// -------------------------------------------------------------------

// DoubleArrayData

// repeated double Value = 1 [packed = true];
inline int DoubleArrayData::_internal_value_size() const {
  return value_.size();
}
inline int DoubleArrayData::value_size() const {
  return _internal_value_size();
}
inline void DoubleArrayData::clear_value() {
  value_.Clear();
}
inline double DoubleArrayData::_internal_value(int index) const {
  return value_.Get(index);
}
inline double DoubleArrayData::value(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.DoubleArrayData.Value)
  return _internal_value(index);
}
inline void DoubleArrayData::set_value(int index, double value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.DoubleArrayData.Value)
}
inline void DoubleArrayData::_internal_add_value(double value) {
  value_.Add(value);
}
inline void DoubleArrayData::add_value(double value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.DoubleArrayData.Value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DoubleArrayData::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DoubleArrayData::value() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.DoubleArrayData.Value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DoubleArrayData::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DoubleArrayData::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.DoubleArrayData.Value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// IntegerArrayData

// repeated int32 Value = 1 [packed = true];
inline int IntegerArrayData::_internal_value_size() const {
  return value_.size();
}
inline int IntegerArrayData::value_size() const {
  return _internal_value_size();
}
inline void IntegerArrayData::clear_value() {
  value_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntegerArrayData::_internal_value(int index) const {
  return value_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntegerArrayData::value(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.IntegerArrayData.Value)
  return _internal_value(index);
}
inline void IntegerArrayData::set_value(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.IntegerArrayData.Value)
}
inline void IntegerArrayData::_internal_add_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  value_.Add(value);
}
inline void IntegerArrayData::add_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.IntegerArrayData.Value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
IntegerArrayData::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
IntegerArrayData::value() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.IntegerArrayData.Value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
IntegerArrayData::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
IntegerArrayData::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.IntegerArrayData.Value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// ArrayData

// .pulse.cdm.bind.DoubleArrayData Value = 1;
inline bool ArrayData::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool ArrayData::has_value() const {
  return _internal_has_value();
}
inline void ArrayData::clear_value() {
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
inline const ::pulse::cdm::bind::DoubleArrayData& ArrayData::_internal_value() const {
  const ::pulse::cdm::bind::DoubleArrayData* p = value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::DoubleArrayData*>(
      &::pulse::cdm::bind::_DoubleArrayData_default_instance_);
}
inline const ::pulse::cdm::bind::DoubleArrayData& ArrayData::value() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ArrayData.Value)
  return _internal_value();
}
inline ::pulse::cdm::bind::DoubleArrayData* ArrayData::release_value() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ArrayData.Value)
  
  ::pulse::cdm::bind::DoubleArrayData* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::DoubleArrayData* ArrayData::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::DoubleArrayData>(GetArenaNoVirtual());
    value_ = p;
  }
  return value_;
}
inline ::pulse::cdm::bind::DoubleArrayData* ArrayData::mutable_value() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ArrayData.Value)
  return _internal_mutable_value();
}
inline void ArrayData::set_allocated_value(::pulse::cdm::bind::DoubleArrayData* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ArrayData.Value)
}

// string Unit = 2;
inline void ArrayData::clear_unit() {
  unit_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ArrayData::unit() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ArrayData.Unit)
  return _internal_unit();
}
inline void ArrayData::set_unit(const std::string& value) {
  _internal_set_unit(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ArrayData.Unit)
}
inline std::string* ArrayData::mutable_unit() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ArrayData.Unit)
  return _internal_mutable_unit();
}
inline const std::string& ArrayData::_internal_unit() const {
  return unit_.GetNoArena();
}
inline void ArrayData::_internal_set_unit(const std::string& value) {
  
  unit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ArrayData::set_unit(std::string&& value) {
  
  unit_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.ArrayData.Unit)
}
inline void ArrayData::set_unit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.ArrayData.Unit)
}
inline void ArrayData::set_unit(const char* value, size_t size) {
  
  unit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.ArrayData.Unit)
}
inline std::string* ArrayData::_internal_mutable_unit() {
  
  return unit_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ArrayData::release_unit() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ArrayData.Unit)
  
  return unit_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ArrayData::set_allocated_unit(std::string* unit) {
  if (unit != nullptr) {
    
  } else {
    
  }
  unit_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unit);
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ArrayData.Unit)
}

// -------------------------------------------------------------------

// ArrayTimeData

// .pulse.cdm.bind.ArrayData ArrayTime = 1;
inline bool ArrayTimeData::_internal_has_arraytime() const {
  return this != internal_default_instance() && arraytime_ != nullptr;
}
inline bool ArrayTimeData::has_arraytime() const {
  return _internal_has_arraytime();
}
inline void ArrayTimeData::clear_arraytime() {
  if (GetArenaNoVirtual() == nullptr && arraytime_ != nullptr) {
    delete arraytime_;
  }
  arraytime_ = nullptr;
}
inline const ::pulse::cdm::bind::ArrayData& ArrayTimeData::_internal_arraytime() const {
  const ::pulse::cdm::bind::ArrayData* p = arraytime_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ArrayData*>(
      &::pulse::cdm::bind::_ArrayData_default_instance_);
}
inline const ::pulse::cdm::bind::ArrayData& ArrayTimeData::arraytime() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ArrayTimeData.ArrayTime)
  return _internal_arraytime();
}
inline ::pulse::cdm::bind::ArrayData* ArrayTimeData::release_arraytime() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ArrayTimeData.ArrayTime)
  
  ::pulse::cdm::bind::ArrayData* temp = arraytime_;
  arraytime_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ArrayData* ArrayTimeData::_internal_mutable_arraytime() {
  
  if (arraytime_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ArrayData>(GetArenaNoVirtual());
    arraytime_ = p;
  }
  return arraytime_;
}
inline ::pulse::cdm::bind::ArrayData* ArrayTimeData::mutable_arraytime() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ArrayTimeData.ArrayTime)
  return _internal_mutable_arraytime();
}
inline void ArrayTimeData::set_allocated_arraytime(::pulse::cdm::bind::ArrayData* arraytime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete arraytime_;
  }
  if (arraytime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      arraytime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arraytime, submessage_arena);
    }
    
  } else {
    
  }
  arraytime_ = arraytime;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ArrayTimeData.ArrayTime)
}

// -------------------------------------------------------------------

// FunctionData

// .pulse.cdm.bind.DoubleArrayData Dependent = 1;
inline bool FunctionData::_internal_has_dependent() const {
  return this != internal_default_instance() && dependent_ != nullptr;
}
inline bool FunctionData::has_dependent() const {
  return _internal_has_dependent();
}
inline void FunctionData::clear_dependent() {
  if (GetArenaNoVirtual() == nullptr && dependent_ != nullptr) {
    delete dependent_;
  }
  dependent_ = nullptr;
}
inline const ::pulse::cdm::bind::DoubleArrayData& FunctionData::_internal_dependent() const {
  const ::pulse::cdm::bind::DoubleArrayData* p = dependent_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::DoubleArrayData*>(
      &::pulse::cdm::bind::_DoubleArrayData_default_instance_);
}
inline const ::pulse::cdm::bind::DoubleArrayData& FunctionData::dependent() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.FunctionData.Dependent)
  return _internal_dependent();
}
inline ::pulse::cdm::bind::DoubleArrayData* FunctionData::release_dependent() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.FunctionData.Dependent)
  
  ::pulse::cdm::bind::DoubleArrayData* temp = dependent_;
  dependent_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::DoubleArrayData* FunctionData::_internal_mutable_dependent() {
  
  if (dependent_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::DoubleArrayData>(GetArenaNoVirtual());
    dependent_ = p;
  }
  return dependent_;
}
inline ::pulse::cdm::bind::DoubleArrayData* FunctionData::mutable_dependent() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.FunctionData.Dependent)
  return _internal_mutable_dependent();
}
inline void FunctionData::set_allocated_dependent(::pulse::cdm::bind::DoubleArrayData* dependent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dependent_;
  }
  if (dependent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dependent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dependent, submessage_arena);
    }
    
  } else {
    
  }
  dependent_ = dependent;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.FunctionData.Dependent)
}

// .pulse.cdm.bind.DoubleArrayData Independent = 2;
inline bool FunctionData::_internal_has_independent() const {
  return this != internal_default_instance() && independent_ != nullptr;
}
inline bool FunctionData::has_independent() const {
  return _internal_has_independent();
}
inline void FunctionData::clear_independent() {
  if (GetArenaNoVirtual() == nullptr && independent_ != nullptr) {
    delete independent_;
  }
  independent_ = nullptr;
}
inline const ::pulse::cdm::bind::DoubleArrayData& FunctionData::_internal_independent() const {
  const ::pulse::cdm::bind::DoubleArrayData* p = independent_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::DoubleArrayData*>(
      &::pulse::cdm::bind::_DoubleArrayData_default_instance_);
}
inline const ::pulse::cdm::bind::DoubleArrayData& FunctionData::independent() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.FunctionData.Independent)
  return _internal_independent();
}
inline ::pulse::cdm::bind::DoubleArrayData* FunctionData::release_independent() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.FunctionData.Independent)
  
  ::pulse::cdm::bind::DoubleArrayData* temp = independent_;
  independent_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::DoubleArrayData* FunctionData::_internal_mutable_independent() {
  
  if (independent_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::DoubleArrayData>(GetArenaNoVirtual());
    independent_ = p;
  }
  return independent_;
}
inline ::pulse::cdm::bind::DoubleArrayData* FunctionData::mutable_independent() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.FunctionData.Independent)
  return _internal_mutable_independent();
}
inline void FunctionData::set_allocated_independent(::pulse::cdm::bind::DoubleArrayData* independent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete independent_;
  }
  if (independent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      independent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, independent, submessage_arena);
    }
    
  } else {
    
  }
  independent_ = independent;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.FunctionData.Independent)
}

// string DependentUnit = 3;
inline void FunctionData::clear_dependentunit() {
  dependentunit_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FunctionData::dependentunit() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.FunctionData.DependentUnit)
  return _internal_dependentunit();
}
inline void FunctionData::set_dependentunit(const std::string& value) {
  _internal_set_dependentunit(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.FunctionData.DependentUnit)
}
inline std::string* FunctionData::mutable_dependentunit() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.FunctionData.DependentUnit)
  return _internal_mutable_dependentunit();
}
inline const std::string& FunctionData::_internal_dependentunit() const {
  return dependentunit_.GetNoArena();
}
inline void FunctionData::_internal_set_dependentunit(const std::string& value) {
  
  dependentunit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FunctionData::set_dependentunit(std::string&& value) {
  
  dependentunit_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.FunctionData.DependentUnit)
}
inline void FunctionData::set_dependentunit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dependentunit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.FunctionData.DependentUnit)
}
inline void FunctionData::set_dependentunit(const char* value, size_t size) {
  
  dependentunit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.FunctionData.DependentUnit)
}
inline std::string* FunctionData::_internal_mutable_dependentunit() {
  
  return dependentunit_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FunctionData::release_dependentunit() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.FunctionData.DependentUnit)
  
  return dependentunit_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FunctionData::set_allocated_dependentunit(std::string* dependentunit) {
  if (dependentunit != nullptr) {
    
  } else {
    
  }
  dependentunit_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dependentunit);
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.FunctionData.DependentUnit)
}

// string IndependentUnit = 4;
inline void FunctionData::clear_independentunit() {
  independentunit_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FunctionData::independentunit() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.FunctionData.IndependentUnit)
  return _internal_independentunit();
}
inline void FunctionData::set_independentunit(const std::string& value) {
  _internal_set_independentunit(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.FunctionData.IndependentUnit)
}
inline std::string* FunctionData::mutable_independentunit() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.FunctionData.IndependentUnit)
  return _internal_mutable_independentunit();
}
inline const std::string& FunctionData::_internal_independentunit() const {
  return independentunit_.GetNoArena();
}
inline void FunctionData::_internal_set_independentunit(const std::string& value) {
  
  independentunit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FunctionData::set_independentunit(std::string&& value) {
  
  independentunit_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.FunctionData.IndependentUnit)
}
inline void FunctionData::set_independentunit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  independentunit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.FunctionData.IndependentUnit)
}
inline void FunctionData::set_independentunit(const char* value, size_t size) {
  
  independentunit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.FunctionData.IndependentUnit)
}
inline std::string* FunctionData::_internal_mutable_independentunit() {
  
  return independentunit_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FunctionData::release_independentunit() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.FunctionData.IndependentUnit)
  
  return independentunit_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FunctionData::set_allocated_independentunit(std::string* independentunit) {
  if (independentunit != nullptr) {
    
  } else {
    
  }
  independentunit_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), independentunit);
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.FunctionData.IndependentUnit)
}

// -------------------------------------------------------------------

// FunctionVolumeVsTimeData

// .pulse.cdm.bind.FunctionData FunctionVolumeVsTime = 1;
inline bool FunctionVolumeVsTimeData::_internal_has_functionvolumevstime() const {
  return this != internal_default_instance() && functionvolumevstime_ != nullptr;
}
inline bool FunctionVolumeVsTimeData::has_functionvolumevstime() const {
  return _internal_has_functionvolumevstime();
}
inline void FunctionVolumeVsTimeData::clear_functionvolumevstime() {
  if (GetArenaNoVirtual() == nullptr && functionvolumevstime_ != nullptr) {
    delete functionvolumevstime_;
  }
  functionvolumevstime_ = nullptr;
}
inline const ::pulse::cdm::bind::FunctionData& FunctionVolumeVsTimeData::_internal_functionvolumevstime() const {
  const ::pulse::cdm::bind::FunctionData* p = functionvolumevstime_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::FunctionData*>(
      &::pulse::cdm::bind::_FunctionData_default_instance_);
}
inline const ::pulse::cdm::bind::FunctionData& FunctionVolumeVsTimeData::functionvolumevstime() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.FunctionVolumeVsTimeData.FunctionVolumeVsTime)
  return _internal_functionvolumevstime();
}
inline ::pulse::cdm::bind::FunctionData* FunctionVolumeVsTimeData::release_functionvolumevstime() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.FunctionVolumeVsTimeData.FunctionVolumeVsTime)
  
  ::pulse::cdm::bind::FunctionData* temp = functionvolumevstime_;
  functionvolumevstime_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::FunctionData* FunctionVolumeVsTimeData::_internal_mutable_functionvolumevstime() {
  
  if (functionvolumevstime_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::FunctionData>(GetArenaNoVirtual());
    functionvolumevstime_ = p;
  }
  return functionvolumevstime_;
}
inline ::pulse::cdm::bind::FunctionData* FunctionVolumeVsTimeData::mutable_functionvolumevstime() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.FunctionVolumeVsTimeData.FunctionVolumeVsTime)
  return _internal_mutable_functionvolumevstime();
}
inline void FunctionVolumeVsTimeData::set_allocated_functionvolumevstime(::pulse::cdm::bind::FunctionData* functionvolumevstime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete functionvolumevstime_;
  }
  if (functionvolumevstime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      functionvolumevstime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, functionvolumevstime, submessage_arena);
    }
    
  } else {
    
  }
  functionvolumevstime_ = functionvolumevstime;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.FunctionVolumeVsTimeData.FunctionVolumeVsTime)
}

// -------------------------------------------------------------------

// FunctionElectricPotentialVsTimeData

// .pulse.cdm.bind.FunctionData FunctionElectricPotentialVsTime = 1;
inline bool FunctionElectricPotentialVsTimeData::_internal_has_functionelectricpotentialvstime() const {
  return this != internal_default_instance() && functionelectricpotentialvstime_ != nullptr;
}
inline bool FunctionElectricPotentialVsTimeData::has_functionelectricpotentialvstime() const {
  return _internal_has_functionelectricpotentialvstime();
}
inline void FunctionElectricPotentialVsTimeData::clear_functionelectricpotentialvstime() {
  if (GetArenaNoVirtual() == nullptr && functionelectricpotentialvstime_ != nullptr) {
    delete functionelectricpotentialvstime_;
  }
  functionelectricpotentialvstime_ = nullptr;
}
inline const ::pulse::cdm::bind::FunctionData& FunctionElectricPotentialVsTimeData::_internal_functionelectricpotentialvstime() const {
  const ::pulse::cdm::bind::FunctionData* p = functionelectricpotentialvstime_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::FunctionData*>(
      &::pulse::cdm::bind::_FunctionData_default_instance_);
}
inline const ::pulse::cdm::bind::FunctionData& FunctionElectricPotentialVsTimeData::functionelectricpotentialvstime() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.FunctionElectricPotentialVsTimeData.FunctionElectricPotentialVsTime)
  return _internal_functionelectricpotentialvstime();
}
inline ::pulse::cdm::bind::FunctionData* FunctionElectricPotentialVsTimeData::release_functionelectricpotentialvstime() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.FunctionElectricPotentialVsTimeData.FunctionElectricPotentialVsTime)
  
  ::pulse::cdm::bind::FunctionData* temp = functionelectricpotentialvstime_;
  functionelectricpotentialvstime_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::FunctionData* FunctionElectricPotentialVsTimeData::_internal_mutable_functionelectricpotentialvstime() {
  
  if (functionelectricpotentialvstime_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::FunctionData>(GetArenaNoVirtual());
    functionelectricpotentialvstime_ = p;
  }
  return functionelectricpotentialvstime_;
}
inline ::pulse::cdm::bind::FunctionData* FunctionElectricPotentialVsTimeData::mutable_functionelectricpotentialvstime() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.FunctionElectricPotentialVsTimeData.FunctionElectricPotentialVsTime)
  return _internal_mutable_functionelectricpotentialvstime();
}
inline void FunctionElectricPotentialVsTimeData::set_allocated_functionelectricpotentialvstime(::pulse::cdm::bind::FunctionData* functionelectricpotentialvstime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete functionelectricpotentialvstime_;
  }
  if (functionelectricpotentialvstime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      functionelectricpotentialvstime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, functionelectricpotentialvstime, submessage_arena);
    }
    
  } else {
    
  }
  functionelectricpotentialvstime_ = functionelectricpotentialvstime;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.FunctionElectricPotentialVsTimeData.FunctionElectricPotentialVsTime)
}

// -------------------------------------------------------------------

// HistogramData

// .pulse.cdm.bind.FunctionData Histogram = 1;
inline bool HistogramData::_internal_has_histogram() const {
  return this != internal_default_instance() && histogram_ != nullptr;
}
inline bool HistogramData::has_histogram() const {
  return _internal_has_histogram();
}
inline void HistogramData::clear_histogram() {
  if (GetArenaNoVirtual() == nullptr && histogram_ != nullptr) {
    delete histogram_;
  }
  histogram_ = nullptr;
}
inline const ::pulse::cdm::bind::FunctionData& HistogramData::_internal_histogram() const {
  const ::pulse::cdm::bind::FunctionData* p = histogram_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::FunctionData*>(
      &::pulse::cdm::bind::_FunctionData_default_instance_);
}
inline const ::pulse::cdm::bind::FunctionData& HistogramData::histogram() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.HistogramData.Histogram)
  return _internal_histogram();
}
inline ::pulse::cdm::bind::FunctionData* HistogramData::release_histogram() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.HistogramData.Histogram)
  
  ::pulse::cdm::bind::FunctionData* temp = histogram_;
  histogram_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::FunctionData* HistogramData::_internal_mutable_histogram() {
  
  if (histogram_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::FunctionData>(GetArenaNoVirtual());
    histogram_ = p;
  }
  return histogram_;
}
inline ::pulse::cdm::bind::FunctionData* HistogramData::mutable_histogram() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.HistogramData.Histogram)
  return _internal_mutable_histogram();
}
inline void HistogramData::set_allocated_histogram(::pulse::cdm::bind::FunctionData* histogram) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete histogram_;
  }
  if (histogram) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      histogram = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, histogram, submessage_arena);
    }
    
  } else {
    
  }
  histogram_ = histogram;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.HistogramData.Histogram)
}

// -------------------------------------------------------------------

// HistogramFractionVsLengthData

// .pulse.cdm.bind.HistogramData HistogramFractionVsLength = 1;
inline bool HistogramFractionVsLengthData::_internal_has_histogramfractionvslength() const {
  return this != internal_default_instance() && histogramfractionvslength_ != nullptr;
}
inline bool HistogramFractionVsLengthData::has_histogramfractionvslength() const {
  return _internal_has_histogramfractionvslength();
}
inline void HistogramFractionVsLengthData::clear_histogramfractionvslength() {
  if (GetArenaNoVirtual() == nullptr && histogramfractionvslength_ != nullptr) {
    delete histogramfractionvslength_;
  }
  histogramfractionvslength_ = nullptr;
}
inline const ::pulse::cdm::bind::HistogramData& HistogramFractionVsLengthData::_internal_histogramfractionvslength() const {
  const ::pulse::cdm::bind::HistogramData* p = histogramfractionvslength_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::HistogramData*>(
      &::pulse::cdm::bind::_HistogramData_default_instance_);
}
inline const ::pulse::cdm::bind::HistogramData& HistogramFractionVsLengthData::histogramfractionvslength() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.HistogramFractionVsLengthData.HistogramFractionVsLength)
  return _internal_histogramfractionvslength();
}
inline ::pulse::cdm::bind::HistogramData* HistogramFractionVsLengthData::release_histogramfractionvslength() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.HistogramFractionVsLengthData.HistogramFractionVsLength)
  
  ::pulse::cdm::bind::HistogramData* temp = histogramfractionvslength_;
  histogramfractionvslength_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::HistogramData* HistogramFractionVsLengthData::_internal_mutable_histogramfractionvslength() {
  
  if (histogramfractionvslength_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::HistogramData>(GetArenaNoVirtual());
    histogramfractionvslength_ = p;
  }
  return histogramfractionvslength_;
}
inline ::pulse::cdm::bind::HistogramData* HistogramFractionVsLengthData::mutable_histogramfractionvslength() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.HistogramFractionVsLengthData.HistogramFractionVsLength)
  return _internal_mutable_histogramfractionvslength();
}
inline void HistogramFractionVsLengthData::set_allocated_histogramfractionvslength(::pulse::cdm::bind::HistogramData* histogramfractionvslength) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete histogramfractionvslength_;
  }
  if (histogramfractionvslength) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      histogramfractionvslength = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, histogramfractionvslength, submessage_arena);
    }
    
  } else {
    
  }
  histogramfractionvslength_ = histogramfractionvslength;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.HistogramFractionVsLengthData.HistogramFractionVsLength)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bind
}  // namespace cdm
}  // namespace pulse

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fProperties_2eproto
