// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/Scenario.proto

#include "pulse/cdm/bind/Scenario.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEngine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_AnyActionData_pulse_2fcdm_2fbind_2fEngine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEngine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DataRequestManagerData_pulse_2fcdm_2fbind_2fEngine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEngine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EngineInitializationData_pulse_2fcdm_2fbind_2fEngine_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class ScenarioDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScenarioData> _instance;
} _ScenarioData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
static void InitDefaultsscc_info_ScenarioData_pulse_2fcdm_2fbind_2fScenario_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScenarioData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScenarioData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pulse::cdm::bind::ScenarioData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ScenarioData_pulse_2fcdm_2fbind_2fScenario_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ScenarioData_pulse_2fcdm_2fbind_2fScenario_2eproto}, {
      &scc_info_EngineInitializationData_pulse_2fcdm_2fbind_2fEngine_2eproto.base,
      &scc_info_DataRequestManagerData_pulse_2fcdm_2fbind_2fEngine_2eproto.base,
      &scc_info_AnyActionData_pulse_2fcdm_2fbind_2fEngine_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pulse_2fcdm_2fbind_2fScenario_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pulse_2fcdm_2fbind_2fScenario_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pulse_2fcdm_2fbind_2fScenario_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pulse_2fcdm_2fbind_2fScenario_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScenarioData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScenarioData, name_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScenarioData, description_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScenarioData, starttype_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScenarioData, datarequestmanager_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScenarioData, anyaction_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pulse::cdm::bind::ScenarioData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScenarioData_default_instance_),
};

const char descriptor_table_protodef_pulse_2fcdm_2fbind_2fScenario_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035pulse/cdm/bind/Scenario.proto\022\016pulse.c"
  "dm.bind\032\033pulse/cdm/bind/Engine.proto\"\344\001\n"
  "\014ScenarioData\022\014\n\004Name\030\001 \001(\t\022\023\n\013Descripti"
  "on\030\002 \001(\t\022;\n\tStartType\030\003 \001(\0132(.pulse.cdm."
  "bind.EngineInitializationData\022B\n\022DataReq"
  "uestManager\030\004 \001(\0132&.pulse.cdm.bind.DataR"
  "equestManagerData\0220\n\tAnyAction\030\005 \003(\0132\035.p"
  "ulse.cdm.bind.AnyActionDataB#\n\016pulse.cdm"
  ".bindH\001\252\002\016pulse.cdm.bindb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pulse_2fcdm_2fbind_2fScenario_2eproto_deps[1] = {
  &::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pulse_2fcdm_2fbind_2fScenario_2eproto_sccs[1] = {
  &scc_info_ScenarioData_pulse_2fcdm_2fbind_2fScenario_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pulse_2fcdm_2fbind_2fScenario_2eproto_once;
static bool descriptor_table_pulse_2fcdm_2fbind_2fScenario_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fScenario_2eproto = {
  &descriptor_table_pulse_2fcdm_2fbind_2fScenario_2eproto_initialized, descriptor_table_protodef_pulse_2fcdm_2fbind_2fScenario_2eproto, "pulse/cdm/bind/Scenario.proto", 352,
  &descriptor_table_pulse_2fcdm_2fbind_2fScenario_2eproto_once, descriptor_table_pulse_2fcdm_2fbind_2fScenario_2eproto_sccs, descriptor_table_pulse_2fcdm_2fbind_2fScenario_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_pulse_2fcdm_2fbind_2fScenario_2eproto::offsets,
  file_level_metadata_pulse_2fcdm_2fbind_2fScenario_2eproto, 1, file_level_enum_descriptors_pulse_2fcdm_2fbind_2fScenario_2eproto, file_level_service_descriptors_pulse_2fcdm_2fbind_2fScenario_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pulse_2fcdm_2fbind_2fScenario_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fScenario_2eproto), true);
namespace pulse {
namespace cdm {
namespace bind {

// ===================================================================

void ScenarioData::InitAsDefaultInstance() {
  ::pulse::cdm::bind::_ScenarioData_default_instance_._instance.get_mutable()->starttype_ = const_cast< ::pulse::cdm::bind::EngineInitializationData*>(
      ::pulse::cdm::bind::EngineInitializationData::internal_default_instance());
  ::pulse::cdm::bind::_ScenarioData_default_instance_._instance.get_mutable()->datarequestmanager_ = const_cast< ::pulse::cdm::bind::DataRequestManagerData*>(
      ::pulse::cdm::bind::DataRequestManagerData::internal_default_instance());
}
class ScenarioData::_Internal {
 public:
  static const ::pulse::cdm::bind::EngineInitializationData& starttype(const ScenarioData* msg);
  static const ::pulse::cdm::bind::DataRequestManagerData& datarequestmanager(const ScenarioData* msg);
};

const ::pulse::cdm::bind::EngineInitializationData&
ScenarioData::_Internal::starttype(const ScenarioData* msg) {
  return *msg->starttype_;
}
const ::pulse::cdm::bind::DataRequestManagerData&
ScenarioData::_Internal::datarequestmanager(const ScenarioData* msg) {
  return *msg->datarequestmanager_;
}
void ScenarioData::clear_starttype() {
  if (GetArenaNoVirtual() == nullptr && starttype_ != nullptr) {
    delete starttype_;
  }
  starttype_ = nullptr;
}
void ScenarioData::clear_datarequestmanager() {
  if (GetArenaNoVirtual() == nullptr && datarequestmanager_ != nullptr) {
    delete datarequestmanager_;
  }
  datarequestmanager_ = nullptr;
}
void ScenarioData::clear_anyaction() {
  anyaction_.Clear();
}
ScenarioData::ScenarioData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pulse.cdm.bind.ScenarioData)
}
ScenarioData::ScenarioData(const ScenarioData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      anyaction_(from.anyaction_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from._internal_has_starttype()) {
    starttype_ = new ::pulse::cdm::bind::EngineInitializationData(*from.starttype_);
  } else {
    starttype_ = nullptr;
  }
  if (from._internal_has_datarequestmanager()) {
    datarequestmanager_ = new ::pulse::cdm::bind::DataRequestManagerData(*from.datarequestmanager_);
  } else {
    datarequestmanager_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScenarioData)
}

void ScenarioData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScenarioData_pulse_2fcdm_2fbind_2fScenario_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&starttype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datarequestmanager_) -
      reinterpret_cast<char*>(&starttype_)) + sizeof(datarequestmanager_));
}

ScenarioData::~ScenarioData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScenarioData)
  SharedDtor();
}

void ScenarioData::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete starttype_;
  if (this != internal_default_instance()) delete datarequestmanager_;
}

void ScenarioData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScenarioData& ScenarioData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScenarioData_pulse_2fcdm_2fbind_2fScenario_2eproto.base);
  return *internal_default_instance();
}


void ScenarioData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScenarioData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  anyaction_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && starttype_ != nullptr) {
    delete starttype_;
  }
  starttype_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && datarequestmanager_ != nullptr) {
    delete datarequestmanager_;
  }
  datarequestmanager_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ScenarioData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "pulse.cdm.bind.ScenarioData.Name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_description(), ptr, ctx, "pulse.cdm.bind.ScenarioData.Description");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.EngineInitializationData StartType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_starttype(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.DataRequestManagerData DataRequestManager = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_datarequestmanager(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pulse.cdm.bind.AnyActionData AnyAction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_anyaction(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScenarioData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScenarioData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.ScenarioData.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string Description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.ScenarioData.Description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // .pulse.cdm.bind.EngineInitializationData StartType = 3;
  if (this->has_starttype()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::starttype(this), target, stream);
  }

  // .pulse.cdm.bind.DataRequestManagerData DataRequestManager = 4;
  if (this->has_datarequestmanager()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::datarequestmanager(this), target, stream);
  }

  // repeated .pulse.cdm.bind.AnyActionData AnyAction = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_anyaction_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(5, this->_internal_anyaction(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScenarioData)
  return target;
}

size_t ScenarioData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScenarioData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pulse.cdm.bind.AnyActionData AnyAction = 5;
  total_size += 1UL * this->_internal_anyaction_size();
  for (const auto& msg : this->anyaction_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string Description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .pulse.cdm.bind.EngineInitializationData StartType = 3;
  if (this->has_starttype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *starttype_);
  }

  // .pulse.cdm.bind.DataRequestManagerData DataRequestManager = 4;
  if (this->has_datarequestmanager()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *datarequestmanager_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScenarioData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScenarioData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScenarioData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScenarioData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScenarioData)
    MergeFrom(*source);
  }
}

void ScenarioData::MergeFrom(const ScenarioData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScenarioData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  anyaction_.MergeFrom(from.anyaction_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_starttype()) {
    _internal_mutable_starttype()->::pulse::cdm::bind::EngineInitializationData::MergeFrom(from._internal_starttype());
  }
  if (from.has_datarequestmanager()) {
    _internal_mutable_datarequestmanager()->::pulse::cdm::bind::DataRequestManagerData::MergeFrom(from._internal_datarequestmanager());
  }
}

void ScenarioData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScenarioData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioData::CopyFrom(const ScenarioData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScenarioData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioData::IsInitialized() const {
  return true;
}

void ScenarioData::InternalSwap(ScenarioData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  anyaction_.InternalSwap(&other->anyaction_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(starttype_, other->starttype_);
  swap(datarequestmanager_, other->datarequestmanager_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScenarioData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScenarioData >(Arena* arena) {
  return Arena::CreateInternal< ::pulse::cdm::bind::ScenarioData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
