// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/Scenario.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fScenario_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fScenario_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "pulse/cdm/bind/Engine.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fScenario_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pulse_2fcdm_2fbind_2fScenario_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fScenario_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class ScenarioData;
class ScenarioDataDefaultTypeInternal;
extern ScenarioDataDefaultTypeInternal _ScenarioData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> ::pulse::cdm::bind::ScenarioData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScenarioData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pulse {
namespace cdm {
namespace bind {

// ===================================================================

class ScenarioData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScenarioData) */ {
 public:
  ScenarioData();
  virtual ~ScenarioData();

  ScenarioData(const ScenarioData& from);
  ScenarioData(ScenarioData&& from) noexcept
    : ScenarioData() {
    *this = ::std::move(from);
  }

  inline ScenarioData& operator=(const ScenarioData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScenarioData& operator=(ScenarioData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScenarioData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScenarioData* internal_default_instance() {
    return reinterpret_cast<const ScenarioData*>(
               &_ScenarioData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ScenarioData& a, ScenarioData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScenarioData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScenarioData* New() const final {
    return CreateMaybeMessage<ScenarioData>(nullptr);
  }

  ScenarioData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScenarioData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScenarioData& from);
  void MergeFrom(const ScenarioData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScenarioData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScenarioData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fScenario_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fScenario_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnyActionFieldNumber = 5,
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kStartTypeFieldNumber = 3,
    kDataRequestManagerFieldNumber = 4,
  };
  // repeated .pulse.cdm.bind.AnyActionData AnyAction = 5;
  int anyaction_size() const;
  private:
  int _internal_anyaction_size() const;
  public:
  void clear_anyaction();
  ::pulse::cdm::bind::AnyActionData* mutable_anyaction(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::AnyActionData >*
      mutable_anyaction();
  private:
  const ::pulse::cdm::bind::AnyActionData& _internal_anyaction(int index) const;
  ::pulse::cdm::bind::AnyActionData* _internal_add_anyaction();
  public:
  const ::pulse::cdm::bind::AnyActionData& anyaction(int index) const;
  ::pulse::cdm::bind::AnyActionData* add_anyaction();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::AnyActionData >&
      anyaction() const;

  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string Description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .pulse.cdm.bind.EngineInitializationData StartType = 3;
  bool has_starttype() const;
  private:
  bool _internal_has_starttype() const;
  public:
  void clear_starttype();
  const ::pulse::cdm::bind::EngineInitializationData& starttype() const;
  ::pulse::cdm::bind::EngineInitializationData* release_starttype();
  ::pulse::cdm::bind::EngineInitializationData* mutable_starttype();
  void set_allocated_starttype(::pulse::cdm::bind::EngineInitializationData* starttype);
  private:
  const ::pulse::cdm::bind::EngineInitializationData& _internal_starttype() const;
  ::pulse::cdm::bind::EngineInitializationData* _internal_mutable_starttype();
  public:

  // .pulse.cdm.bind.DataRequestManagerData DataRequestManager = 4;
  bool has_datarequestmanager() const;
  private:
  bool _internal_has_datarequestmanager() const;
  public:
  void clear_datarequestmanager();
  const ::pulse::cdm::bind::DataRequestManagerData& datarequestmanager() const;
  ::pulse::cdm::bind::DataRequestManagerData* release_datarequestmanager();
  ::pulse::cdm::bind::DataRequestManagerData* mutable_datarequestmanager();
  void set_allocated_datarequestmanager(::pulse::cdm::bind::DataRequestManagerData* datarequestmanager);
  private:
  const ::pulse::cdm::bind::DataRequestManagerData& _internal_datarequestmanager() const;
  ::pulse::cdm::bind::DataRequestManagerData* _internal_mutable_datarequestmanager();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScenarioData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::AnyActionData > anyaction_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::pulse::cdm::bind::EngineInitializationData* starttype_;
  ::pulse::cdm::bind::DataRequestManagerData* datarequestmanager_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fScenario_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ScenarioData

// string Name = 1;
inline void ScenarioData::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ScenarioData::name() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScenarioData.Name)
  return _internal_name();
}
inline void ScenarioData::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ScenarioData.Name)
}
inline std::string* ScenarioData::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScenarioData.Name)
  return _internal_mutable_name();
}
inline const std::string& ScenarioData::_internal_name() const {
  return name_.GetNoArena();
}
inline void ScenarioData::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ScenarioData::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.ScenarioData.Name)
}
inline void ScenarioData::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.ScenarioData.Name)
}
inline void ScenarioData::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.ScenarioData.Name)
}
inline std::string* ScenarioData::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ScenarioData::release_name() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScenarioData.Name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ScenarioData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScenarioData.Name)
}

// string Description = 2;
inline void ScenarioData::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ScenarioData::description() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScenarioData.Description)
  return _internal_description();
}
inline void ScenarioData::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ScenarioData.Description)
}
inline std::string* ScenarioData::mutable_description() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScenarioData.Description)
  return _internal_mutable_description();
}
inline const std::string& ScenarioData::_internal_description() const {
  return description_.GetNoArena();
}
inline void ScenarioData::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ScenarioData::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.ScenarioData.Description)
}
inline void ScenarioData::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.ScenarioData.Description)
}
inline void ScenarioData::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.ScenarioData.Description)
}
inline std::string* ScenarioData::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ScenarioData::release_description() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScenarioData.Description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ScenarioData::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScenarioData.Description)
}

// .pulse.cdm.bind.EngineInitializationData StartType = 3;
inline bool ScenarioData::_internal_has_starttype() const {
  return this != internal_default_instance() && starttype_ != nullptr;
}
inline bool ScenarioData::has_starttype() const {
  return _internal_has_starttype();
}
inline const ::pulse::cdm::bind::EngineInitializationData& ScenarioData::_internal_starttype() const {
  const ::pulse::cdm::bind::EngineInitializationData* p = starttype_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::EngineInitializationData*>(
      &::pulse::cdm::bind::_EngineInitializationData_default_instance_);
}
inline const ::pulse::cdm::bind::EngineInitializationData& ScenarioData::starttype() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScenarioData.StartType)
  return _internal_starttype();
}
inline ::pulse::cdm::bind::EngineInitializationData* ScenarioData::release_starttype() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScenarioData.StartType)
  
  ::pulse::cdm::bind::EngineInitializationData* temp = starttype_;
  starttype_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::EngineInitializationData* ScenarioData::_internal_mutable_starttype() {
  
  if (starttype_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::EngineInitializationData>(GetArenaNoVirtual());
    starttype_ = p;
  }
  return starttype_;
}
inline ::pulse::cdm::bind::EngineInitializationData* ScenarioData::mutable_starttype() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScenarioData.StartType)
  return _internal_mutable_starttype();
}
inline void ScenarioData::set_allocated_starttype(::pulse::cdm::bind::EngineInitializationData* starttype) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(starttype_);
  }
  if (starttype) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      starttype = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, starttype, submessage_arena);
    }
    
  } else {
    
  }
  starttype_ = starttype;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScenarioData.StartType)
}

// .pulse.cdm.bind.DataRequestManagerData DataRequestManager = 4;
inline bool ScenarioData::_internal_has_datarequestmanager() const {
  return this != internal_default_instance() && datarequestmanager_ != nullptr;
}
inline bool ScenarioData::has_datarequestmanager() const {
  return _internal_has_datarequestmanager();
}
inline const ::pulse::cdm::bind::DataRequestManagerData& ScenarioData::_internal_datarequestmanager() const {
  const ::pulse::cdm::bind::DataRequestManagerData* p = datarequestmanager_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::DataRequestManagerData*>(
      &::pulse::cdm::bind::_DataRequestManagerData_default_instance_);
}
inline const ::pulse::cdm::bind::DataRequestManagerData& ScenarioData::datarequestmanager() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScenarioData.DataRequestManager)
  return _internal_datarequestmanager();
}
inline ::pulse::cdm::bind::DataRequestManagerData* ScenarioData::release_datarequestmanager() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScenarioData.DataRequestManager)
  
  ::pulse::cdm::bind::DataRequestManagerData* temp = datarequestmanager_;
  datarequestmanager_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::DataRequestManagerData* ScenarioData::_internal_mutable_datarequestmanager() {
  
  if (datarequestmanager_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::DataRequestManagerData>(GetArenaNoVirtual());
    datarequestmanager_ = p;
  }
  return datarequestmanager_;
}
inline ::pulse::cdm::bind::DataRequestManagerData* ScenarioData::mutable_datarequestmanager() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScenarioData.DataRequestManager)
  return _internal_mutable_datarequestmanager();
}
inline void ScenarioData::set_allocated_datarequestmanager(::pulse::cdm::bind::DataRequestManagerData* datarequestmanager) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(datarequestmanager_);
  }
  if (datarequestmanager) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      datarequestmanager = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, datarequestmanager, submessage_arena);
    }
    
  } else {
    
  }
  datarequestmanager_ = datarequestmanager;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScenarioData.DataRequestManager)
}

// repeated .pulse.cdm.bind.AnyActionData AnyAction = 5;
inline int ScenarioData::_internal_anyaction_size() const {
  return anyaction_.size();
}
inline int ScenarioData::anyaction_size() const {
  return _internal_anyaction_size();
}
inline ::pulse::cdm::bind::AnyActionData* ScenarioData::mutable_anyaction(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScenarioData.AnyAction)
  return anyaction_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::AnyActionData >*
ScenarioData::mutable_anyaction() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.ScenarioData.AnyAction)
  return &anyaction_;
}
inline const ::pulse::cdm::bind::AnyActionData& ScenarioData::_internal_anyaction(int index) const {
  return anyaction_.Get(index);
}
inline const ::pulse::cdm::bind::AnyActionData& ScenarioData::anyaction(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScenarioData.AnyAction)
  return _internal_anyaction(index);
}
inline ::pulse::cdm::bind::AnyActionData* ScenarioData::_internal_add_anyaction() {
  return anyaction_.Add();
}
inline ::pulse::cdm::bind::AnyActionData* ScenarioData::add_anyaction() {
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.ScenarioData.AnyAction)
  return _internal_add_anyaction();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::AnyActionData >&
ScenarioData::anyaction() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.ScenarioData.AnyAction)
  return anyaction_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace bind
}  // namespace cdm
}  // namespace pulse

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fScenario_2eproto
