// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/engine/bind/PulseEquipment.proto

#include "pulse/engine/bind/PulseEquipment.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_AnesthesiaMachineData_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ElectroCardioGramData_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ElectroCardioGramWaveformListData_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fInhaler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_InhalerData_pulse_2fcdm_2fbind_2fInhaler_2eproto;
namespace pulse {
namespace engine {
namespace bind {
class AnesthesiaMachineDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnesthesiaMachineData> _instance;
} _AnesthesiaMachineData_default_instance_;
class ElectroCardioGramDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ElectroCardioGramData> _instance;
} _ElectroCardioGramData_default_instance_;
class InhalerDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InhalerData> _instance;
} _InhalerData_default_instance_;
}  // namespace bind
}  // namespace engine
}  // namespace pulse
static void InitDefaultsscc_info_AnesthesiaMachineData_pulse_2fengine_2fbind_2fPulseEquipment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::engine::bind::_AnesthesiaMachineData_default_instance_;
    new (ptr) ::pulse::engine::bind::AnesthesiaMachineData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pulse::engine::bind::AnesthesiaMachineData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AnesthesiaMachineData_pulse_2fengine_2fbind_2fPulseEquipment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AnesthesiaMachineData_pulse_2fengine_2fbind_2fPulseEquipment_2eproto}, {
      &scc_info_AnesthesiaMachineData_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto.base,}};

static void InitDefaultsscc_info_ElectroCardioGramData_pulse_2fengine_2fbind_2fPulseEquipment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::engine::bind::_ElectroCardioGramData_default_instance_;
    new (ptr) ::pulse::engine::bind::ElectroCardioGramData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pulse::engine::bind::ElectroCardioGramData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ElectroCardioGramData_pulse_2fengine_2fbind_2fPulseEquipment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ElectroCardioGramData_pulse_2fengine_2fbind_2fPulseEquipment_2eproto}, {
      &scc_info_ElectroCardioGramData_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto.base,
      &scc_info_ElectroCardioGramWaveformListData_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto.base,}};

static void InitDefaultsscc_info_InhalerData_pulse_2fengine_2fbind_2fPulseEquipment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::engine::bind::_InhalerData_default_instance_;
    new (ptr) ::pulse::engine::bind::InhalerData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pulse::engine::bind::InhalerData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InhalerData_pulse_2fengine_2fbind_2fPulseEquipment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InhalerData_pulse_2fengine_2fbind_2fPulseEquipment_2eproto}, {
      &scc_info_InhalerData_pulse_2fcdm_2fbind_2fInhaler_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pulse_2fengine_2fbind_2fPulseEquipment_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pulse_2fengine_2fbind_2fPulseEquipment_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pulse_2fengine_2fbind_2fPulseEquipment_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pulse_2fengine_2fbind_2fPulseEquipment_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::engine::bind::AnesthesiaMachineData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::engine::bind::AnesthesiaMachineData, common_),
  PROTOBUF_FIELD_OFFSET(::pulse::engine::bind::AnesthesiaMachineData, inhaling_),
  PROTOBUF_FIELD_OFFSET(::pulse::engine::bind::AnesthesiaMachineData, currentbreathingcycletime_s_),
  PROTOBUF_FIELD_OFFSET(::pulse::engine::bind::AnesthesiaMachineData, inspirationtime_s_),
  PROTOBUF_FIELD_OFFSET(::pulse::engine::bind::AnesthesiaMachineData, oxygeninletvolumefraction_),
  PROTOBUF_FIELD_OFFSET(::pulse::engine::bind::AnesthesiaMachineData, totalbreathingcycletime_s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::engine::bind::ElectroCardioGramData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::engine::bind::ElectroCardioGramData, common_),
  PROTOBUF_FIELD_OFFSET(::pulse::engine::bind::ElectroCardioGramData, heartrythmtime_s_),
  PROTOBUF_FIELD_OFFSET(::pulse::engine::bind::ElectroCardioGramData, heartrythmperiod_s_),
  PROTOBUF_FIELD_OFFSET(::pulse::engine::bind::ElectroCardioGramData, waveforms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::engine::bind::InhalerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::engine::bind::InhalerData, common_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pulse::engine::bind::AnesthesiaMachineData)},
  { 11, -1, sizeof(::pulse::engine::bind::ElectroCardioGramData)},
  { 20, -1, sizeof(::pulse::engine::bind::InhalerData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::engine::bind::_AnesthesiaMachineData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::engine::bind::_ElectroCardioGramData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::engine::bind::_InhalerData_default_instance_),
};

const char descriptor_table_protodef_pulse_2fengine_2fbind_2fPulseEquipment_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&pulse/engine/bind/PulseEquipment.proto"
  "\022\021pulse.engine.bind\032&pulse/cdm/bind/Anes"
  "thesiaMachine.proto\032&pulse/cdm/bind/Elec"
  "troCardioGram.proto\032\034pulse/cdm/bind/Inha"
  "ler.proto\"\346\001\n\025AnesthesiaMachineData\0225\n\006C"
  "ommon\030\001 \001(\0132%.pulse.cdm.bind.AnesthesiaM"
  "achineData\022\020\n\010Inhaling\030\002 \001(\010\022#\n\033CurrentB"
  "reathingCycleTime_s\030\003 \001(\001\022\031\n\021Inspiration"
  "Time_s\030\004 \001(\001\022!\n\031OxygenInletVolumeFractio"
  "n\030\005 \001(\001\022!\n\031TotalBreathingCycleTime_s\030\006 \001"
  "(\001\"\312\001\n\025ElectroCardioGramData\0225\n\006Common\030\001"
  " \001(\0132%.pulse.cdm.bind.ElectroCardioGramD"
  "ata\022\030\n\020HeartRythmTime_s\030\002 \001(\001\022\032\n\022HeartRy"
  "thmPeriod_s\030\003 \001(\001\022D\n\tWaveforms\030\004 \001(\01321.p"
  "ulse.cdm.bind.ElectroCardioGramWaveformL"
  "istData\":\n\013InhalerData\022+\n\006Common\030\001 \001(\0132\033"
  ".pulse.cdm.bind.InhalerDataB)\n\021pulse.eng"
  "ine.bindH\001\252\002\021pulse.engine.bindb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pulse_2fengine_2fbind_2fPulseEquipment_2eproto_deps[3] = {
  &::descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fInhaler_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pulse_2fengine_2fbind_2fPulseEquipment_2eproto_sccs[3] = {
  &scc_info_AnesthesiaMachineData_pulse_2fengine_2fbind_2fPulseEquipment_2eproto.base,
  &scc_info_ElectroCardioGramData_pulse_2fengine_2fbind_2fPulseEquipment_2eproto.base,
  &scc_info_InhalerData_pulse_2fengine_2fbind_2fPulseEquipment_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pulse_2fengine_2fbind_2fPulseEquipment_2eproto_once;
static bool descriptor_table_pulse_2fengine_2fbind_2fPulseEquipment_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fengine_2fbind_2fPulseEquipment_2eproto = {
  &descriptor_table_pulse_2fengine_2fbind_2fPulseEquipment_2eproto_initialized, descriptor_table_protodef_pulse_2fengine_2fbind_2fPulseEquipment_2eproto, "pulse/engine/bind/PulseEquipment.proto", 718,
  &descriptor_table_pulse_2fengine_2fbind_2fPulseEquipment_2eproto_once, descriptor_table_pulse_2fengine_2fbind_2fPulseEquipment_2eproto_sccs, descriptor_table_pulse_2fengine_2fbind_2fPulseEquipment_2eproto_deps, 3, 3,
  schemas, file_default_instances, TableStruct_pulse_2fengine_2fbind_2fPulseEquipment_2eproto::offsets,
  file_level_metadata_pulse_2fengine_2fbind_2fPulseEquipment_2eproto, 3, file_level_enum_descriptors_pulse_2fengine_2fbind_2fPulseEquipment_2eproto, file_level_service_descriptors_pulse_2fengine_2fbind_2fPulseEquipment_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pulse_2fengine_2fbind_2fPulseEquipment_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pulse_2fengine_2fbind_2fPulseEquipment_2eproto), true);
namespace pulse {
namespace engine {
namespace bind {

// ===================================================================

void AnesthesiaMachineData::InitAsDefaultInstance() {
  ::pulse::engine::bind::_AnesthesiaMachineData_default_instance_._instance.get_mutable()->common_ = const_cast< ::pulse::cdm::bind::AnesthesiaMachineData*>(
      ::pulse::cdm::bind::AnesthesiaMachineData::internal_default_instance());
}
class AnesthesiaMachineData::_Internal {
 public:
  static const ::pulse::cdm::bind::AnesthesiaMachineData& common(const AnesthesiaMachineData* msg);
};

const ::pulse::cdm::bind::AnesthesiaMachineData&
AnesthesiaMachineData::_Internal::common(const AnesthesiaMachineData* msg) {
  return *msg->common_;
}
void AnesthesiaMachineData::clear_common() {
  if (GetArenaNoVirtual() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
AnesthesiaMachineData::AnesthesiaMachineData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pulse.engine.bind.AnesthesiaMachineData)
}
AnesthesiaMachineData::AnesthesiaMachineData(const AnesthesiaMachineData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::pulse::cdm::bind::AnesthesiaMachineData(*from.common_);
  } else {
    common_ = nullptr;
  }
  ::memcpy(&currentbreathingcycletime_s_, &from.currentbreathingcycletime_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&inhaling_) -
    reinterpret_cast<char*>(&currentbreathingcycletime_s_)) + sizeof(inhaling_));
  // @@protoc_insertion_point(copy_constructor:pulse.engine.bind.AnesthesiaMachineData)
}

void AnesthesiaMachineData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnesthesiaMachineData_pulse_2fengine_2fbind_2fPulseEquipment_2eproto.base);
  ::memset(&common_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inhaling_) -
      reinterpret_cast<char*>(&common_)) + sizeof(inhaling_));
}

AnesthesiaMachineData::~AnesthesiaMachineData() {
  // @@protoc_insertion_point(destructor:pulse.engine.bind.AnesthesiaMachineData)
  SharedDtor();
}

void AnesthesiaMachineData::SharedDtor() {
  if (this != internal_default_instance()) delete common_;
}

void AnesthesiaMachineData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnesthesiaMachineData& AnesthesiaMachineData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnesthesiaMachineData_pulse_2fengine_2fbind_2fPulseEquipment_2eproto.base);
  return *internal_default_instance();
}


void AnesthesiaMachineData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.engine.bind.AnesthesiaMachineData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  ::memset(&currentbreathingcycletime_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inhaling_) -
      reinterpret_cast<char*>(&currentbreathingcycletime_s_)) + sizeof(inhaling_));
  _internal_metadata_.Clear();
}

const char* AnesthesiaMachineData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.AnesthesiaMachineData Common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Inhaling = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          inhaling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double CurrentBreathingCycleTime_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          currentbreathingcycletime_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double InspirationTime_s = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          inspirationtime_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double OxygenInletVolumeFraction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          oxygeninletvolumefraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double TotalBreathingCycleTime_s = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          totalbreathingcycletime_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnesthesiaMachineData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.engine.bind.AnesthesiaMachineData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.AnesthesiaMachineData Common = 1;
  if (this->has_common()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::common(this), target, stream);
  }

  // bool Inhaling = 2;
  if (this->inhaling() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_inhaling(), target);
  }

  // double CurrentBreathingCycleTime_s = 3;
  if (!(this->currentbreathingcycletime_s() <= 0 && this->currentbreathingcycletime_s() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_currentbreathingcycletime_s(), target);
  }

  // double InspirationTime_s = 4;
  if (!(this->inspirationtime_s() <= 0 && this->inspirationtime_s() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_inspirationtime_s(), target);
  }

  // double OxygenInletVolumeFraction = 5;
  if (!(this->oxygeninletvolumefraction() <= 0 && this->oxygeninletvolumefraction() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_oxygeninletvolumefraction(), target);
  }

  // double TotalBreathingCycleTime_s = 6;
  if (!(this->totalbreathingcycletime_s() <= 0 && this->totalbreathingcycletime_s() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_totalbreathingcycletime_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.engine.bind.AnesthesiaMachineData)
  return target;
}

size_t AnesthesiaMachineData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.engine.bind.AnesthesiaMachineData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.AnesthesiaMachineData Common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // double CurrentBreathingCycleTime_s = 3;
  if (!(this->currentbreathingcycletime_s() <= 0 && this->currentbreathingcycletime_s() >= 0)) {
    total_size += 1 + 8;
  }

  // double InspirationTime_s = 4;
  if (!(this->inspirationtime_s() <= 0 && this->inspirationtime_s() >= 0)) {
    total_size += 1 + 8;
  }

  // double OxygenInletVolumeFraction = 5;
  if (!(this->oxygeninletvolumefraction() <= 0 && this->oxygeninletvolumefraction() >= 0)) {
    total_size += 1 + 8;
  }

  // double TotalBreathingCycleTime_s = 6;
  if (!(this->totalbreathingcycletime_s() <= 0 && this->totalbreathingcycletime_s() >= 0)) {
    total_size += 1 + 8;
  }

  // bool Inhaling = 2;
  if (this->inhaling() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnesthesiaMachineData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.engine.bind.AnesthesiaMachineData)
  GOOGLE_DCHECK_NE(&from, this);
  const AnesthesiaMachineData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnesthesiaMachineData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.engine.bind.AnesthesiaMachineData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.engine.bind.AnesthesiaMachineData)
    MergeFrom(*source);
  }
}

void AnesthesiaMachineData::MergeFrom(const AnesthesiaMachineData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.engine.bind.AnesthesiaMachineData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    _internal_mutable_common()->::pulse::cdm::bind::AnesthesiaMachineData::MergeFrom(from._internal_common());
  }
  if (!(from.currentbreathingcycletime_s() <= 0 && from.currentbreathingcycletime_s() >= 0)) {
    _internal_set_currentbreathingcycletime_s(from._internal_currentbreathingcycletime_s());
  }
  if (!(from.inspirationtime_s() <= 0 && from.inspirationtime_s() >= 0)) {
    _internal_set_inspirationtime_s(from._internal_inspirationtime_s());
  }
  if (!(from.oxygeninletvolumefraction() <= 0 && from.oxygeninletvolumefraction() >= 0)) {
    _internal_set_oxygeninletvolumefraction(from._internal_oxygeninletvolumefraction());
  }
  if (!(from.totalbreathingcycletime_s() <= 0 && from.totalbreathingcycletime_s() >= 0)) {
    _internal_set_totalbreathingcycletime_s(from._internal_totalbreathingcycletime_s());
  }
  if (from.inhaling() != 0) {
    _internal_set_inhaling(from._internal_inhaling());
  }
}

void AnesthesiaMachineData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.engine.bind.AnesthesiaMachineData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnesthesiaMachineData::CopyFrom(const AnesthesiaMachineData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.engine.bind.AnesthesiaMachineData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnesthesiaMachineData::IsInitialized() const {
  return true;
}

void AnesthesiaMachineData::InternalSwap(AnesthesiaMachineData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(common_, other->common_);
  swap(currentbreathingcycletime_s_, other->currentbreathingcycletime_s_);
  swap(inspirationtime_s_, other->inspirationtime_s_);
  swap(oxygeninletvolumefraction_, other->oxygeninletvolumefraction_);
  swap(totalbreathingcycletime_s_, other->totalbreathingcycletime_s_);
  swap(inhaling_, other->inhaling_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnesthesiaMachineData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ElectroCardioGramData::InitAsDefaultInstance() {
  ::pulse::engine::bind::_ElectroCardioGramData_default_instance_._instance.get_mutable()->common_ = const_cast< ::pulse::cdm::bind::ElectroCardioGramData*>(
      ::pulse::cdm::bind::ElectroCardioGramData::internal_default_instance());
  ::pulse::engine::bind::_ElectroCardioGramData_default_instance_._instance.get_mutable()->waveforms_ = const_cast< ::pulse::cdm::bind::ElectroCardioGramWaveformListData*>(
      ::pulse::cdm::bind::ElectroCardioGramWaveformListData::internal_default_instance());
}
class ElectroCardioGramData::_Internal {
 public:
  static const ::pulse::cdm::bind::ElectroCardioGramData& common(const ElectroCardioGramData* msg);
  static const ::pulse::cdm::bind::ElectroCardioGramWaveformListData& waveforms(const ElectroCardioGramData* msg);
};

const ::pulse::cdm::bind::ElectroCardioGramData&
ElectroCardioGramData::_Internal::common(const ElectroCardioGramData* msg) {
  return *msg->common_;
}
const ::pulse::cdm::bind::ElectroCardioGramWaveformListData&
ElectroCardioGramData::_Internal::waveforms(const ElectroCardioGramData* msg) {
  return *msg->waveforms_;
}
void ElectroCardioGramData::clear_common() {
  if (GetArenaNoVirtual() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
void ElectroCardioGramData::clear_waveforms() {
  if (GetArenaNoVirtual() == nullptr && waveforms_ != nullptr) {
    delete waveforms_;
  }
  waveforms_ = nullptr;
}
ElectroCardioGramData::ElectroCardioGramData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pulse.engine.bind.ElectroCardioGramData)
}
ElectroCardioGramData::ElectroCardioGramData(const ElectroCardioGramData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::pulse::cdm::bind::ElectroCardioGramData(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_waveforms()) {
    waveforms_ = new ::pulse::cdm::bind::ElectroCardioGramWaveformListData(*from.waveforms_);
  } else {
    waveforms_ = nullptr;
  }
  ::memcpy(&heartrythmtime_s_, &from.heartrythmtime_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&heartrythmperiod_s_) -
    reinterpret_cast<char*>(&heartrythmtime_s_)) + sizeof(heartrythmperiod_s_));
  // @@protoc_insertion_point(copy_constructor:pulse.engine.bind.ElectroCardioGramData)
}

void ElectroCardioGramData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ElectroCardioGramData_pulse_2fengine_2fbind_2fPulseEquipment_2eproto.base);
  ::memset(&common_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heartrythmperiod_s_) -
      reinterpret_cast<char*>(&common_)) + sizeof(heartrythmperiod_s_));
}

ElectroCardioGramData::~ElectroCardioGramData() {
  // @@protoc_insertion_point(destructor:pulse.engine.bind.ElectroCardioGramData)
  SharedDtor();
}

void ElectroCardioGramData::SharedDtor() {
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete waveforms_;
}

void ElectroCardioGramData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ElectroCardioGramData& ElectroCardioGramData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ElectroCardioGramData_pulse_2fengine_2fbind_2fPulseEquipment_2eproto.base);
  return *internal_default_instance();
}


void ElectroCardioGramData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.engine.bind.ElectroCardioGramData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && waveforms_ != nullptr) {
    delete waveforms_;
  }
  waveforms_ = nullptr;
  ::memset(&heartrythmtime_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heartrythmperiod_s_) -
      reinterpret_cast<char*>(&heartrythmtime_s_)) + sizeof(heartrythmperiod_s_));
  _internal_metadata_.Clear();
}

const char* ElectroCardioGramData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ElectroCardioGramData Common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double HeartRythmTime_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          heartrythmtime_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double HeartRythmPeriod_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          heartrythmperiod_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ElectroCardioGramWaveformListData Waveforms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_waveforms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ElectroCardioGramData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.engine.bind.ElectroCardioGramData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ElectroCardioGramData Common = 1;
  if (this->has_common()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::common(this), target, stream);
  }

  // double HeartRythmTime_s = 2;
  if (!(this->heartrythmtime_s() <= 0 && this->heartrythmtime_s() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_heartrythmtime_s(), target);
  }

  // double HeartRythmPeriod_s = 3;
  if (!(this->heartrythmperiod_s() <= 0 && this->heartrythmperiod_s() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_heartrythmperiod_s(), target);
  }

  // .pulse.cdm.bind.ElectroCardioGramWaveformListData Waveforms = 4;
  if (this->has_waveforms()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::waveforms(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.engine.bind.ElectroCardioGramData)
  return target;
}

size_t ElectroCardioGramData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.engine.bind.ElectroCardioGramData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ElectroCardioGramData Common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .pulse.cdm.bind.ElectroCardioGramWaveformListData Waveforms = 4;
  if (this->has_waveforms()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *waveforms_);
  }

  // double HeartRythmTime_s = 2;
  if (!(this->heartrythmtime_s() <= 0 && this->heartrythmtime_s() >= 0)) {
    total_size += 1 + 8;
  }

  // double HeartRythmPeriod_s = 3;
  if (!(this->heartrythmperiod_s() <= 0 && this->heartrythmperiod_s() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ElectroCardioGramData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.engine.bind.ElectroCardioGramData)
  GOOGLE_DCHECK_NE(&from, this);
  const ElectroCardioGramData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ElectroCardioGramData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.engine.bind.ElectroCardioGramData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.engine.bind.ElectroCardioGramData)
    MergeFrom(*source);
  }
}

void ElectroCardioGramData::MergeFrom(const ElectroCardioGramData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.engine.bind.ElectroCardioGramData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    _internal_mutable_common()->::pulse::cdm::bind::ElectroCardioGramData::MergeFrom(from._internal_common());
  }
  if (from.has_waveforms()) {
    _internal_mutable_waveforms()->::pulse::cdm::bind::ElectroCardioGramWaveformListData::MergeFrom(from._internal_waveforms());
  }
  if (!(from.heartrythmtime_s() <= 0 && from.heartrythmtime_s() >= 0)) {
    _internal_set_heartrythmtime_s(from._internal_heartrythmtime_s());
  }
  if (!(from.heartrythmperiod_s() <= 0 && from.heartrythmperiod_s() >= 0)) {
    _internal_set_heartrythmperiod_s(from._internal_heartrythmperiod_s());
  }
}

void ElectroCardioGramData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.engine.bind.ElectroCardioGramData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ElectroCardioGramData::CopyFrom(const ElectroCardioGramData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.engine.bind.ElectroCardioGramData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElectroCardioGramData::IsInitialized() const {
  return true;
}

void ElectroCardioGramData::InternalSwap(ElectroCardioGramData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(common_, other->common_);
  swap(waveforms_, other->waveforms_);
  swap(heartrythmtime_s_, other->heartrythmtime_s_);
  swap(heartrythmperiod_s_, other->heartrythmperiod_s_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ElectroCardioGramData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InhalerData::InitAsDefaultInstance() {
  ::pulse::engine::bind::_InhalerData_default_instance_._instance.get_mutable()->common_ = const_cast< ::pulse::cdm::bind::InhalerData*>(
      ::pulse::cdm::bind::InhalerData::internal_default_instance());
}
class InhalerData::_Internal {
 public:
  static const ::pulse::cdm::bind::InhalerData& common(const InhalerData* msg);
};

const ::pulse::cdm::bind::InhalerData&
InhalerData::_Internal::common(const InhalerData* msg) {
  return *msg->common_;
}
void InhalerData::clear_common() {
  if (GetArenaNoVirtual() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
InhalerData::InhalerData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pulse.engine.bind.InhalerData)
}
InhalerData::InhalerData(const InhalerData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::pulse::cdm::bind::InhalerData(*from.common_);
  } else {
    common_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.engine.bind.InhalerData)
}

void InhalerData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InhalerData_pulse_2fengine_2fbind_2fPulseEquipment_2eproto.base);
  common_ = nullptr;
}

InhalerData::~InhalerData() {
  // @@protoc_insertion_point(destructor:pulse.engine.bind.InhalerData)
  SharedDtor();
}

void InhalerData::SharedDtor() {
  if (this != internal_default_instance()) delete common_;
}

void InhalerData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InhalerData& InhalerData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InhalerData_pulse_2fengine_2fbind_2fPulseEquipment_2eproto.base);
  return *internal_default_instance();
}


void InhalerData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.engine.bind.InhalerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  _internal_metadata_.Clear();
}

const char* InhalerData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.InhalerData Common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InhalerData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.engine.bind.InhalerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.InhalerData Common = 1;
  if (this->has_common()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::common(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.engine.bind.InhalerData)
  return target;
}

size_t InhalerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.engine.bind.InhalerData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.InhalerData Common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InhalerData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.engine.bind.InhalerData)
  GOOGLE_DCHECK_NE(&from, this);
  const InhalerData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InhalerData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.engine.bind.InhalerData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.engine.bind.InhalerData)
    MergeFrom(*source);
  }
}

void InhalerData::MergeFrom(const InhalerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.engine.bind.InhalerData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    _internal_mutable_common()->::pulse::cdm::bind::InhalerData::MergeFrom(from._internal_common());
  }
}

void InhalerData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.engine.bind.InhalerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InhalerData::CopyFrom(const InhalerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.engine.bind.InhalerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InhalerData::IsInitialized() const {
  return true;
}

void InhalerData::InternalSwap(InhalerData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(common_, other->common_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InhalerData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bind
}  // namespace engine
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pulse::engine::bind::AnesthesiaMachineData* Arena::CreateMaybeMessage< ::pulse::engine::bind::AnesthesiaMachineData >(Arena* arena) {
  return Arena::CreateInternal< ::pulse::engine::bind::AnesthesiaMachineData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::engine::bind::ElectroCardioGramData* Arena::CreateMaybeMessage< ::pulse::engine::bind::ElectroCardioGramData >(Arena* arena) {
  return Arena::CreateInternal< ::pulse::engine::bind::ElectroCardioGramData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::engine::bind::InhalerData* Arena::CreateMaybeMessage< ::pulse::engine::bind::InhalerData >(Arena* arena) {
  return Arena::CreateInternal< ::pulse::engine::bind::InhalerData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
