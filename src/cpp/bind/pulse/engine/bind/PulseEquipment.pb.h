// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/engine/bind/PulseEquipment.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pulse_2fengine_2fbind_2fPulseEquipment_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pulse_2fengine_2fbind_2fPulseEquipment_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "pulse/cdm/bind/AnesthesiaMachine.pb.h"
#include "pulse/cdm/bind/ElectroCardioGram.pb.h"
#include "pulse/cdm/bind/Inhaler.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pulse_2fengine_2fbind_2fPulseEquipment_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pulse_2fengine_2fbind_2fPulseEquipment_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fengine_2fbind_2fPulseEquipment_2eproto;
namespace pulse {
namespace engine {
namespace bind {
class AnesthesiaMachineData;
class AnesthesiaMachineDataDefaultTypeInternal;
extern AnesthesiaMachineDataDefaultTypeInternal _AnesthesiaMachineData_default_instance_;
class ElectroCardioGramData;
class ElectroCardioGramDataDefaultTypeInternal;
extern ElectroCardioGramDataDefaultTypeInternal _ElectroCardioGramData_default_instance_;
class InhalerData;
class InhalerDataDefaultTypeInternal;
extern InhalerDataDefaultTypeInternal _InhalerData_default_instance_;
}  // namespace bind
}  // namespace engine
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> ::pulse::engine::bind::AnesthesiaMachineData* Arena::CreateMaybeMessage<::pulse::engine::bind::AnesthesiaMachineData>(Arena*);
template<> ::pulse::engine::bind::ElectroCardioGramData* Arena::CreateMaybeMessage<::pulse::engine::bind::ElectroCardioGramData>(Arena*);
template<> ::pulse::engine::bind::InhalerData* Arena::CreateMaybeMessage<::pulse::engine::bind::InhalerData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pulse {
namespace engine {
namespace bind {

// ===================================================================

class AnesthesiaMachineData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.engine.bind.AnesthesiaMachineData) */ {
 public:
  AnesthesiaMachineData();
  virtual ~AnesthesiaMachineData();

  AnesthesiaMachineData(const AnesthesiaMachineData& from);
  AnesthesiaMachineData(AnesthesiaMachineData&& from) noexcept
    : AnesthesiaMachineData() {
    *this = ::std::move(from);
  }

  inline AnesthesiaMachineData& operator=(const AnesthesiaMachineData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnesthesiaMachineData& operator=(AnesthesiaMachineData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnesthesiaMachineData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnesthesiaMachineData* internal_default_instance() {
    return reinterpret_cast<const AnesthesiaMachineData*>(
               &_AnesthesiaMachineData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AnesthesiaMachineData& a, AnesthesiaMachineData& b) {
    a.Swap(&b);
  }
  inline void Swap(AnesthesiaMachineData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnesthesiaMachineData* New() const final {
    return CreateMaybeMessage<AnesthesiaMachineData>(nullptr);
  }

  AnesthesiaMachineData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnesthesiaMachineData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnesthesiaMachineData& from);
  void MergeFrom(const AnesthesiaMachineData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnesthesiaMachineData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.engine.bind.AnesthesiaMachineData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fengine_2fbind_2fPulseEquipment_2eproto);
    return ::descriptor_table_pulse_2fengine_2fbind_2fPulseEquipment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kCurrentBreathingCycleTimeSFieldNumber = 3,
    kInspirationTimeSFieldNumber = 4,
    kOxygenInletVolumeFractionFieldNumber = 5,
    kTotalBreathingCycleTimeSFieldNumber = 6,
    kInhalingFieldNumber = 2,
  };
  // .pulse.cdm.bind.AnesthesiaMachineData Common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::pulse::cdm::bind::AnesthesiaMachineData& common() const;
  ::pulse::cdm::bind::AnesthesiaMachineData* release_common();
  ::pulse::cdm::bind::AnesthesiaMachineData* mutable_common();
  void set_allocated_common(::pulse::cdm::bind::AnesthesiaMachineData* common);
  private:
  const ::pulse::cdm::bind::AnesthesiaMachineData& _internal_common() const;
  ::pulse::cdm::bind::AnesthesiaMachineData* _internal_mutable_common();
  public:

  // double CurrentBreathingCycleTime_s = 3;
  void clear_currentbreathingcycletime_s();
  double currentbreathingcycletime_s() const;
  void set_currentbreathingcycletime_s(double value);
  private:
  double _internal_currentbreathingcycletime_s() const;
  void _internal_set_currentbreathingcycletime_s(double value);
  public:

  // double InspirationTime_s = 4;
  void clear_inspirationtime_s();
  double inspirationtime_s() const;
  void set_inspirationtime_s(double value);
  private:
  double _internal_inspirationtime_s() const;
  void _internal_set_inspirationtime_s(double value);
  public:

  // double OxygenInletVolumeFraction = 5;
  void clear_oxygeninletvolumefraction();
  double oxygeninletvolumefraction() const;
  void set_oxygeninletvolumefraction(double value);
  private:
  double _internal_oxygeninletvolumefraction() const;
  void _internal_set_oxygeninletvolumefraction(double value);
  public:

  // double TotalBreathingCycleTime_s = 6;
  void clear_totalbreathingcycletime_s();
  double totalbreathingcycletime_s() const;
  void set_totalbreathingcycletime_s(double value);
  private:
  double _internal_totalbreathingcycletime_s() const;
  void _internal_set_totalbreathingcycletime_s(double value);
  public:

  // bool Inhaling = 2;
  void clear_inhaling();
  bool inhaling() const;
  void set_inhaling(bool value);
  private:
  bool _internal_inhaling() const;
  void _internal_set_inhaling(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.engine.bind.AnesthesiaMachineData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::AnesthesiaMachineData* common_;
  double currentbreathingcycletime_s_;
  double inspirationtime_s_;
  double oxygeninletvolumefraction_;
  double totalbreathingcycletime_s_;
  bool inhaling_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fengine_2fbind_2fPulseEquipment_2eproto;
};
// -------------------------------------------------------------------

class ElectroCardioGramData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.engine.bind.ElectroCardioGramData) */ {
 public:
  ElectroCardioGramData();
  virtual ~ElectroCardioGramData();

  ElectroCardioGramData(const ElectroCardioGramData& from);
  ElectroCardioGramData(ElectroCardioGramData&& from) noexcept
    : ElectroCardioGramData() {
    *this = ::std::move(from);
  }

  inline ElectroCardioGramData& operator=(const ElectroCardioGramData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ElectroCardioGramData& operator=(ElectroCardioGramData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ElectroCardioGramData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ElectroCardioGramData* internal_default_instance() {
    return reinterpret_cast<const ElectroCardioGramData*>(
               &_ElectroCardioGramData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ElectroCardioGramData& a, ElectroCardioGramData& b) {
    a.Swap(&b);
  }
  inline void Swap(ElectroCardioGramData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ElectroCardioGramData* New() const final {
    return CreateMaybeMessage<ElectroCardioGramData>(nullptr);
  }

  ElectroCardioGramData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ElectroCardioGramData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ElectroCardioGramData& from);
  void MergeFrom(const ElectroCardioGramData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElectroCardioGramData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.engine.bind.ElectroCardioGramData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fengine_2fbind_2fPulseEquipment_2eproto);
    return ::descriptor_table_pulse_2fengine_2fbind_2fPulseEquipment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kWaveformsFieldNumber = 4,
    kHeartRythmTimeSFieldNumber = 2,
    kHeartRythmPeriodSFieldNumber = 3,
  };
  // .pulse.cdm.bind.ElectroCardioGramData Common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::pulse::cdm::bind::ElectroCardioGramData& common() const;
  ::pulse::cdm::bind::ElectroCardioGramData* release_common();
  ::pulse::cdm::bind::ElectroCardioGramData* mutable_common();
  void set_allocated_common(::pulse::cdm::bind::ElectroCardioGramData* common);
  private:
  const ::pulse::cdm::bind::ElectroCardioGramData& _internal_common() const;
  ::pulse::cdm::bind::ElectroCardioGramData* _internal_mutable_common();
  public:

  // .pulse.cdm.bind.ElectroCardioGramWaveformListData Waveforms = 4;
  bool has_waveforms() const;
  private:
  bool _internal_has_waveforms() const;
  public:
  void clear_waveforms();
  const ::pulse::cdm::bind::ElectroCardioGramWaveformListData& waveforms() const;
  ::pulse::cdm::bind::ElectroCardioGramWaveformListData* release_waveforms();
  ::pulse::cdm::bind::ElectroCardioGramWaveformListData* mutable_waveforms();
  void set_allocated_waveforms(::pulse::cdm::bind::ElectroCardioGramWaveformListData* waveforms);
  private:
  const ::pulse::cdm::bind::ElectroCardioGramWaveformListData& _internal_waveforms() const;
  ::pulse::cdm::bind::ElectroCardioGramWaveformListData* _internal_mutable_waveforms();
  public:

  // double HeartRythmTime_s = 2;
  void clear_heartrythmtime_s();
  double heartrythmtime_s() const;
  void set_heartrythmtime_s(double value);
  private:
  double _internal_heartrythmtime_s() const;
  void _internal_set_heartrythmtime_s(double value);
  public:

  // double HeartRythmPeriod_s = 3;
  void clear_heartrythmperiod_s();
  double heartrythmperiod_s() const;
  void set_heartrythmperiod_s(double value);
  private:
  double _internal_heartrythmperiod_s() const;
  void _internal_set_heartrythmperiod_s(double value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.engine.bind.ElectroCardioGramData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::ElectroCardioGramData* common_;
  ::pulse::cdm::bind::ElectroCardioGramWaveformListData* waveforms_;
  double heartrythmtime_s_;
  double heartrythmperiod_s_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fengine_2fbind_2fPulseEquipment_2eproto;
};
// -------------------------------------------------------------------

class InhalerData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.engine.bind.InhalerData) */ {
 public:
  InhalerData();
  virtual ~InhalerData();

  InhalerData(const InhalerData& from);
  InhalerData(InhalerData&& from) noexcept
    : InhalerData() {
    *this = ::std::move(from);
  }

  inline InhalerData& operator=(const InhalerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline InhalerData& operator=(InhalerData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InhalerData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InhalerData* internal_default_instance() {
    return reinterpret_cast<const InhalerData*>(
               &_InhalerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InhalerData& a, InhalerData& b) {
    a.Swap(&b);
  }
  inline void Swap(InhalerData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InhalerData* New() const final {
    return CreateMaybeMessage<InhalerData>(nullptr);
  }

  InhalerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InhalerData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InhalerData& from);
  void MergeFrom(const InhalerData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InhalerData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.engine.bind.InhalerData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fengine_2fbind_2fPulseEquipment_2eproto);
    return ::descriptor_table_pulse_2fengine_2fbind_2fPulseEquipment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
  };
  // .pulse.cdm.bind.InhalerData Common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::pulse::cdm::bind::InhalerData& common() const;
  ::pulse::cdm::bind::InhalerData* release_common();
  ::pulse::cdm::bind::InhalerData* mutable_common();
  void set_allocated_common(::pulse::cdm::bind::InhalerData* common);
  private:
  const ::pulse::cdm::bind::InhalerData& _internal_common() const;
  ::pulse::cdm::bind::InhalerData* _internal_mutable_common();
  public:

  // @@protoc_insertion_point(class_scope:pulse.engine.bind.InhalerData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pulse::cdm::bind::InhalerData* common_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fengine_2fbind_2fPulseEquipment_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AnesthesiaMachineData

// .pulse.cdm.bind.AnesthesiaMachineData Common = 1;
inline bool AnesthesiaMachineData::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool AnesthesiaMachineData::has_common() const {
  return _internal_has_common();
}
inline const ::pulse::cdm::bind::AnesthesiaMachineData& AnesthesiaMachineData::_internal_common() const {
  const ::pulse::cdm::bind::AnesthesiaMachineData* p = common_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::AnesthesiaMachineData*>(
      &::pulse::cdm::bind::_AnesthesiaMachineData_default_instance_);
}
inline const ::pulse::cdm::bind::AnesthesiaMachineData& AnesthesiaMachineData::common() const {
  // @@protoc_insertion_point(field_get:pulse.engine.bind.AnesthesiaMachineData.Common)
  return _internal_common();
}
inline ::pulse::cdm::bind::AnesthesiaMachineData* AnesthesiaMachineData::release_common() {
  // @@protoc_insertion_point(field_release:pulse.engine.bind.AnesthesiaMachineData.Common)
  
  ::pulse::cdm::bind::AnesthesiaMachineData* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::AnesthesiaMachineData* AnesthesiaMachineData::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::AnesthesiaMachineData>(GetArenaNoVirtual());
    common_ = p;
  }
  return common_;
}
inline ::pulse::cdm::bind::AnesthesiaMachineData* AnesthesiaMachineData::mutable_common() {
  // @@protoc_insertion_point(field_mutable:pulse.engine.bind.AnesthesiaMachineData.Common)
  return _internal_mutable_common();
}
inline void AnesthesiaMachineData::set_allocated_common(::pulse::cdm::bind::AnesthesiaMachineData* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:pulse.engine.bind.AnesthesiaMachineData.Common)
}

// bool Inhaling = 2;
inline void AnesthesiaMachineData::clear_inhaling() {
  inhaling_ = false;
}
inline bool AnesthesiaMachineData::_internal_inhaling() const {
  return inhaling_;
}
inline bool AnesthesiaMachineData::inhaling() const {
  // @@protoc_insertion_point(field_get:pulse.engine.bind.AnesthesiaMachineData.Inhaling)
  return _internal_inhaling();
}
inline void AnesthesiaMachineData::_internal_set_inhaling(bool value) {
  
  inhaling_ = value;
}
inline void AnesthesiaMachineData::set_inhaling(bool value) {
  _internal_set_inhaling(value);
  // @@protoc_insertion_point(field_set:pulse.engine.bind.AnesthesiaMachineData.Inhaling)
}

// double CurrentBreathingCycleTime_s = 3;
inline void AnesthesiaMachineData::clear_currentbreathingcycletime_s() {
  currentbreathingcycletime_s_ = 0;
}
inline double AnesthesiaMachineData::_internal_currentbreathingcycletime_s() const {
  return currentbreathingcycletime_s_;
}
inline double AnesthesiaMachineData::currentbreathingcycletime_s() const {
  // @@protoc_insertion_point(field_get:pulse.engine.bind.AnesthesiaMachineData.CurrentBreathingCycleTime_s)
  return _internal_currentbreathingcycletime_s();
}
inline void AnesthesiaMachineData::_internal_set_currentbreathingcycletime_s(double value) {
  
  currentbreathingcycletime_s_ = value;
}
inline void AnesthesiaMachineData::set_currentbreathingcycletime_s(double value) {
  _internal_set_currentbreathingcycletime_s(value);
  // @@protoc_insertion_point(field_set:pulse.engine.bind.AnesthesiaMachineData.CurrentBreathingCycleTime_s)
}

// double InspirationTime_s = 4;
inline void AnesthesiaMachineData::clear_inspirationtime_s() {
  inspirationtime_s_ = 0;
}
inline double AnesthesiaMachineData::_internal_inspirationtime_s() const {
  return inspirationtime_s_;
}
inline double AnesthesiaMachineData::inspirationtime_s() const {
  // @@protoc_insertion_point(field_get:pulse.engine.bind.AnesthesiaMachineData.InspirationTime_s)
  return _internal_inspirationtime_s();
}
inline void AnesthesiaMachineData::_internal_set_inspirationtime_s(double value) {
  
  inspirationtime_s_ = value;
}
inline void AnesthesiaMachineData::set_inspirationtime_s(double value) {
  _internal_set_inspirationtime_s(value);
  // @@protoc_insertion_point(field_set:pulse.engine.bind.AnesthesiaMachineData.InspirationTime_s)
}

// double OxygenInletVolumeFraction = 5;
inline void AnesthesiaMachineData::clear_oxygeninletvolumefraction() {
  oxygeninletvolumefraction_ = 0;
}
inline double AnesthesiaMachineData::_internal_oxygeninletvolumefraction() const {
  return oxygeninletvolumefraction_;
}
inline double AnesthesiaMachineData::oxygeninletvolumefraction() const {
  // @@protoc_insertion_point(field_get:pulse.engine.bind.AnesthesiaMachineData.OxygenInletVolumeFraction)
  return _internal_oxygeninletvolumefraction();
}
inline void AnesthesiaMachineData::_internal_set_oxygeninletvolumefraction(double value) {
  
  oxygeninletvolumefraction_ = value;
}
inline void AnesthesiaMachineData::set_oxygeninletvolumefraction(double value) {
  _internal_set_oxygeninletvolumefraction(value);
  // @@protoc_insertion_point(field_set:pulse.engine.bind.AnesthesiaMachineData.OxygenInletVolumeFraction)
}

// double TotalBreathingCycleTime_s = 6;
inline void AnesthesiaMachineData::clear_totalbreathingcycletime_s() {
  totalbreathingcycletime_s_ = 0;
}
inline double AnesthesiaMachineData::_internal_totalbreathingcycletime_s() const {
  return totalbreathingcycletime_s_;
}
inline double AnesthesiaMachineData::totalbreathingcycletime_s() const {
  // @@protoc_insertion_point(field_get:pulse.engine.bind.AnesthesiaMachineData.TotalBreathingCycleTime_s)
  return _internal_totalbreathingcycletime_s();
}
inline void AnesthesiaMachineData::_internal_set_totalbreathingcycletime_s(double value) {
  
  totalbreathingcycletime_s_ = value;
}
inline void AnesthesiaMachineData::set_totalbreathingcycletime_s(double value) {
  _internal_set_totalbreathingcycletime_s(value);
  // @@protoc_insertion_point(field_set:pulse.engine.bind.AnesthesiaMachineData.TotalBreathingCycleTime_s)
}

// -------------------------------------------------------------------

// ElectroCardioGramData

// .pulse.cdm.bind.ElectroCardioGramData Common = 1;
inline bool ElectroCardioGramData::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool ElectroCardioGramData::has_common() const {
  return _internal_has_common();
}
inline const ::pulse::cdm::bind::ElectroCardioGramData& ElectroCardioGramData::_internal_common() const {
  const ::pulse::cdm::bind::ElectroCardioGramData* p = common_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ElectroCardioGramData*>(
      &::pulse::cdm::bind::_ElectroCardioGramData_default_instance_);
}
inline const ::pulse::cdm::bind::ElectroCardioGramData& ElectroCardioGramData::common() const {
  // @@protoc_insertion_point(field_get:pulse.engine.bind.ElectroCardioGramData.Common)
  return _internal_common();
}
inline ::pulse::cdm::bind::ElectroCardioGramData* ElectroCardioGramData::release_common() {
  // @@protoc_insertion_point(field_release:pulse.engine.bind.ElectroCardioGramData.Common)
  
  ::pulse::cdm::bind::ElectroCardioGramData* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ElectroCardioGramData* ElectroCardioGramData::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ElectroCardioGramData>(GetArenaNoVirtual());
    common_ = p;
  }
  return common_;
}
inline ::pulse::cdm::bind::ElectroCardioGramData* ElectroCardioGramData::mutable_common() {
  // @@protoc_insertion_point(field_mutable:pulse.engine.bind.ElectroCardioGramData.Common)
  return _internal_mutable_common();
}
inline void ElectroCardioGramData::set_allocated_common(::pulse::cdm::bind::ElectroCardioGramData* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:pulse.engine.bind.ElectroCardioGramData.Common)
}

// double HeartRythmTime_s = 2;
inline void ElectroCardioGramData::clear_heartrythmtime_s() {
  heartrythmtime_s_ = 0;
}
inline double ElectroCardioGramData::_internal_heartrythmtime_s() const {
  return heartrythmtime_s_;
}
inline double ElectroCardioGramData::heartrythmtime_s() const {
  // @@protoc_insertion_point(field_get:pulse.engine.bind.ElectroCardioGramData.HeartRythmTime_s)
  return _internal_heartrythmtime_s();
}
inline void ElectroCardioGramData::_internal_set_heartrythmtime_s(double value) {
  
  heartrythmtime_s_ = value;
}
inline void ElectroCardioGramData::set_heartrythmtime_s(double value) {
  _internal_set_heartrythmtime_s(value);
  // @@protoc_insertion_point(field_set:pulse.engine.bind.ElectroCardioGramData.HeartRythmTime_s)
}

// double HeartRythmPeriod_s = 3;
inline void ElectroCardioGramData::clear_heartrythmperiod_s() {
  heartrythmperiod_s_ = 0;
}
inline double ElectroCardioGramData::_internal_heartrythmperiod_s() const {
  return heartrythmperiod_s_;
}
inline double ElectroCardioGramData::heartrythmperiod_s() const {
  // @@protoc_insertion_point(field_get:pulse.engine.bind.ElectroCardioGramData.HeartRythmPeriod_s)
  return _internal_heartrythmperiod_s();
}
inline void ElectroCardioGramData::_internal_set_heartrythmperiod_s(double value) {
  
  heartrythmperiod_s_ = value;
}
inline void ElectroCardioGramData::set_heartrythmperiod_s(double value) {
  _internal_set_heartrythmperiod_s(value);
  // @@protoc_insertion_point(field_set:pulse.engine.bind.ElectroCardioGramData.HeartRythmPeriod_s)
}

// .pulse.cdm.bind.ElectroCardioGramWaveformListData Waveforms = 4;
inline bool ElectroCardioGramData::_internal_has_waveforms() const {
  return this != internal_default_instance() && waveforms_ != nullptr;
}
inline bool ElectroCardioGramData::has_waveforms() const {
  return _internal_has_waveforms();
}
inline const ::pulse::cdm::bind::ElectroCardioGramWaveformListData& ElectroCardioGramData::_internal_waveforms() const {
  const ::pulse::cdm::bind::ElectroCardioGramWaveformListData* p = waveforms_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::ElectroCardioGramWaveformListData*>(
      &::pulse::cdm::bind::_ElectroCardioGramWaveformListData_default_instance_);
}
inline const ::pulse::cdm::bind::ElectroCardioGramWaveformListData& ElectroCardioGramData::waveforms() const {
  // @@protoc_insertion_point(field_get:pulse.engine.bind.ElectroCardioGramData.Waveforms)
  return _internal_waveforms();
}
inline ::pulse::cdm::bind::ElectroCardioGramWaveformListData* ElectroCardioGramData::release_waveforms() {
  // @@protoc_insertion_point(field_release:pulse.engine.bind.ElectroCardioGramData.Waveforms)
  
  ::pulse::cdm::bind::ElectroCardioGramWaveformListData* temp = waveforms_;
  waveforms_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ElectroCardioGramWaveformListData* ElectroCardioGramData::_internal_mutable_waveforms() {
  
  if (waveforms_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ElectroCardioGramWaveformListData>(GetArenaNoVirtual());
    waveforms_ = p;
  }
  return waveforms_;
}
inline ::pulse::cdm::bind::ElectroCardioGramWaveformListData* ElectroCardioGramData::mutable_waveforms() {
  // @@protoc_insertion_point(field_mutable:pulse.engine.bind.ElectroCardioGramData.Waveforms)
  return _internal_mutable_waveforms();
}
inline void ElectroCardioGramData::set_allocated_waveforms(::pulse::cdm::bind::ElectroCardioGramWaveformListData* waveforms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(waveforms_);
  }
  if (waveforms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      waveforms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, waveforms, submessage_arena);
    }
    
  } else {
    
  }
  waveforms_ = waveforms;
  // @@protoc_insertion_point(field_set_allocated:pulse.engine.bind.ElectroCardioGramData.Waveforms)
}

// -------------------------------------------------------------------

// InhalerData

// .pulse.cdm.bind.InhalerData Common = 1;
inline bool InhalerData::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool InhalerData::has_common() const {
  return _internal_has_common();
}
inline const ::pulse::cdm::bind::InhalerData& InhalerData::_internal_common() const {
  const ::pulse::cdm::bind::InhalerData* p = common_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pulse::cdm::bind::InhalerData*>(
      &::pulse::cdm::bind::_InhalerData_default_instance_);
}
inline const ::pulse::cdm::bind::InhalerData& InhalerData::common() const {
  // @@protoc_insertion_point(field_get:pulse.engine.bind.InhalerData.Common)
  return _internal_common();
}
inline ::pulse::cdm::bind::InhalerData* InhalerData::release_common() {
  // @@protoc_insertion_point(field_release:pulse.engine.bind.InhalerData.Common)
  
  ::pulse::cdm::bind::InhalerData* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::InhalerData* InhalerData::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::InhalerData>(GetArenaNoVirtual());
    common_ = p;
  }
  return common_;
}
inline ::pulse::cdm::bind::InhalerData* InhalerData::mutable_common() {
  // @@protoc_insertion_point(field_mutable:pulse.engine.bind.InhalerData.Common)
  return _internal_mutable_common();
}
inline void InhalerData::set_allocated_common(::pulse::cdm::bind::InhalerData* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:pulse.engine.bind.InhalerData.Common)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bind
}  // namespace engine
}  // namespace pulse

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pulse_2fengine_2fbind_2fPulseEquipment_2eproto
