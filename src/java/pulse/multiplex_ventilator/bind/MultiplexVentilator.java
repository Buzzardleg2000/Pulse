// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/impl/bind/MultiplexVentilator.proto

package pulse.multiplex_ventilator.bind;

public final class MultiplexVentilator {
  private MultiplexVentilator() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface MultiplexVentilatorDataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pulse.multiplex_ventilator.bind.MultiplexVentilatorData)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code pulse.multiplex_ventilator.bind.MultiplexVentilatorData}
   */
  public  static final class MultiplexVentilatorData extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:pulse.multiplex_ventilator.bind.MultiplexVentilatorData)
      MultiplexVentilatorDataOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use MultiplexVentilatorData.newBuilder() to construct.
    private MultiplexVentilatorData(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private MultiplexVentilatorData() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new MultiplexVentilatorData();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private MultiplexVentilatorData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return pulse.multiplex_ventilator.bind.MultiplexVentilator.internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return pulse.multiplex_ventilator.bind.MultiplexVentilator.internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.class, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.Builder.class);
    }

    public interface LungResistanceDataOrBuilder extends
        // @@protoc_insertion_point(interface_extends:pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungResistanceData)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftLungResistance = 1;</code>
       * @return Whether the leftLungResistance field is set.
       */
      boolean hasLeftLungResistance();
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftLungResistance = 1;</code>
       * @return The leftLungResistance.
       */
      pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData getLeftLungResistance();
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftLungResistance = 1;</code>
       */
      pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder getLeftLungResistanceOrBuilder();

      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightLungResistance = 2;</code>
       * @return Whether the rightLungResistance field is set.
       */
      boolean hasRightLungResistance();
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightLungResistance = 2;</code>
       * @return The rightLungResistance.
       */
      pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData getRightLungResistance();
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightLungResistance = 2;</code>
       */
      pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder getRightLungResistanceOrBuilder();
    }
    /**
     * Protobuf type {@code pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungResistanceData}
     */
    public  static final class LungResistanceData extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungResistanceData)
        LungResistanceDataOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use LungResistanceData.newBuilder() to construct.
      private LungResistanceData(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private LungResistanceData() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new LungResistanceData();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private LungResistanceData(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder subBuilder = null;
                if (leftLungResistance_ != null) {
                  subBuilder = leftLungResistance_.toBuilder();
                }
                leftLungResistance_ = input.readMessage(pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(leftLungResistance_);
                  leftLungResistance_ = subBuilder.buildPartial();
                }

                break;
              }
              case 18: {
                pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder subBuilder = null;
                if (rightLungResistance_ != null) {
                  subBuilder = rightLungResistance_.toBuilder();
                }
                rightLungResistance_ = input.readMessage(pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(rightLungResistance_);
                  rightLungResistance_ = subBuilder.buildPartial();
                }

                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pulse.multiplex_ventilator.bind.MultiplexVentilator.internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_LungResistanceData_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pulse.multiplex_ventilator.bind.MultiplexVentilator.internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_LungResistanceData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData.class, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData.Builder.class);
      }

      public static final int LEFTLUNGRESISTANCE_FIELD_NUMBER = 1;
      private pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData leftLungResistance_;
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftLungResistance = 1;</code>
       * @return Whether the leftLungResistance field is set.
       */
      public boolean hasLeftLungResistance() {
        return leftLungResistance_ != null;
      }
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftLungResistance = 1;</code>
       * @return The leftLungResistance.
       */
      public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData getLeftLungResistance() {
        return leftLungResistance_ == null ? pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.getDefaultInstance() : leftLungResistance_;
      }
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftLungResistance = 1;</code>
       */
      public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder getLeftLungResistanceOrBuilder() {
        return getLeftLungResistance();
      }

      public static final int RIGHTLUNGRESISTANCE_FIELD_NUMBER = 2;
      private pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData rightLungResistance_;
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightLungResistance = 2;</code>
       * @return Whether the rightLungResistance field is set.
       */
      public boolean hasRightLungResistance() {
        return rightLungResistance_ != null;
      }
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightLungResistance = 2;</code>
       * @return The rightLungResistance.
       */
      public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData getRightLungResistance() {
        return rightLungResistance_ == null ? pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.getDefaultInstance() : rightLungResistance_;
      }
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightLungResistance = 2;</code>
       */
      public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder getRightLungResistanceOrBuilder() {
        return getRightLungResistance();
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (leftLungResistance_ != null) {
          output.writeMessage(1, getLeftLungResistance());
        }
        if (rightLungResistance_ != null) {
          output.writeMessage(2, getRightLungResistance());
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (leftLungResistance_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, getLeftLungResistance());
        }
        if (rightLungResistance_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, getRightLungResistance());
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData)) {
          return super.equals(obj);
        }
        pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData other = (pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData) obj;

        if (hasLeftLungResistance() != other.hasLeftLungResistance()) return false;
        if (hasLeftLungResistance()) {
          if (!getLeftLungResistance()
              .equals(other.getLeftLungResistance())) return false;
        }
        if (hasRightLungResistance() != other.hasRightLungResistance()) return false;
        if (hasRightLungResistance()) {
          if (!getRightLungResistance()
              .equals(other.getRightLungResistance())) return false;
        }
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasLeftLungResistance()) {
          hash = (37 * hash) + LEFTLUNGRESISTANCE_FIELD_NUMBER;
          hash = (53 * hash) + getLeftLungResistance().hashCode();
        }
        if (hasRightLungResistance()) {
          hash = (37 * hash) + RIGHTLUNGRESISTANCE_FIELD_NUMBER;
          hash = (53 * hash) + getRightLungResistance().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungResistanceData}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungResistanceData)
          pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceDataOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return pulse.multiplex_ventilator.bind.MultiplexVentilator.internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_LungResistanceData_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return pulse.multiplex_ventilator.bind.MultiplexVentilator.internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_LungResistanceData_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData.class, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData.Builder.class);
        }

        // Construct using pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          if (leftLungResistanceBuilder_ == null) {
            leftLungResistance_ = null;
          } else {
            leftLungResistance_ = null;
            leftLungResistanceBuilder_ = null;
          }
          if (rightLungResistanceBuilder_ == null) {
            rightLungResistance_ = null;
          } else {
            rightLungResistance_ = null;
            rightLungResistanceBuilder_ = null;
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return pulse.multiplex_ventilator.bind.MultiplexVentilator.internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_LungResistanceData_descriptor;
        }

        @java.lang.Override
        public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData getDefaultInstanceForType() {
          return pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData.getDefaultInstance();
        }

        @java.lang.Override
        public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData build() {
          pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData buildPartial() {
          pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData result = new pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData(this);
          if (leftLungResistanceBuilder_ == null) {
            result.leftLungResistance_ = leftLungResistance_;
          } else {
            result.leftLungResistance_ = leftLungResistanceBuilder_.build();
          }
          if (rightLungResistanceBuilder_ == null) {
            result.rightLungResistance_ = rightLungResistance_;
          } else {
            result.rightLungResistance_ = rightLungResistanceBuilder_.build();
          }
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData) {
            return mergeFrom((pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData other) {
          if (other == pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData.getDefaultInstance()) return this;
          if (other.hasLeftLungResistance()) {
            mergeLeftLungResistance(other.getLeftLungResistance());
          }
          if (other.hasRightLungResistance()) {
            mergeRightLungResistance(other.getRightLungResistance());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData leftLungResistance_;
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder> leftLungResistanceBuilder_;
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftLungResistance = 1;</code>
         * @return Whether the leftLungResistance field is set.
         */
        public boolean hasLeftLungResistance() {
          return leftLungResistanceBuilder_ != null || leftLungResistance_ != null;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftLungResistance = 1;</code>
         * @return The leftLungResistance.
         */
        public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData getLeftLungResistance() {
          if (leftLungResistanceBuilder_ == null) {
            return leftLungResistance_ == null ? pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.getDefaultInstance() : leftLungResistance_;
          } else {
            return leftLungResistanceBuilder_.getMessage();
          }
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftLungResistance = 1;</code>
         */
        public Builder setLeftLungResistance(pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData value) {
          if (leftLungResistanceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            leftLungResistance_ = value;
            onChanged();
          } else {
            leftLungResistanceBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftLungResistance = 1;</code>
         */
        public Builder setLeftLungResistance(
            pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder builderForValue) {
          if (leftLungResistanceBuilder_ == null) {
            leftLungResistance_ = builderForValue.build();
            onChanged();
          } else {
            leftLungResistanceBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftLungResistance = 1;</code>
         */
        public Builder mergeLeftLungResistance(pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData value) {
          if (leftLungResistanceBuilder_ == null) {
            if (leftLungResistance_ != null) {
              leftLungResistance_ =
                pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.newBuilder(leftLungResistance_).mergeFrom(value).buildPartial();
            } else {
              leftLungResistance_ = value;
            }
            onChanged();
          } else {
            leftLungResistanceBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftLungResistance = 1;</code>
         */
        public Builder clearLeftLungResistance() {
          if (leftLungResistanceBuilder_ == null) {
            leftLungResistance_ = null;
            onChanged();
          } else {
            leftLungResistance_ = null;
            leftLungResistanceBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftLungResistance = 1;</code>
         */
        public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder getLeftLungResistanceBuilder() {
          
          onChanged();
          return getLeftLungResistanceFieldBuilder().getBuilder();
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftLungResistance = 1;</code>
         */
        public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder getLeftLungResistanceOrBuilder() {
          if (leftLungResistanceBuilder_ != null) {
            return leftLungResistanceBuilder_.getMessageOrBuilder();
          } else {
            return leftLungResistance_ == null ?
                pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.getDefaultInstance() : leftLungResistance_;
          }
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftLungResistance = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder> 
            getLeftLungResistanceFieldBuilder() {
          if (leftLungResistanceBuilder_ == null) {
            leftLungResistanceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder>(
                    getLeftLungResistance(),
                    getParentForChildren(),
                    isClean());
            leftLungResistance_ = null;
          }
          return leftLungResistanceBuilder_;
        }

        private pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData rightLungResistance_;
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder> rightLungResistanceBuilder_;
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightLungResistance = 2;</code>
         * @return Whether the rightLungResistance field is set.
         */
        public boolean hasRightLungResistance() {
          return rightLungResistanceBuilder_ != null || rightLungResistance_ != null;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightLungResistance = 2;</code>
         * @return The rightLungResistance.
         */
        public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData getRightLungResistance() {
          if (rightLungResistanceBuilder_ == null) {
            return rightLungResistance_ == null ? pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.getDefaultInstance() : rightLungResistance_;
          } else {
            return rightLungResistanceBuilder_.getMessage();
          }
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightLungResistance = 2;</code>
         */
        public Builder setRightLungResistance(pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData value) {
          if (rightLungResistanceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            rightLungResistance_ = value;
            onChanged();
          } else {
            rightLungResistanceBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightLungResistance = 2;</code>
         */
        public Builder setRightLungResistance(
            pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder builderForValue) {
          if (rightLungResistanceBuilder_ == null) {
            rightLungResistance_ = builderForValue.build();
            onChanged();
          } else {
            rightLungResistanceBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightLungResistance = 2;</code>
         */
        public Builder mergeRightLungResistance(pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData value) {
          if (rightLungResistanceBuilder_ == null) {
            if (rightLungResistance_ != null) {
              rightLungResistance_ =
                pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.newBuilder(rightLungResistance_).mergeFrom(value).buildPartial();
            } else {
              rightLungResistance_ = value;
            }
            onChanged();
          } else {
            rightLungResistanceBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightLungResistance = 2;</code>
         */
        public Builder clearRightLungResistance() {
          if (rightLungResistanceBuilder_ == null) {
            rightLungResistance_ = null;
            onChanged();
          } else {
            rightLungResistance_ = null;
            rightLungResistanceBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightLungResistance = 2;</code>
         */
        public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder getRightLungResistanceBuilder() {
          
          onChanged();
          return getRightLungResistanceFieldBuilder().getBuilder();
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightLungResistance = 2;</code>
         */
        public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder getRightLungResistanceOrBuilder() {
          if (rightLungResistanceBuilder_ != null) {
            return rightLungResistanceBuilder_.getMessageOrBuilder();
          } else {
            return rightLungResistance_ == null ?
                pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.getDefaultInstance() : rightLungResistance_;
          }
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightLungResistance = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder> 
            getRightLungResistanceFieldBuilder() {
          if (rightLungResistanceBuilder_ == null) {
            rightLungResistanceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder>(
                    getRightLungResistance(),
                    getParentForChildren(),
                    isClean());
            rightLungResistance_ = null;
          }
          return rightLungResistanceBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungResistanceData)
      }

      // @@protoc_insertion_point(class_scope:pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungResistanceData)
      private static final pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData();
      }

      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<LungResistanceData>
          PARSER = new com.google.protobuf.AbstractParser<LungResistanceData>() {
        @java.lang.Override
        public LungResistanceData parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new LungResistanceData(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<LungResistanceData> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<LungResistanceData> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface BronchiAlveoliResistanceDataOrBuilder extends
        // @@protoc_insertion_point(interface_extends:pulse.multiplex_ventilator.bind.MultiplexVentilatorData.BronchiAlveoliResistanceData)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftBronchiResistance = 1;</code>
       * @return Whether the leftBronchiResistance field is set.
       */
      boolean hasLeftBronchiResistance();
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftBronchiResistance = 1;</code>
       * @return The leftBronchiResistance.
       */
      pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData getLeftBronchiResistance();
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftBronchiResistance = 1;</code>
       */
      pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder getLeftBronchiResistanceOrBuilder();

      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftAlveoliResistance = 2;</code>
       * @return Whether the leftAlveoliResistance field is set.
       */
      boolean hasLeftAlveoliResistance();
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftAlveoliResistance = 2;</code>
       * @return The leftAlveoliResistance.
       */
      pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData getLeftAlveoliResistance();
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftAlveoliResistance = 2;</code>
       */
      pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder getLeftAlveoliResistanceOrBuilder();

      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightBronchiResistance = 3;</code>
       * @return Whether the rightBronchiResistance field is set.
       */
      boolean hasRightBronchiResistance();
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightBronchiResistance = 3;</code>
       * @return The rightBronchiResistance.
       */
      pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData getRightBronchiResistance();
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightBronchiResistance = 3;</code>
       */
      pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder getRightBronchiResistanceOrBuilder();

      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightAlveoliResistance = 4;</code>
       * @return Whether the rightAlveoliResistance field is set.
       */
      boolean hasRightAlveoliResistance();
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightAlveoliResistance = 4;</code>
       * @return The rightAlveoliResistance.
       */
      pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData getRightAlveoliResistance();
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightAlveoliResistance = 4;</code>
       */
      pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder getRightAlveoliResistanceOrBuilder();
    }
    /**
     * Protobuf type {@code pulse.multiplex_ventilator.bind.MultiplexVentilatorData.BronchiAlveoliResistanceData}
     */
    public  static final class BronchiAlveoliResistanceData extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:pulse.multiplex_ventilator.bind.MultiplexVentilatorData.BronchiAlveoliResistanceData)
        BronchiAlveoliResistanceDataOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use BronchiAlveoliResistanceData.newBuilder() to construct.
      private BronchiAlveoliResistanceData(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private BronchiAlveoliResistanceData() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new BronchiAlveoliResistanceData();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private BronchiAlveoliResistanceData(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder subBuilder = null;
                if (leftBronchiResistance_ != null) {
                  subBuilder = leftBronchiResistance_.toBuilder();
                }
                leftBronchiResistance_ = input.readMessage(pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(leftBronchiResistance_);
                  leftBronchiResistance_ = subBuilder.buildPartial();
                }

                break;
              }
              case 18: {
                pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder subBuilder = null;
                if (leftAlveoliResistance_ != null) {
                  subBuilder = leftAlveoliResistance_.toBuilder();
                }
                leftAlveoliResistance_ = input.readMessage(pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(leftAlveoliResistance_);
                  leftAlveoliResistance_ = subBuilder.buildPartial();
                }

                break;
              }
              case 26: {
                pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder subBuilder = null;
                if (rightBronchiResistance_ != null) {
                  subBuilder = rightBronchiResistance_.toBuilder();
                }
                rightBronchiResistance_ = input.readMessage(pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(rightBronchiResistance_);
                  rightBronchiResistance_ = subBuilder.buildPartial();
                }

                break;
              }
              case 34: {
                pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder subBuilder = null;
                if (rightAlveoliResistance_ != null) {
                  subBuilder = rightAlveoliResistance_.toBuilder();
                }
                rightAlveoliResistance_ = input.readMessage(pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(rightAlveoliResistance_);
                  rightAlveoliResistance_ = subBuilder.buildPartial();
                }

                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pulse.multiplex_ventilator.bind.MultiplexVentilator.internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_BronchiAlveoliResistanceData_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pulse.multiplex_ventilator.bind.MultiplexVentilator.internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_BronchiAlveoliResistanceData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData.class, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData.Builder.class);
      }

      public static final int LEFTBRONCHIRESISTANCE_FIELD_NUMBER = 1;
      private pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData leftBronchiResistance_;
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftBronchiResistance = 1;</code>
       * @return Whether the leftBronchiResistance field is set.
       */
      public boolean hasLeftBronchiResistance() {
        return leftBronchiResistance_ != null;
      }
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftBronchiResistance = 1;</code>
       * @return The leftBronchiResistance.
       */
      public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData getLeftBronchiResistance() {
        return leftBronchiResistance_ == null ? pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.getDefaultInstance() : leftBronchiResistance_;
      }
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftBronchiResistance = 1;</code>
       */
      public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder getLeftBronchiResistanceOrBuilder() {
        return getLeftBronchiResistance();
      }

      public static final int LEFTALVEOLIRESISTANCE_FIELD_NUMBER = 2;
      private pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData leftAlveoliResistance_;
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftAlveoliResistance = 2;</code>
       * @return Whether the leftAlveoliResistance field is set.
       */
      public boolean hasLeftAlveoliResistance() {
        return leftAlveoliResistance_ != null;
      }
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftAlveoliResistance = 2;</code>
       * @return The leftAlveoliResistance.
       */
      public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData getLeftAlveoliResistance() {
        return leftAlveoliResistance_ == null ? pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.getDefaultInstance() : leftAlveoliResistance_;
      }
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftAlveoliResistance = 2;</code>
       */
      public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder getLeftAlveoliResistanceOrBuilder() {
        return getLeftAlveoliResistance();
      }

      public static final int RIGHTBRONCHIRESISTANCE_FIELD_NUMBER = 3;
      private pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData rightBronchiResistance_;
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightBronchiResistance = 3;</code>
       * @return Whether the rightBronchiResistance field is set.
       */
      public boolean hasRightBronchiResistance() {
        return rightBronchiResistance_ != null;
      }
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightBronchiResistance = 3;</code>
       * @return The rightBronchiResistance.
       */
      public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData getRightBronchiResistance() {
        return rightBronchiResistance_ == null ? pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.getDefaultInstance() : rightBronchiResistance_;
      }
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightBronchiResistance = 3;</code>
       */
      public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder getRightBronchiResistanceOrBuilder() {
        return getRightBronchiResistance();
      }

      public static final int RIGHTALVEOLIRESISTANCE_FIELD_NUMBER = 4;
      private pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData rightAlveoliResistance_;
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightAlveoliResistance = 4;</code>
       * @return Whether the rightAlveoliResistance field is set.
       */
      public boolean hasRightAlveoliResistance() {
        return rightAlveoliResistance_ != null;
      }
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightAlveoliResistance = 4;</code>
       * @return The rightAlveoliResistance.
       */
      public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData getRightAlveoliResistance() {
        return rightAlveoliResistance_ == null ? pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.getDefaultInstance() : rightAlveoliResistance_;
      }
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightAlveoliResistance = 4;</code>
       */
      public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder getRightAlveoliResistanceOrBuilder() {
        return getRightAlveoliResistance();
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (leftBronchiResistance_ != null) {
          output.writeMessage(1, getLeftBronchiResistance());
        }
        if (leftAlveoliResistance_ != null) {
          output.writeMessage(2, getLeftAlveoliResistance());
        }
        if (rightBronchiResistance_ != null) {
          output.writeMessage(3, getRightBronchiResistance());
        }
        if (rightAlveoliResistance_ != null) {
          output.writeMessage(4, getRightAlveoliResistance());
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (leftBronchiResistance_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, getLeftBronchiResistance());
        }
        if (leftAlveoliResistance_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, getLeftAlveoliResistance());
        }
        if (rightBronchiResistance_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, getRightBronchiResistance());
        }
        if (rightAlveoliResistance_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, getRightAlveoliResistance());
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData)) {
          return super.equals(obj);
        }
        pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData other = (pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData) obj;

        if (hasLeftBronchiResistance() != other.hasLeftBronchiResistance()) return false;
        if (hasLeftBronchiResistance()) {
          if (!getLeftBronchiResistance()
              .equals(other.getLeftBronchiResistance())) return false;
        }
        if (hasLeftAlveoliResistance() != other.hasLeftAlveoliResistance()) return false;
        if (hasLeftAlveoliResistance()) {
          if (!getLeftAlveoliResistance()
              .equals(other.getLeftAlveoliResistance())) return false;
        }
        if (hasRightBronchiResistance() != other.hasRightBronchiResistance()) return false;
        if (hasRightBronchiResistance()) {
          if (!getRightBronchiResistance()
              .equals(other.getRightBronchiResistance())) return false;
        }
        if (hasRightAlveoliResistance() != other.hasRightAlveoliResistance()) return false;
        if (hasRightAlveoliResistance()) {
          if (!getRightAlveoliResistance()
              .equals(other.getRightAlveoliResistance())) return false;
        }
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasLeftBronchiResistance()) {
          hash = (37 * hash) + LEFTBRONCHIRESISTANCE_FIELD_NUMBER;
          hash = (53 * hash) + getLeftBronchiResistance().hashCode();
        }
        if (hasLeftAlveoliResistance()) {
          hash = (37 * hash) + LEFTALVEOLIRESISTANCE_FIELD_NUMBER;
          hash = (53 * hash) + getLeftAlveoliResistance().hashCode();
        }
        if (hasRightBronchiResistance()) {
          hash = (37 * hash) + RIGHTBRONCHIRESISTANCE_FIELD_NUMBER;
          hash = (53 * hash) + getRightBronchiResistance().hashCode();
        }
        if (hasRightAlveoliResistance()) {
          hash = (37 * hash) + RIGHTALVEOLIRESISTANCE_FIELD_NUMBER;
          hash = (53 * hash) + getRightAlveoliResistance().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code pulse.multiplex_ventilator.bind.MultiplexVentilatorData.BronchiAlveoliResistanceData}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:pulse.multiplex_ventilator.bind.MultiplexVentilatorData.BronchiAlveoliResistanceData)
          pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceDataOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return pulse.multiplex_ventilator.bind.MultiplexVentilator.internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_BronchiAlveoliResistanceData_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return pulse.multiplex_ventilator.bind.MultiplexVentilator.internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_BronchiAlveoliResistanceData_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData.class, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData.Builder.class);
        }

        // Construct using pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          if (leftBronchiResistanceBuilder_ == null) {
            leftBronchiResistance_ = null;
          } else {
            leftBronchiResistance_ = null;
            leftBronchiResistanceBuilder_ = null;
          }
          if (leftAlveoliResistanceBuilder_ == null) {
            leftAlveoliResistance_ = null;
          } else {
            leftAlveoliResistance_ = null;
            leftAlveoliResistanceBuilder_ = null;
          }
          if (rightBronchiResistanceBuilder_ == null) {
            rightBronchiResistance_ = null;
          } else {
            rightBronchiResistance_ = null;
            rightBronchiResistanceBuilder_ = null;
          }
          if (rightAlveoliResistanceBuilder_ == null) {
            rightAlveoliResistance_ = null;
          } else {
            rightAlveoliResistance_ = null;
            rightAlveoliResistanceBuilder_ = null;
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return pulse.multiplex_ventilator.bind.MultiplexVentilator.internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_BronchiAlveoliResistanceData_descriptor;
        }

        @java.lang.Override
        public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData getDefaultInstanceForType() {
          return pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData.getDefaultInstance();
        }

        @java.lang.Override
        public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData build() {
          pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData buildPartial() {
          pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData result = new pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData(this);
          if (leftBronchiResistanceBuilder_ == null) {
            result.leftBronchiResistance_ = leftBronchiResistance_;
          } else {
            result.leftBronchiResistance_ = leftBronchiResistanceBuilder_.build();
          }
          if (leftAlveoliResistanceBuilder_ == null) {
            result.leftAlveoliResistance_ = leftAlveoliResistance_;
          } else {
            result.leftAlveoliResistance_ = leftAlveoliResistanceBuilder_.build();
          }
          if (rightBronchiResistanceBuilder_ == null) {
            result.rightBronchiResistance_ = rightBronchiResistance_;
          } else {
            result.rightBronchiResistance_ = rightBronchiResistanceBuilder_.build();
          }
          if (rightAlveoliResistanceBuilder_ == null) {
            result.rightAlveoliResistance_ = rightAlveoliResistance_;
          } else {
            result.rightAlveoliResistance_ = rightAlveoliResistanceBuilder_.build();
          }
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData) {
            return mergeFrom((pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData other) {
          if (other == pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData.getDefaultInstance()) return this;
          if (other.hasLeftBronchiResistance()) {
            mergeLeftBronchiResistance(other.getLeftBronchiResistance());
          }
          if (other.hasLeftAlveoliResistance()) {
            mergeLeftAlveoliResistance(other.getLeftAlveoliResistance());
          }
          if (other.hasRightBronchiResistance()) {
            mergeRightBronchiResistance(other.getRightBronchiResistance());
          }
          if (other.hasRightAlveoliResistance()) {
            mergeRightAlveoliResistance(other.getRightAlveoliResistance());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData leftBronchiResistance_;
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder> leftBronchiResistanceBuilder_;
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftBronchiResistance = 1;</code>
         * @return Whether the leftBronchiResistance field is set.
         */
        public boolean hasLeftBronchiResistance() {
          return leftBronchiResistanceBuilder_ != null || leftBronchiResistance_ != null;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftBronchiResistance = 1;</code>
         * @return The leftBronchiResistance.
         */
        public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData getLeftBronchiResistance() {
          if (leftBronchiResistanceBuilder_ == null) {
            return leftBronchiResistance_ == null ? pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.getDefaultInstance() : leftBronchiResistance_;
          } else {
            return leftBronchiResistanceBuilder_.getMessage();
          }
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftBronchiResistance = 1;</code>
         */
        public Builder setLeftBronchiResistance(pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData value) {
          if (leftBronchiResistanceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            leftBronchiResistance_ = value;
            onChanged();
          } else {
            leftBronchiResistanceBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftBronchiResistance = 1;</code>
         */
        public Builder setLeftBronchiResistance(
            pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder builderForValue) {
          if (leftBronchiResistanceBuilder_ == null) {
            leftBronchiResistance_ = builderForValue.build();
            onChanged();
          } else {
            leftBronchiResistanceBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftBronchiResistance = 1;</code>
         */
        public Builder mergeLeftBronchiResistance(pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData value) {
          if (leftBronchiResistanceBuilder_ == null) {
            if (leftBronchiResistance_ != null) {
              leftBronchiResistance_ =
                pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.newBuilder(leftBronchiResistance_).mergeFrom(value).buildPartial();
            } else {
              leftBronchiResistance_ = value;
            }
            onChanged();
          } else {
            leftBronchiResistanceBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftBronchiResistance = 1;</code>
         */
        public Builder clearLeftBronchiResistance() {
          if (leftBronchiResistanceBuilder_ == null) {
            leftBronchiResistance_ = null;
            onChanged();
          } else {
            leftBronchiResistance_ = null;
            leftBronchiResistanceBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftBronchiResistance = 1;</code>
         */
        public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder getLeftBronchiResistanceBuilder() {
          
          onChanged();
          return getLeftBronchiResistanceFieldBuilder().getBuilder();
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftBronchiResistance = 1;</code>
         */
        public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder getLeftBronchiResistanceOrBuilder() {
          if (leftBronchiResistanceBuilder_ != null) {
            return leftBronchiResistanceBuilder_.getMessageOrBuilder();
          } else {
            return leftBronchiResistance_ == null ?
                pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.getDefaultInstance() : leftBronchiResistance_;
          }
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftBronchiResistance = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder> 
            getLeftBronchiResistanceFieldBuilder() {
          if (leftBronchiResistanceBuilder_ == null) {
            leftBronchiResistanceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder>(
                    getLeftBronchiResistance(),
                    getParentForChildren(),
                    isClean());
            leftBronchiResistance_ = null;
          }
          return leftBronchiResistanceBuilder_;
        }

        private pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData leftAlveoliResistance_;
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder> leftAlveoliResistanceBuilder_;
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftAlveoliResistance = 2;</code>
         * @return Whether the leftAlveoliResistance field is set.
         */
        public boolean hasLeftAlveoliResistance() {
          return leftAlveoliResistanceBuilder_ != null || leftAlveoliResistance_ != null;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftAlveoliResistance = 2;</code>
         * @return The leftAlveoliResistance.
         */
        public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData getLeftAlveoliResistance() {
          if (leftAlveoliResistanceBuilder_ == null) {
            return leftAlveoliResistance_ == null ? pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.getDefaultInstance() : leftAlveoliResistance_;
          } else {
            return leftAlveoliResistanceBuilder_.getMessage();
          }
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftAlveoliResistance = 2;</code>
         */
        public Builder setLeftAlveoliResistance(pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData value) {
          if (leftAlveoliResistanceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            leftAlveoliResistance_ = value;
            onChanged();
          } else {
            leftAlveoliResistanceBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftAlveoliResistance = 2;</code>
         */
        public Builder setLeftAlveoliResistance(
            pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder builderForValue) {
          if (leftAlveoliResistanceBuilder_ == null) {
            leftAlveoliResistance_ = builderForValue.build();
            onChanged();
          } else {
            leftAlveoliResistanceBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftAlveoliResistance = 2;</code>
         */
        public Builder mergeLeftAlveoliResistance(pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData value) {
          if (leftAlveoliResistanceBuilder_ == null) {
            if (leftAlveoliResistance_ != null) {
              leftAlveoliResistance_ =
                pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.newBuilder(leftAlveoliResistance_).mergeFrom(value).buildPartial();
            } else {
              leftAlveoliResistance_ = value;
            }
            onChanged();
          } else {
            leftAlveoliResistanceBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftAlveoliResistance = 2;</code>
         */
        public Builder clearLeftAlveoliResistance() {
          if (leftAlveoliResistanceBuilder_ == null) {
            leftAlveoliResistance_ = null;
            onChanged();
          } else {
            leftAlveoliResistance_ = null;
            leftAlveoliResistanceBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftAlveoliResistance = 2;</code>
         */
        public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder getLeftAlveoliResistanceBuilder() {
          
          onChanged();
          return getLeftAlveoliResistanceFieldBuilder().getBuilder();
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftAlveoliResistance = 2;</code>
         */
        public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder getLeftAlveoliResistanceOrBuilder() {
          if (leftAlveoliResistanceBuilder_ != null) {
            return leftAlveoliResistanceBuilder_.getMessageOrBuilder();
          } else {
            return leftAlveoliResistance_ == null ?
                pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.getDefaultInstance() : leftAlveoliResistance_;
          }
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftAlveoliResistance = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder> 
            getLeftAlveoliResistanceFieldBuilder() {
          if (leftAlveoliResistanceBuilder_ == null) {
            leftAlveoliResistanceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder>(
                    getLeftAlveoliResistance(),
                    getParentForChildren(),
                    isClean());
            leftAlveoliResistance_ = null;
          }
          return leftAlveoliResistanceBuilder_;
        }

        private pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData rightBronchiResistance_;
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder> rightBronchiResistanceBuilder_;
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightBronchiResistance = 3;</code>
         * @return Whether the rightBronchiResistance field is set.
         */
        public boolean hasRightBronchiResistance() {
          return rightBronchiResistanceBuilder_ != null || rightBronchiResistance_ != null;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightBronchiResistance = 3;</code>
         * @return The rightBronchiResistance.
         */
        public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData getRightBronchiResistance() {
          if (rightBronchiResistanceBuilder_ == null) {
            return rightBronchiResistance_ == null ? pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.getDefaultInstance() : rightBronchiResistance_;
          } else {
            return rightBronchiResistanceBuilder_.getMessage();
          }
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightBronchiResistance = 3;</code>
         */
        public Builder setRightBronchiResistance(pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData value) {
          if (rightBronchiResistanceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            rightBronchiResistance_ = value;
            onChanged();
          } else {
            rightBronchiResistanceBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightBronchiResistance = 3;</code>
         */
        public Builder setRightBronchiResistance(
            pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder builderForValue) {
          if (rightBronchiResistanceBuilder_ == null) {
            rightBronchiResistance_ = builderForValue.build();
            onChanged();
          } else {
            rightBronchiResistanceBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightBronchiResistance = 3;</code>
         */
        public Builder mergeRightBronchiResistance(pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData value) {
          if (rightBronchiResistanceBuilder_ == null) {
            if (rightBronchiResistance_ != null) {
              rightBronchiResistance_ =
                pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.newBuilder(rightBronchiResistance_).mergeFrom(value).buildPartial();
            } else {
              rightBronchiResistance_ = value;
            }
            onChanged();
          } else {
            rightBronchiResistanceBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightBronchiResistance = 3;</code>
         */
        public Builder clearRightBronchiResistance() {
          if (rightBronchiResistanceBuilder_ == null) {
            rightBronchiResistance_ = null;
            onChanged();
          } else {
            rightBronchiResistance_ = null;
            rightBronchiResistanceBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightBronchiResistance = 3;</code>
         */
        public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder getRightBronchiResistanceBuilder() {
          
          onChanged();
          return getRightBronchiResistanceFieldBuilder().getBuilder();
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightBronchiResistance = 3;</code>
         */
        public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder getRightBronchiResistanceOrBuilder() {
          if (rightBronchiResistanceBuilder_ != null) {
            return rightBronchiResistanceBuilder_.getMessageOrBuilder();
          } else {
            return rightBronchiResistance_ == null ?
                pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.getDefaultInstance() : rightBronchiResistance_;
          }
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightBronchiResistance = 3;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder> 
            getRightBronchiResistanceFieldBuilder() {
          if (rightBronchiResistanceBuilder_ == null) {
            rightBronchiResistanceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder>(
                    getRightBronchiResistance(),
                    getParentForChildren(),
                    isClean());
            rightBronchiResistance_ = null;
          }
          return rightBronchiResistanceBuilder_;
        }

        private pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData rightAlveoliResistance_;
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder> rightAlveoliResistanceBuilder_;
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightAlveoliResistance = 4;</code>
         * @return Whether the rightAlveoliResistance field is set.
         */
        public boolean hasRightAlveoliResistance() {
          return rightAlveoliResistanceBuilder_ != null || rightAlveoliResistance_ != null;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightAlveoliResistance = 4;</code>
         * @return The rightAlveoliResistance.
         */
        public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData getRightAlveoliResistance() {
          if (rightAlveoliResistanceBuilder_ == null) {
            return rightAlveoliResistance_ == null ? pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.getDefaultInstance() : rightAlveoliResistance_;
          } else {
            return rightAlveoliResistanceBuilder_.getMessage();
          }
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightAlveoliResistance = 4;</code>
         */
        public Builder setRightAlveoliResistance(pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData value) {
          if (rightAlveoliResistanceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            rightAlveoliResistance_ = value;
            onChanged();
          } else {
            rightAlveoliResistanceBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightAlveoliResistance = 4;</code>
         */
        public Builder setRightAlveoliResistance(
            pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder builderForValue) {
          if (rightAlveoliResistanceBuilder_ == null) {
            rightAlveoliResistance_ = builderForValue.build();
            onChanged();
          } else {
            rightAlveoliResistanceBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightAlveoliResistance = 4;</code>
         */
        public Builder mergeRightAlveoliResistance(pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData value) {
          if (rightAlveoliResistanceBuilder_ == null) {
            if (rightAlveoliResistance_ != null) {
              rightAlveoliResistance_ =
                pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.newBuilder(rightAlveoliResistance_).mergeFrom(value).buildPartial();
            } else {
              rightAlveoliResistance_ = value;
            }
            onChanged();
          } else {
            rightAlveoliResistanceBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightAlveoliResistance = 4;</code>
         */
        public Builder clearRightAlveoliResistance() {
          if (rightAlveoliResistanceBuilder_ == null) {
            rightAlveoliResistance_ = null;
            onChanged();
          } else {
            rightAlveoliResistance_ = null;
            rightAlveoliResistanceBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightAlveoliResistance = 4;</code>
         */
        public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder getRightAlveoliResistanceBuilder() {
          
          onChanged();
          return getRightAlveoliResistanceFieldBuilder().getBuilder();
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightAlveoliResistance = 4;</code>
         */
        public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder getRightAlveoliResistanceOrBuilder() {
          if (rightAlveoliResistanceBuilder_ != null) {
            return rightAlveoliResistanceBuilder_.getMessageOrBuilder();
          } else {
            return rightAlveoliResistance_ == null ?
                pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.getDefaultInstance() : rightAlveoliResistance_;
          }
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData RightAlveoliResistance = 4;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder> 
            getRightAlveoliResistanceFieldBuilder() {
          if (rightAlveoliResistanceBuilder_ == null) {
            rightAlveoliResistanceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder>(
                    getRightAlveoliResistance(),
                    getParentForChildren(),
                    isClean());
            rightAlveoliResistance_ = null;
          }
          return rightAlveoliResistanceBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:pulse.multiplex_ventilator.bind.MultiplexVentilatorData.BronchiAlveoliResistanceData)
      }

      // @@protoc_insertion_point(class_scope:pulse.multiplex_ventilator.bind.MultiplexVentilatorData.BronchiAlveoliResistanceData)
      private static final pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData();
      }

      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<BronchiAlveoliResistanceData>
          PARSER = new com.google.protobuf.AbstractParser<BronchiAlveoliResistanceData>() {
        @java.lang.Override
        public BronchiAlveoliResistanceData parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new BronchiAlveoliResistanceData(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<BronchiAlveoliResistanceData> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<BronchiAlveoliResistanceData> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface SideComplianceDataOrBuilder extends
        // @@protoc_insertion_point(interface_extends:pulse.multiplex_ventilator.bind.MultiplexVentilatorData.SideComplianceData)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftSideCompliance = 1;</code>
       * @return Whether the leftSideCompliance field is set.
       */
      boolean hasLeftSideCompliance();
      /**
       * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftSideCompliance = 1;</code>
       * @return The leftSideCompliance.
       */
      pulse.cdm.bind.Properties.ScalarVolumePerPressureData getLeftSideCompliance();
      /**
       * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftSideCompliance = 1;</code>
       */
      pulse.cdm.bind.Properties.ScalarVolumePerPressureDataOrBuilder getLeftSideComplianceOrBuilder();

      /**
       * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightSideCompliance = 2;</code>
       * @return Whether the rightSideCompliance field is set.
       */
      boolean hasRightSideCompliance();
      /**
       * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightSideCompliance = 2;</code>
       * @return The rightSideCompliance.
       */
      pulse.cdm.bind.Properties.ScalarVolumePerPressureData getRightSideCompliance();
      /**
       * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightSideCompliance = 2;</code>
       */
      pulse.cdm.bind.Properties.ScalarVolumePerPressureDataOrBuilder getRightSideComplianceOrBuilder();
    }
    /**
     * Protobuf type {@code pulse.multiplex_ventilator.bind.MultiplexVentilatorData.SideComplianceData}
     */
    public  static final class SideComplianceData extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:pulse.multiplex_ventilator.bind.MultiplexVentilatorData.SideComplianceData)
        SideComplianceDataOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use SideComplianceData.newBuilder() to construct.
      private SideComplianceData(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private SideComplianceData() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new SideComplianceData();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private SideComplianceData(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                pulse.cdm.bind.Properties.ScalarVolumePerPressureData.Builder subBuilder = null;
                if (leftSideCompliance_ != null) {
                  subBuilder = leftSideCompliance_.toBuilder();
                }
                leftSideCompliance_ = input.readMessage(pulse.cdm.bind.Properties.ScalarVolumePerPressureData.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(leftSideCompliance_);
                  leftSideCompliance_ = subBuilder.buildPartial();
                }

                break;
              }
              case 18: {
                pulse.cdm.bind.Properties.ScalarVolumePerPressureData.Builder subBuilder = null;
                if (rightSideCompliance_ != null) {
                  subBuilder = rightSideCompliance_.toBuilder();
                }
                rightSideCompliance_ = input.readMessage(pulse.cdm.bind.Properties.ScalarVolumePerPressureData.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(rightSideCompliance_);
                  rightSideCompliance_ = subBuilder.buildPartial();
                }

                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pulse.multiplex_ventilator.bind.MultiplexVentilator.internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_SideComplianceData_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pulse.multiplex_ventilator.bind.MultiplexVentilator.internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_SideComplianceData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData.class, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData.Builder.class);
      }

      public static final int LEFTSIDECOMPLIANCE_FIELD_NUMBER = 1;
      private pulse.cdm.bind.Properties.ScalarVolumePerPressureData leftSideCompliance_;
      /**
       * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftSideCompliance = 1;</code>
       * @return Whether the leftSideCompliance field is set.
       */
      public boolean hasLeftSideCompliance() {
        return leftSideCompliance_ != null;
      }
      /**
       * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftSideCompliance = 1;</code>
       * @return The leftSideCompliance.
       */
      public pulse.cdm.bind.Properties.ScalarVolumePerPressureData getLeftSideCompliance() {
        return leftSideCompliance_ == null ? pulse.cdm.bind.Properties.ScalarVolumePerPressureData.getDefaultInstance() : leftSideCompliance_;
      }
      /**
       * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftSideCompliance = 1;</code>
       */
      public pulse.cdm.bind.Properties.ScalarVolumePerPressureDataOrBuilder getLeftSideComplianceOrBuilder() {
        return getLeftSideCompliance();
      }

      public static final int RIGHTSIDECOMPLIANCE_FIELD_NUMBER = 2;
      private pulse.cdm.bind.Properties.ScalarVolumePerPressureData rightSideCompliance_;
      /**
       * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightSideCompliance = 2;</code>
       * @return Whether the rightSideCompliance field is set.
       */
      public boolean hasRightSideCompliance() {
        return rightSideCompliance_ != null;
      }
      /**
       * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightSideCompliance = 2;</code>
       * @return The rightSideCompliance.
       */
      public pulse.cdm.bind.Properties.ScalarVolumePerPressureData getRightSideCompliance() {
        return rightSideCompliance_ == null ? pulse.cdm.bind.Properties.ScalarVolumePerPressureData.getDefaultInstance() : rightSideCompliance_;
      }
      /**
       * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightSideCompliance = 2;</code>
       */
      public pulse.cdm.bind.Properties.ScalarVolumePerPressureDataOrBuilder getRightSideComplianceOrBuilder() {
        return getRightSideCompliance();
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (leftSideCompliance_ != null) {
          output.writeMessage(1, getLeftSideCompliance());
        }
        if (rightSideCompliance_ != null) {
          output.writeMessage(2, getRightSideCompliance());
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (leftSideCompliance_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, getLeftSideCompliance());
        }
        if (rightSideCompliance_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, getRightSideCompliance());
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData)) {
          return super.equals(obj);
        }
        pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData other = (pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData) obj;

        if (hasLeftSideCompliance() != other.hasLeftSideCompliance()) return false;
        if (hasLeftSideCompliance()) {
          if (!getLeftSideCompliance()
              .equals(other.getLeftSideCompliance())) return false;
        }
        if (hasRightSideCompliance() != other.hasRightSideCompliance()) return false;
        if (hasRightSideCompliance()) {
          if (!getRightSideCompliance()
              .equals(other.getRightSideCompliance())) return false;
        }
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasLeftSideCompliance()) {
          hash = (37 * hash) + LEFTSIDECOMPLIANCE_FIELD_NUMBER;
          hash = (53 * hash) + getLeftSideCompliance().hashCode();
        }
        if (hasRightSideCompliance()) {
          hash = (37 * hash) + RIGHTSIDECOMPLIANCE_FIELD_NUMBER;
          hash = (53 * hash) + getRightSideCompliance().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code pulse.multiplex_ventilator.bind.MultiplexVentilatorData.SideComplianceData}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:pulse.multiplex_ventilator.bind.MultiplexVentilatorData.SideComplianceData)
          pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceDataOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return pulse.multiplex_ventilator.bind.MultiplexVentilator.internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_SideComplianceData_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return pulse.multiplex_ventilator.bind.MultiplexVentilator.internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_SideComplianceData_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData.class, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData.Builder.class);
        }

        // Construct using pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          if (leftSideComplianceBuilder_ == null) {
            leftSideCompliance_ = null;
          } else {
            leftSideCompliance_ = null;
            leftSideComplianceBuilder_ = null;
          }
          if (rightSideComplianceBuilder_ == null) {
            rightSideCompliance_ = null;
          } else {
            rightSideCompliance_ = null;
            rightSideComplianceBuilder_ = null;
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return pulse.multiplex_ventilator.bind.MultiplexVentilator.internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_SideComplianceData_descriptor;
        }

        @java.lang.Override
        public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData getDefaultInstanceForType() {
          return pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData.getDefaultInstance();
        }

        @java.lang.Override
        public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData build() {
          pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData buildPartial() {
          pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData result = new pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData(this);
          if (leftSideComplianceBuilder_ == null) {
            result.leftSideCompliance_ = leftSideCompliance_;
          } else {
            result.leftSideCompliance_ = leftSideComplianceBuilder_.build();
          }
          if (rightSideComplianceBuilder_ == null) {
            result.rightSideCompliance_ = rightSideCompliance_;
          } else {
            result.rightSideCompliance_ = rightSideComplianceBuilder_.build();
          }
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData) {
            return mergeFrom((pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData other) {
          if (other == pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData.getDefaultInstance()) return this;
          if (other.hasLeftSideCompliance()) {
            mergeLeftSideCompliance(other.getLeftSideCompliance());
          }
          if (other.hasRightSideCompliance()) {
            mergeRightSideCompliance(other.getRightSideCompliance());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private pulse.cdm.bind.Properties.ScalarVolumePerPressureData leftSideCompliance_;
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.cdm.bind.Properties.ScalarVolumePerPressureData, pulse.cdm.bind.Properties.ScalarVolumePerPressureData.Builder, pulse.cdm.bind.Properties.ScalarVolumePerPressureDataOrBuilder> leftSideComplianceBuilder_;
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftSideCompliance = 1;</code>
         * @return Whether the leftSideCompliance field is set.
         */
        public boolean hasLeftSideCompliance() {
          return leftSideComplianceBuilder_ != null || leftSideCompliance_ != null;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftSideCompliance = 1;</code>
         * @return The leftSideCompliance.
         */
        public pulse.cdm.bind.Properties.ScalarVolumePerPressureData getLeftSideCompliance() {
          if (leftSideComplianceBuilder_ == null) {
            return leftSideCompliance_ == null ? pulse.cdm.bind.Properties.ScalarVolumePerPressureData.getDefaultInstance() : leftSideCompliance_;
          } else {
            return leftSideComplianceBuilder_.getMessage();
          }
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftSideCompliance = 1;</code>
         */
        public Builder setLeftSideCompliance(pulse.cdm.bind.Properties.ScalarVolumePerPressureData value) {
          if (leftSideComplianceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            leftSideCompliance_ = value;
            onChanged();
          } else {
            leftSideComplianceBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftSideCompliance = 1;</code>
         */
        public Builder setLeftSideCompliance(
            pulse.cdm.bind.Properties.ScalarVolumePerPressureData.Builder builderForValue) {
          if (leftSideComplianceBuilder_ == null) {
            leftSideCompliance_ = builderForValue.build();
            onChanged();
          } else {
            leftSideComplianceBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftSideCompliance = 1;</code>
         */
        public Builder mergeLeftSideCompliance(pulse.cdm.bind.Properties.ScalarVolumePerPressureData value) {
          if (leftSideComplianceBuilder_ == null) {
            if (leftSideCompliance_ != null) {
              leftSideCompliance_ =
                pulse.cdm.bind.Properties.ScalarVolumePerPressureData.newBuilder(leftSideCompliance_).mergeFrom(value).buildPartial();
            } else {
              leftSideCompliance_ = value;
            }
            onChanged();
          } else {
            leftSideComplianceBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftSideCompliance = 1;</code>
         */
        public Builder clearLeftSideCompliance() {
          if (leftSideComplianceBuilder_ == null) {
            leftSideCompliance_ = null;
            onChanged();
          } else {
            leftSideCompliance_ = null;
            leftSideComplianceBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftSideCompliance = 1;</code>
         */
        public pulse.cdm.bind.Properties.ScalarVolumePerPressureData.Builder getLeftSideComplianceBuilder() {
          
          onChanged();
          return getLeftSideComplianceFieldBuilder().getBuilder();
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftSideCompliance = 1;</code>
         */
        public pulse.cdm.bind.Properties.ScalarVolumePerPressureDataOrBuilder getLeftSideComplianceOrBuilder() {
          if (leftSideComplianceBuilder_ != null) {
            return leftSideComplianceBuilder_.getMessageOrBuilder();
          } else {
            return leftSideCompliance_ == null ?
                pulse.cdm.bind.Properties.ScalarVolumePerPressureData.getDefaultInstance() : leftSideCompliance_;
          }
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftSideCompliance = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.cdm.bind.Properties.ScalarVolumePerPressureData, pulse.cdm.bind.Properties.ScalarVolumePerPressureData.Builder, pulse.cdm.bind.Properties.ScalarVolumePerPressureDataOrBuilder> 
            getLeftSideComplianceFieldBuilder() {
          if (leftSideComplianceBuilder_ == null) {
            leftSideComplianceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                pulse.cdm.bind.Properties.ScalarVolumePerPressureData, pulse.cdm.bind.Properties.ScalarVolumePerPressureData.Builder, pulse.cdm.bind.Properties.ScalarVolumePerPressureDataOrBuilder>(
                    getLeftSideCompliance(),
                    getParentForChildren(),
                    isClean());
            leftSideCompliance_ = null;
          }
          return leftSideComplianceBuilder_;
        }

        private pulse.cdm.bind.Properties.ScalarVolumePerPressureData rightSideCompliance_;
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.cdm.bind.Properties.ScalarVolumePerPressureData, pulse.cdm.bind.Properties.ScalarVolumePerPressureData.Builder, pulse.cdm.bind.Properties.ScalarVolumePerPressureDataOrBuilder> rightSideComplianceBuilder_;
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightSideCompliance = 2;</code>
         * @return Whether the rightSideCompliance field is set.
         */
        public boolean hasRightSideCompliance() {
          return rightSideComplianceBuilder_ != null || rightSideCompliance_ != null;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightSideCompliance = 2;</code>
         * @return The rightSideCompliance.
         */
        public pulse.cdm.bind.Properties.ScalarVolumePerPressureData getRightSideCompliance() {
          if (rightSideComplianceBuilder_ == null) {
            return rightSideCompliance_ == null ? pulse.cdm.bind.Properties.ScalarVolumePerPressureData.getDefaultInstance() : rightSideCompliance_;
          } else {
            return rightSideComplianceBuilder_.getMessage();
          }
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightSideCompliance = 2;</code>
         */
        public Builder setRightSideCompliance(pulse.cdm.bind.Properties.ScalarVolumePerPressureData value) {
          if (rightSideComplianceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            rightSideCompliance_ = value;
            onChanged();
          } else {
            rightSideComplianceBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightSideCompliance = 2;</code>
         */
        public Builder setRightSideCompliance(
            pulse.cdm.bind.Properties.ScalarVolumePerPressureData.Builder builderForValue) {
          if (rightSideComplianceBuilder_ == null) {
            rightSideCompliance_ = builderForValue.build();
            onChanged();
          } else {
            rightSideComplianceBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightSideCompliance = 2;</code>
         */
        public Builder mergeRightSideCompliance(pulse.cdm.bind.Properties.ScalarVolumePerPressureData value) {
          if (rightSideComplianceBuilder_ == null) {
            if (rightSideCompliance_ != null) {
              rightSideCompliance_ =
                pulse.cdm.bind.Properties.ScalarVolumePerPressureData.newBuilder(rightSideCompliance_).mergeFrom(value).buildPartial();
            } else {
              rightSideCompliance_ = value;
            }
            onChanged();
          } else {
            rightSideComplianceBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightSideCompliance = 2;</code>
         */
        public Builder clearRightSideCompliance() {
          if (rightSideComplianceBuilder_ == null) {
            rightSideCompliance_ = null;
            onChanged();
          } else {
            rightSideCompliance_ = null;
            rightSideComplianceBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightSideCompliance = 2;</code>
         */
        public pulse.cdm.bind.Properties.ScalarVolumePerPressureData.Builder getRightSideComplianceBuilder() {
          
          onChanged();
          return getRightSideComplianceFieldBuilder().getBuilder();
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightSideCompliance = 2;</code>
         */
        public pulse.cdm.bind.Properties.ScalarVolumePerPressureDataOrBuilder getRightSideComplianceOrBuilder() {
          if (rightSideComplianceBuilder_ != null) {
            return rightSideComplianceBuilder_.getMessageOrBuilder();
          } else {
            return rightSideCompliance_ == null ?
                pulse.cdm.bind.Properties.ScalarVolumePerPressureData.getDefaultInstance() : rightSideCompliance_;
          }
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightSideCompliance = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.cdm.bind.Properties.ScalarVolumePerPressureData, pulse.cdm.bind.Properties.ScalarVolumePerPressureData.Builder, pulse.cdm.bind.Properties.ScalarVolumePerPressureDataOrBuilder> 
            getRightSideComplianceFieldBuilder() {
          if (rightSideComplianceBuilder_ == null) {
            rightSideComplianceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                pulse.cdm.bind.Properties.ScalarVolumePerPressureData, pulse.cdm.bind.Properties.ScalarVolumePerPressureData.Builder, pulse.cdm.bind.Properties.ScalarVolumePerPressureDataOrBuilder>(
                    getRightSideCompliance(),
                    getParentForChildren(),
                    isClean());
            rightSideCompliance_ = null;
          }
          return rightSideComplianceBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:pulse.multiplex_ventilator.bind.MultiplexVentilatorData.SideComplianceData)
      }

      // @@protoc_insertion_point(class_scope:pulse.multiplex_ventilator.bind.MultiplexVentilatorData.SideComplianceData)
      private static final pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData();
      }

      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<SideComplianceData>
          PARSER = new com.google.protobuf.AbstractParser<SideComplianceData>() {
        @java.lang.Override
        public SideComplianceData parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new SideComplianceData(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<SideComplianceData> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<SideComplianceData> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface LungComplianceDataOrBuilder extends
        // @@protoc_insertion_point(interface_extends:pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungComplianceData)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftChestWallCompliance = 1;</code>
       * @return Whether the leftChestWallCompliance field is set.
       */
      boolean hasLeftChestWallCompliance();
      /**
       * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftChestWallCompliance = 1;</code>
       * @return The leftChestWallCompliance.
       */
      pulse.cdm.bind.Properties.ScalarVolumePerPressureData getLeftChestWallCompliance();
      /**
       * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftChestWallCompliance = 1;</code>
       */
      pulse.cdm.bind.Properties.ScalarVolumePerPressureDataOrBuilder getLeftChestWallComplianceOrBuilder();

      /**
       * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftLungCompliance = 2;</code>
       * @return Whether the leftLungCompliance field is set.
       */
      boolean hasLeftLungCompliance();
      /**
       * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftLungCompliance = 2;</code>
       * @return The leftLungCompliance.
       */
      pulse.cdm.bind.Properties.ScalarVolumePerPressureData getLeftLungCompliance();
      /**
       * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftLungCompliance = 2;</code>
       */
      pulse.cdm.bind.Properties.ScalarVolumePerPressureDataOrBuilder getLeftLungComplianceOrBuilder();

      /**
       * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightLungCompliance = 3;</code>
       * @return Whether the rightLungCompliance field is set.
       */
      boolean hasRightLungCompliance();
      /**
       * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightLungCompliance = 3;</code>
       * @return The rightLungCompliance.
       */
      pulse.cdm.bind.Properties.ScalarVolumePerPressureData getRightLungCompliance();
      /**
       * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightLungCompliance = 3;</code>
       */
      pulse.cdm.bind.Properties.ScalarVolumePerPressureDataOrBuilder getRightLungComplianceOrBuilder();

      /**
       * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightChestWallCompliance = 4;</code>
       * @return Whether the rightChestWallCompliance field is set.
       */
      boolean hasRightChestWallCompliance();
      /**
       * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightChestWallCompliance = 4;</code>
       * @return The rightChestWallCompliance.
       */
      pulse.cdm.bind.Properties.ScalarVolumePerPressureData getRightChestWallCompliance();
      /**
       * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightChestWallCompliance = 4;</code>
       */
      pulse.cdm.bind.Properties.ScalarVolumePerPressureDataOrBuilder getRightChestWallComplianceOrBuilder();
    }
    /**
     * Protobuf type {@code pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungComplianceData}
     */
    public  static final class LungComplianceData extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungComplianceData)
        LungComplianceDataOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use LungComplianceData.newBuilder() to construct.
      private LungComplianceData(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private LungComplianceData() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new LungComplianceData();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private LungComplianceData(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                pulse.cdm.bind.Properties.ScalarVolumePerPressureData.Builder subBuilder = null;
                if (leftChestWallCompliance_ != null) {
                  subBuilder = leftChestWallCompliance_.toBuilder();
                }
                leftChestWallCompliance_ = input.readMessage(pulse.cdm.bind.Properties.ScalarVolumePerPressureData.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(leftChestWallCompliance_);
                  leftChestWallCompliance_ = subBuilder.buildPartial();
                }

                break;
              }
              case 18: {
                pulse.cdm.bind.Properties.ScalarVolumePerPressureData.Builder subBuilder = null;
                if (leftLungCompliance_ != null) {
                  subBuilder = leftLungCompliance_.toBuilder();
                }
                leftLungCompliance_ = input.readMessage(pulse.cdm.bind.Properties.ScalarVolumePerPressureData.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(leftLungCompliance_);
                  leftLungCompliance_ = subBuilder.buildPartial();
                }

                break;
              }
              case 26: {
                pulse.cdm.bind.Properties.ScalarVolumePerPressureData.Builder subBuilder = null;
                if (rightLungCompliance_ != null) {
                  subBuilder = rightLungCompliance_.toBuilder();
                }
                rightLungCompliance_ = input.readMessage(pulse.cdm.bind.Properties.ScalarVolumePerPressureData.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(rightLungCompliance_);
                  rightLungCompliance_ = subBuilder.buildPartial();
                }

                break;
              }
              case 34: {
                pulse.cdm.bind.Properties.ScalarVolumePerPressureData.Builder subBuilder = null;
                if (rightChestWallCompliance_ != null) {
                  subBuilder = rightChestWallCompliance_.toBuilder();
                }
                rightChestWallCompliance_ = input.readMessage(pulse.cdm.bind.Properties.ScalarVolumePerPressureData.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(rightChestWallCompliance_);
                  rightChestWallCompliance_ = subBuilder.buildPartial();
                }

                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pulse.multiplex_ventilator.bind.MultiplexVentilator.internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_LungComplianceData_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pulse.multiplex_ventilator.bind.MultiplexVentilator.internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_LungComplianceData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData.class, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData.Builder.class);
      }

      public static final int LEFTCHESTWALLCOMPLIANCE_FIELD_NUMBER = 1;
      private pulse.cdm.bind.Properties.ScalarVolumePerPressureData leftChestWallCompliance_;
      /**
       * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftChestWallCompliance = 1;</code>
       * @return Whether the leftChestWallCompliance field is set.
       */
      public boolean hasLeftChestWallCompliance() {
        return leftChestWallCompliance_ != null;
      }
      /**
       * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftChestWallCompliance = 1;</code>
       * @return The leftChestWallCompliance.
       */
      public pulse.cdm.bind.Properties.ScalarVolumePerPressureData getLeftChestWallCompliance() {
        return leftChestWallCompliance_ == null ? pulse.cdm.bind.Properties.ScalarVolumePerPressureData.getDefaultInstance() : leftChestWallCompliance_;
      }
      /**
       * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftChestWallCompliance = 1;</code>
       */
      public pulse.cdm.bind.Properties.ScalarVolumePerPressureDataOrBuilder getLeftChestWallComplianceOrBuilder() {
        return getLeftChestWallCompliance();
      }

      public static final int LEFTLUNGCOMPLIANCE_FIELD_NUMBER = 2;
      private pulse.cdm.bind.Properties.ScalarVolumePerPressureData leftLungCompliance_;
      /**
       * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftLungCompliance = 2;</code>
       * @return Whether the leftLungCompliance field is set.
       */
      public boolean hasLeftLungCompliance() {
        return leftLungCompliance_ != null;
      }
      /**
       * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftLungCompliance = 2;</code>
       * @return The leftLungCompliance.
       */
      public pulse.cdm.bind.Properties.ScalarVolumePerPressureData getLeftLungCompliance() {
        return leftLungCompliance_ == null ? pulse.cdm.bind.Properties.ScalarVolumePerPressureData.getDefaultInstance() : leftLungCompliance_;
      }
      /**
       * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftLungCompliance = 2;</code>
       */
      public pulse.cdm.bind.Properties.ScalarVolumePerPressureDataOrBuilder getLeftLungComplianceOrBuilder() {
        return getLeftLungCompliance();
      }

      public static final int RIGHTLUNGCOMPLIANCE_FIELD_NUMBER = 3;
      private pulse.cdm.bind.Properties.ScalarVolumePerPressureData rightLungCompliance_;
      /**
       * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightLungCompliance = 3;</code>
       * @return Whether the rightLungCompliance field is set.
       */
      public boolean hasRightLungCompliance() {
        return rightLungCompliance_ != null;
      }
      /**
       * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightLungCompliance = 3;</code>
       * @return The rightLungCompliance.
       */
      public pulse.cdm.bind.Properties.ScalarVolumePerPressureData getRightLungCompliance() {
        return rightLungCompliance_ == null ? pulse.cdm.bind.Properties.ScalarVolumePerPressureData.getDefaultInstance() : rightLungCompliance_;
      }
      /**
       * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightLungCompliance = 3;</code>
       */
      public pulse.cdm.bind.Properties.ScalarVolumePerPressureDataOrBuilder getRightLungComplianceOrBuilder() {
        return getRightLungCompliance();
      }

      public static final int RIGHTCHESTWALLCOMPLIANCE_FIELD_NUMBER = 4;
      private pulse.cdm.bind.Properties.ScalarVolumePerPressureData rightChestWallCompliance_;
      /**
       * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightChestWallCompliance = 4;</code>
       * @return Whether the rightChestWallCompliance field is set.
       */
      public boolean hasRightChestWallCompliance() {
        return rightChestWallCompliance_ != null;
      }
      /**
       * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightChestWallCompliance = 4;</code>
       * @return The rightChestWallCompliance.
       */
      public pulse.cdm.bind.Properties.ScalarVolumePerPressureData getRightChestWallCompliance() {
        return rightChestWallCompliance_ == null ? pulse.cdm.bind.Properties.ScalarVolumePerPressureData.getDefaultInstance() : rightChestWallCompliance_;
      }
      /**
       * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightChestWallCompliance = 4;</code>
       */
      public pulse.cdm.bind.Properties.ScalarVolumePerPressureDataOrBuilder getRightChestWallComplianceOrBuilder() {
        return getRightChestWallCompliance();
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (leftChestWallCompliance_ != null) {
          output.writeMessage(1, getLeftChestWallCompliance());
        }
        if (leftLungCompliance_ != null) {
          output.writeMessage(2, getLeftLungCompliance());
        }
        if (rightLungCompliance_ != null) {
          output.writeMessage(3, getRightLungCompliance());
        }
        if (rightChestWallCompliance_ != null) {
          output.writeMessage(4, getRightChestWallCompliance());
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (leftChestWallCompliance_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, getLeftChestWallCompliance());
        }
        if (leftLungCompliance_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, getLeftLungCompliance());
        }
        if (rightLungCompliance_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, getRightLungCompliance());
        }
        if (rightChestWallCompliance_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, getRightChestWallCompliance());
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData)) {
          return super.equals(obj);
        }
        pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData other = (pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData) obj;

        if (hasLeftChestWallCompliance() != other.hasLeftChestWallCompliance()) return false;
        if (hasLeftChestWallCompliance()) {
          if (!getLeftChestWallCompliance()
              .equals(other.getLeftChestWallCompliance())) return false;
        }
        if (hasLeftLungCompliance() != other.hasLeftLungCompliance()) return false;
        if (hasLeftLungCompliance()) {
          if (!getLeftLungCompliance()
              .equals(other.getLeftLungCompliance())) return false;
        }
        if (hasRightLungCompliance() != other.hasRightLungCompliance()) return false;
        if (hasRightLungCompliance()) {
          if (!getRightLungCompliance()
              .equals(other.getRightLungCompliance())) return false;
        }
        if (hasRightChestWallCompliance() != other.hasRightChestWallCompliance()) return false;
        if (hasRightChestWallCompliance()) {
          if (!getRightChestWallCompliance()
              .equals(other.getRightChestWallCompliance())) return false;
        }
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasLeftChestWallCompliance()) {
          hash = (37 * hash) + LEFTCHESTWALLCOMPLIANCE_FIELD_NUMBER;
          hash = (53 * hash) + getLeftChestWallCompliance().hashCode();
        }
        if (hasLeftLungCompliance()) {
          hash = (37 * hash) + LEFTLUNGCOMPLIANCE_FIELD_NUMBER;
          hash = (53 * hash) + getLeftLungCompliance().hashCode();
        }
        if (hasRightLungCompliance()) {
          hash = (37 * hash) + RIGHTLUNGCOMPLIANCE_FIELD_NUMBER;
          hash = (53 * hash) + getRightLungCompliance().hashCode();
        }
        if (hasRightChestWallCompliance()) {
          hash = (37 * hash) + RIGHTCHESTWALLCOMPLIANCE_FIELD_NUMBER;
          hash = (53 * hash) + getRightChestWallCompliance().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungComplianceData}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungComplianceData)
          pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceDataOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return pulse.multiplex_ventilator.bind.MultiplexVentilator.internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_LungComplianceData_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return pulse.multiplex_ventilator.bind.MultiplexVentilator.internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_LungComplianceData_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData.class, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData.Builder.class);
        }

        // Construct using pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          if (leftChestWallComplianceBuilder_ == null) {
            leftChestWallCompliance_ = null;
          } else {
            leftChestWallCompliance_ = null;
            leftChestWallComplianceBuilder_ = null;
          }
          if (leftLungComplianceBuilder_ == null) {
            leftLungCompliance_ = null;
          } else {
            leftLungCompliance_ = null;
            leftLungComplianceBuilder_ = null;
          }
          if (rightLungComplianceBuilder_ == null) {
            rightLungCompliance_ = null;
          } else {
            rightLungCompliance_ = null;
            rightLungComplianceBuilder_ = null;
          }
          if (rightChestWallComplianceBuilder_ == null) {
            rightChestWallCompliance_ = null;
          } else {
            rightChestWallCompliance_ = null;
            rightChestWallComplianceBuilder_ = null;
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return pulse.multiplex_ventilator.bind.MultiplexVentilator.internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_LungComplianceData_descriptor;
        }

        @java.lang.Override
        public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData getDefaultInstanceForType() {
          return pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData.getDefaultInstance();
        }

        @java.lang.Override
        public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData build() {
          pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData buildPartial() {
          pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData result = new pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData(this);
          if (leftChestWallComplianceBuilder_ == null) {
            result.leftChestWallCompliance_ = leftChestWallCompliance_;
          } else {
            result.leftChestWallCompliance_ = leftChestWallComplianceBuilder_.build();
          }
          if (leftLungComplianceBuilder_ == null) {
            result.leftLungCompliance_ = leftLungCompliance_;
          } else {
            result.leftLungCompliance_ = leftLungComplianceBuilder_.build();
          }
          if (rightLungComplianceBuilder_ == null) {
            result.rightLungCompliance_ = rightLungCompliance_;
          } else {
            result.rightLungCompliance_ = rightLungComplianceBuilder_.build();
          }
          if (rightChestWallComplianceBuilder_ == null) {
            result.rightChestWallCompliance_ = rightChestWallCompliance_;
          } else {
            result.rightChestWallCompliance_ = rightChestWallComplianceBuilder_.build();
          }
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData) {
            return mergeFrom((pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData other) {
          if (other == pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData.getDefaultInstance()) return this;
          if (other.hasLeftChestWallCompliance()) {
            mergeLeftChestWallCompliance(other.getLeftChestWallCompliance());
          }
          if (other.hasLeftLungCompliance()) {
            mergeLeftLungCompliance(other.getLeftLungCompliance());
          }
          if (other.hasRightLungCompliance()) {
            mergeRightLungCompliance(other.getRightLungCompliance());
          }
          if (other.hasRightChestWallCompliance()) {
            mergeRightChestWallCompliance(other.getRightChestWallCompliance());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private pulse.cdm.bind.Properties.ScalarVolumePerPressureData leftChestWallCompliance_;
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.cdm.bind.Properties.ScalarVolumePerPressureData, pulse.cdm.bind.Properties.ScalarVolumePerPressureData.Builder, pulse.cdm.bind.Properties.ScalarVolumePerPressureDataOrBuilder> leftChestWallComplianceBuilder_;
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftChestWallCompliance = 1;</code>
         * @return Whether the leftChestWallCompliance field is set.
         */
        public boolean hasLeftChestWallCompliance() {
          return leftChestWallComplianceBuilder_ != null || leftChestWallCompliance_ != null;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftChestWallCompliance = 1;</code>
         * @return The leftChestWallCompliance.
         */
        public pulse.cdm.bind.Properties.ScalarVolumePerPressureData getLeftChestWallCompliance() {
          if (leftChestWallComplianceBuilder_ == null) {
            return leftChestWallCompliance_ == null ? pulse.cdm.bind.Properties.ScalarVolumePerPressureData.getDefaultInstance() : leftChestWallCompliance_;
          } else {
            return leftChestWallComplianceBuilder_.getMessage();
          }
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftChestWallCompliance = 1;</code>
         */
        public Builder setLeftChestWallCompliance(pulse.cdm.bind.Properties.ScalarVolumePerPressureData value) {
          if (leftChestWallComplianceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            leftChestWallCompliance_ = value;
            onChanged();
          } else {
            leftChestWallComplianceBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftChestWallCompliance = 1;</code>
         */
        public Builder setLeftChestWallCompliance(
            pulse.cdm.bind.Properties.ScalarVolumePerPressureData.Builder builderForValue) {
          if (leftChestWallComplianceBuilder_ == null) {
            leftChestWallCompliance_ = builderForValue.build();
            onChanged();
          } else {
            leftChestWallComplianceBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftChestWallCompliance = 1;</code>
         */
        public Builder mergeLeftChestWallCompliance(pulse.cdm.bind.Properties.ScalarVolumePerPressureData value) {
          if (leftChestWallComplianceBuilder_ == null) {
            if (leftChestWallCompliance_ != null) {
              leftChestWallCompliance_ =
                pulse.cdm.bind.Properties.ScalarVolumePerPressureData.newBuilder(leftChestWallCompliance_).mergeFrom(value).buildPartial();
            } else {
              leftChestWallCompliance_ = value;
            }
            onChanged();
          } else {
            leftChestWallComplianceBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftChestWallCompliance = 1;</code>
         */
        public Builder clearLeftChestWallCompliance() {
          if (leftChestWallComplianceBuilder_ == null) {
            leftChestWallCompliance_ = null;
            onChanged();
          } else {
            leftChestWallCompliance_ = null;
            leftChestWallComplianceBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftChestWallCompliance = 1;</code>
         */
        public pulse.cdm.bind.Properties.ScalarVolumePerPressureData.Builder getLeftChestWallComplianceBuilder() {
          
          onChanged();
          return getLeftChestWallComplianceFieldBuilder().getBuilder();
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftChestWallCompliance = 1;</code>
         */
        public pulse.cdm.bind.Properties.ScalarVolumePerPressureDataOrBuilder getLeftChestWallComplianceOrBuilder() {
          if (leftChestWallComplianceBuilder_ != null) {
            return leftChestWallComplianceBuilder_.getMessageOrBuilder();
          } else {
            return leftChestWallCompliance_ == null ?
                pulse.cdm.bind.Properties.ScalarVolumePerPressureData.getDefaultInstance() : leftChestWallCompliance_;
          }
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftChestWallCompliance = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.cdm.bind.Properties.ScalarVolumePerPressureData, pulse.cdm.bind.Properties.ScalarVolumePerPressureData.Builder, pulse.cdm.bind.Properties.ScalarVolumePerPressureDataOrBuilder> 
            getLeftChestWallComplianceFieldBuilder() {
          if (leftChestWallComplianceBuilder_ == null) {
            leftChestWallComplianceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                pulse.cdm.bind.Properties.ScalarVolumePerPressureData, pulse.cdm.bind.Properties.ScalarVolumePerPressureData.Builder, pulse.cdm.bind.Properties.ScalarVolumePerPressureDataOrBuilder>(
                    getLeftChestWallCompliance(),
                    getParentForChildren(),
                    isClean());
            leftChestWallCompliance_ = null;
          }
          return leftChestWallComplianceBuilder_;
        }

        private pulse.cdm.bind.Properties.ScalarVolumePerPressureData leftLungCompliance_;
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.cdm.bind.Properties.ScalarVolumePerPressureData, pulse.cdm.bind.Properties.ScalarVolumePerPressureData.Builder, pulse.cdm.bind.Properties.ScalarVolumePerPressureDataOrBuilder> leftLungComplianceBuilder_;
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftLungCompliance = 2;</code>
         * @return Whether the leftLungCompliance field is set.
         */
        public boolean hasLeftLungCompliance() {
          return leftLungComplianceBuilder_ != null || leftLungCompliance_ != null;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftLungCompliance = 2;</code>
         * @return The leftLungCompliance.
         */
        public pulse.cdm.bind.Properties.ScalarVolumePerPressureData getLeftLungCompliance() {
          if (leftLungComplianceBuilder_ == null) {
            return leftLungCompliance_ == null ? pulse.cdm.bind.Properties.ScalarVolumePerPressureData.getDefaultInstance() : leftLungCompliance_;
          } else {
            return leftLungComplianceBuilder_.getMessage();
          }
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftLungCompliance = 2;</code>
         */
        public Builder setLeftLungCompliance(pulse.cdm.bind.Properties.ScalarVolumePerPressureData value) {
          if (leftLungComplianceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            leftLungCompliance_ = value;
            onChanged();
          } else {
            leftLungComplianceBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftLungCompliance = 2;</code>
         */
        public Builder setLeftLungCompliance(
            pulse.cdm.bind.Properties.ScalarVolumePerPressureData.Builder builderForValue) {
          if (leftLungComplianceBuilder_ == null) {
            leftLungCompliance_ = builderForValue.build();
            onChanged();
          } else {
            leftLungComplianceBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftLungCompliance = 2;</code>
         */
        public Builder mergeLeftLungCompliance(pulse.cdm.bind.Properties.ScalarVolumePerPressureData value) {
          if (leftLungComplianceBuilder_ == null) {
            if (leftLungCompliance_ != null) {
              leftLungCompliance_ =
                pulse.cdm.bind.Properties.ScalarVolumePerPressureData.newBuilder(leftLungCompliance_).mergeFrom(value).buildPartial();
            } else {
              leftLungCompliance_ = value;
            }
            onChanged();
          } else {
            leftLungComplianceBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftLungCompliance = 2;</code>
         */
        public Builder clearLeftLungCompliance() {
          if (leftLungComplianceBuilder_ == null) {
            leftLungCompliance_ = null;
            onChanged();
          } else {
            leftLungCompliance_ = null;
            leftLungComplianceBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftLungCompliance = 2;</code>
         */
        public pulse.cdm.bind.Properties.ScalarVolumePerPressureData.Builder getLeftLungComplianceBuilder() {
          
          onChanged();
          return getLeftLungComplianceFieldBuilder().getBuilder();
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftLungCompliance = 2;</code>
         */
        public pulse.cdm.bind.Properties.ScalarVolumePerPressureDataOrBuilder getLeftLungComplianceOrBuilder() {
          if (leftLungComplianceBuilder_ != null) {
            return leftLungComplianceBuilder_.getMessageOrBuilder();
          } else {
            return leftLungCompliance_ == null ?
                pulse.cdm.bind.Properties.ScalarVolumePerPressureData.getDefaultInstance() : leftLungCompliance_;
          }
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData LeftLungCompliance = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.cdm.bind.Properties.ScalarVolumePerPressureData, pulse.cdm.bind.Properties.ScalarVolumePerPressureData.Builder, pulse.cdm.bind.Properties.ScalarVolumePerPressureDataOrBuilder> 
            getLeftLungComplianceFieldBuilder() {
          if (leftLungComplianceBuilder_ == null) {
            leftLungComplianceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                pulse.cdm.bind.Properties.ScalarVolumePerPressureData, pulse.cdm.bind.Properties.ScalarVolumePerPressureData.Builder, pulse.cdm.bind.Properties.ScalarVolumePerPressureDataOrBuilder>(
                    getLeftLungCompliance(),
                    getParentForChildren(),
                    isClean());
            leftLungCompliance_ = null;
          }
          return leftLungComplianceBuilder_;
        }

        private pulse.cdm.bind.Properties.ScalarVolumePerPressureData rightLungCompliance_;
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.cdm.bind.Properties.ScalarVolumePerPressureData, pulse.cdm.bind.Properties.ScalarVolumePerPressureData.Builder, pulse.cdm.bind.Properties.ScalarVolumePerPressureDataOrBuilder> rightLungComplianceBuilder_;
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightLungCompliance = 3;</code>
         * @return Whether the rightLungCompliance field is set.
         */
        public boolean hasRightLungCompliance() {
          return rightLungComplianceBuilder_ != null || rightLungCompliance_ != null;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightLungCompliance = 3;</code>
         * @return The rightLungCompliance.
         */
        public pulse.cdm.bind.Properties.ScalarVolumePerPressureData getRightLungCompliance() {
          if (rightLungComplianceBuilder_ == null) {
            return rightLungCompliance_ == null ? pulse.cdm.bind.Properties.ScalarVolumePerPressureData.getDefaultInstance() : rightLungCompliance_;
          } else {
            return rightLungComplianceBuilder_.getMessage();
          }
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightLungCompliance = 3;</code>
         */
        public Builder setRightLungCompliance(pulse.cdm.bind.Properties.ScalarVolumePerPressureData value) {
          if (rightLungComplianceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            rightLungCompliance_ = value;
            onChanged();
          } else {
            rightLungComplianceBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightLungCompliance = 3;</code>
         */
        public Builder setRightLungCompliance(
            pulse.cdm.bind.Properties.ScalarVolumePerPressureData.Builder builderForValue) {
          if (rightLungComplianceBuilder_ == null) {
            rightLungCompliance_ = builderForValue.build();
            onChanged();
          } else {
            rightLungComplianceBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightLungCompliance = 3;</code>
         */
        public Builder mergeRightLungCompliance(pulse.cdm.bind.Properties.ScalarVolumePerPressureData value) {
          if (rightLungComplianceBuilder_ == null) {
            if (rightLungCompliance_ != null) {
              rightLungCompliance_ =
                pulse.cdm.bind.Properties.ScalarVolumePerPressureData.newBuilder(rightLungCompliance_).mergeFrom(value).buildPartial();
            } else {
              rightLungCompliance_ = value;
            }
            onChanged();
          } else {
            rightLungComplianceBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightLungCompliance = 3;</code>
         */
        public Builder clearRightLungCompliance() {
          if (rightLungComplianceBuilder_ == null) {
            rightLungCompliance_ = null;
            onChanged();
          } else {
            rightLungCompliance_ = null;
            rightLungComplianceBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightLungCompliance = 3;</code>
         */
        public pulse.cdm.bind.Properties.ScalarVolumePerPressureData.Builder getRightLungComplianceBuilder() {
          
          onChanged();
          return getRightLungComplianceFieldBuilder().getBuilder();
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightLungCompliance = 3;</code>
         */
        public pulse.cdm.bind.Properties.ScalarVolumePerPressureDataOrBuilder getRightLungComplianceOrBuilder() {
          if (rightLungComplianceBuilder_ != null) {
            return rightLungComplianceBuilder_.getMessageOrBuilder();
          } else {
            return rightLungCompliance_ == null ?
                pulse.cdm.bind.Properties.ScalarVolumePerPressureData.getDefaultInstance() : rightLungCompliance_;
          }
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightLungCompliance = 3;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.cdm.bind.Properties.ScalarVolumePerPressureData, pulse.cdm.bind.Properties.ScalarVolumePerPressureData.Builder, pulse.cdm.bind.Properties.ScalarVolumePerPressureDataOrBuilder> 
            getRightLungComplianceFieldBuilder() {
          if (rightLungComplianceBuilder_ == null) {
            rightLungComplianceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                pulse.cdm.bind.Properties.ScalarVolumePerPressureData, pulse.cdm.bind.Properties.ScalarVolumePerPressureData.Builder, pulse.cdm.bind.Properties.ScalarVolumePerPressureDataOrBuilder>(
                    getRightLungCompliance(),
                    getParentForChildren(),
                    isClean());
            rightLungCompliance_ = null;
          }
          return rightLungComplianceBuilder_;
        }

        private pulse.cdm.bind.Properties.ScalarVolumePerPressureData rightChestWallCompliance_;
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.cdm.bind.Properties.ScalarVolumePerPressureData, pulse.cdm.bind.Properties.ScalarVolumePerPressureData.Builder, pulse.cdm.bind.Properties.ScalarVolumePerPressureDataOrBuilder> rightChestWallComplianceBuilder_;
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightChestWallCompliance = 4;</code>
         * @return Whether the rightChestWallCompliance field is set.
         */
        public boolean hasRightChestWallCompliance() {
          return rightChestWallComplianceBuilder_ != null || rightChestWallCompliance_ != null;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightChestWallCompliance = 4;</code>
         * @return The rightChestWallCompliance.
         */
        public pulse.cdm.bind.Properties.ScalarVolumePerPressureData getRightChestWallCompliance() {
          if (rightChestWallComplianceBuilder_ == null) {
            return rightChestWallCompliance_ == null ? pulse.cdm.bind.Properties.ScalarVolumePerPressureData.getDefaultInstance() : rightChestWallCompliance_;
          } else {
            return rightChestWallComplianceBuilder_.getMessage();
          }
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightChestWallCompliance = 4;</code>
         */
        public Builder setRightChestWallCompliance(pulse.cdm.bind.Properties.ScalarVolumePerPressureData value) {
          if (rightChestWallComplianceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            rightChestWallCompliance_ = value;
            onChanged();
          } else {
            rightChestWallComplianceBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightChestWallCompliance = 4;</code>
         */
        public Builder setRightChestWallCompliance(
            pulse.cdm.bind.Properties.ScalarVolumePerPressureData.Builder builderForValue) {
          if (rightChestWallComplianceBuilder_ == null) {
            rightChestWallCompliance_ = builderForValue.build();
            onChanged();
          } else {
            rightChestWallComplianceBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightChestWallCompliance = 4;</code>
         */
        public Builder mergeRightChestWallCompliance(pulse.cdm.bind.Properties.ScalarVolumePerPressureData value) {
          if (rightChestWallComplianceBuilder_ == null) {
            if (rightChestWallCompliance_ != null) {
              rightChestWallCompliance_ =
                pulse.cdm.bind.Properties.ScalarVolumePerPressureData.newBuilder(rightChestWallCompliance_).mergeFrom(value).buildPartial();
            } else {
              rightChestWallCompliance_ = value;
            }
            onChanged();
          } else {
            rightChestWallComplianceBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightChestWallCompliance = 4;</code>
         */
        public Builder clearRightChestWallCompliance() {
          if (rightChestWallComplianceBuilder_ == null) {
            rightChestWallCompliance_ = null;
            onChanged();
          } else {
            rightChestWallCompliance_ = null;
            rightChestWallComplianceBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightChestWallCompliance = 4;</code>
         */
        public pulse.cdm.bind.Properties.ScalarVolumePerPressureData.Builder getRightChestWallComplianceBuilder() {
          
          onChanged();
          return getRightChestWallComplianceFieldBuilder().getBuilder();
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightChestWallCompliance = 4;</code>
         */
        public pulse.cdm.bind.Properties.ScalarVolumePerPressureDataOrBuilder getRightChestWallComplianceOrBuilder() {
          if (rightChestWallComplianceBuilder_ != null) {
            return rightChestWallComplianceBuilder_.getMessageOrBuilder();
          } else {
            return rightChestWallCompliance_ == null ?
                pulse.cdm.bind.Properties.ScalarVolumePerPressureData.getDefaultInstance() : rightChestWallCompliance_;
          }
        }
        /**
         * <code>.pulse.cdm.bind.ScalarVolumePerPressureData RightChestWallCompliance = 4;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.cdm.bind.Properties.ScalarVolumePerPressureData, pulse.cdm.bind.Properties.ScalarVolumePerPressureData.Builder, pulse.cdm.bind.Properties.ScalarVolumePerPressureDataOrBuilder> 
            getRightChestWallComplianceFieldBuilder() {
          if (rightChestWallComplianceBuilder_ == null) {
            rightChestWallComplianceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                pulse.cdm.bind.Properties.ScalarVolumePerPressureData, pulse.cdm.bind.Properties.ScalarVolumePerPressureData.Builder, pulse.cdm.bind.Properties.ScalarVolumePerPressureDataOrBuilder>(
                    getRightChestWallCompliance(),
                    getParentForChildren(),
                    isClean());
            rightChestWallCompliance_ = null;
          }
          return rightChestWallComplianceBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungComplianceData)
      }

      // @@protoc_insertion_point(class_scope:pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungComplianceData)
      private static final pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData();
      }

      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<LungComplianceData>
          PARSER = new com.google.protobuf.AbstractParser<LungComplianceData>() {
        @java.lang.Override
        public LungComplianceData parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new LungComplianceData(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<LungComplianceData> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<LungComplianceData> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface PatientConfigurationDataOrBuilder extends
        // @@protoc_insertion_point(interface_extends:pulse.multiplex_ventilator.bind.MultiplexVentilatorData.PatientConfigurationData)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>uint32 ID = 1;</code>
       * @return The iD.
       */
      int getID();

      /**
       * <code>.pulse.cdm.bind.EngineInitializationData EngineInitialization = 2;</code>
       * @return Whether the engineInitialization field is set.
       */
      boolean hasEngineInitialization();
      /**
       * <code>.pulse.cdm.bind.EngineInitializationData EngineInitialization = 2;</code>
       * @return The engineInitialization.
       */
      pulse.cdm.bind.Engine.EngineInitializationData getEngineInitialization();
      /**
       * <code>.pulse.cdm.bind.EngineInitializationData EngineInitialization = 2;</code>
       */
      pulse.cdm.bind.Engine.EngineInitializationDataOrBuilder getEngineInitializationOrBuilder();

      /**
       * <code>.pulse.cdm.bind.Scalar0To1Data DyspneaSeverity = 3;</code>
       * @return Whether the dyspneaSeverity field is set.
       */
      boolean hasDyspneaSeverity();
      /**
       * <code>.pulse.cdm.bind.Scalar0To1Data DyspneaSeverity = 3;</code>
       * @return The dyspneaSeverity.
       */
      pulse.cdm.bind.Properties.Scalar0To1Data getDyspneaSeverity();
      /**
       * <code>.pulse.cdm.bind.Scalar0To1Data DyspneaSeverity = 3;</code>
       */
      pulse.cdm.bind.Properties.Scalar0To1DataOrBuilder getDyspneaSeverityOrBuilder();

      /**
       * <code>.pulse.cdm.bind.Scalar0To1Data ImpairedAlveolarExchangeFraction = 4;</code>
       * @return Whether the impairedAlveolarExchangeFraction field is set.
       */
      boolean hasImpairedAlveolarExchangeFraction();
      /**
       * <code>.pulse.cdm.bind.Scalar0To1Data ImpairedAlveolarExchangeFraction = 4;</code>
       * @return The impairedAlveolarExchangeFraction.
       */
      pulse.cdm.bind.Properties.Scalar0To1Data getImpairedAlveolarExchangeFraction();
      /**
       * <code>.pulse.cdm.bind.Scalar0To1Data ImpairedAlveolarExchangeFraction = 4;</code>
       */
      pulse.cdm.bind.Properties.Scalar0To1DataOrBuilder getImpairedAlveolarExchangeFractionOrBuilder();

      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData AirwayResistance = 5;</code>
       * @return Whether the airwayResistance field is set.
       */
      boolean hasAirwayResistance();
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData AirwayResistance = 5;</code>
       * @return The airwayResistance.
       */
      pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData getAirwayResistance();
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData AirwayResistance = 5;</code>
       */
      pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder getAirwayResistanceOrBuilder();

      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData ExpiratoryLimbResistance = 6;</code>
       * @return Whether the expiratoryLimbResistance field is set.
       */
      boolean hasExpiratoryLimbResistance();
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData ExpiratoryLimbResistance = 6;</code>
       * @return The expiratoryLimbResistance.
       */
      pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData getExpiratoryLimbResistance();
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData ExpiratoryLimbResistance = 6;</code>
       */
      pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder getExpiratoryLimbResistanceOrBuilder();

      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData InspiratoryLimbResistance = 7;</code>
       * @return Whether the inspiratoryLimbResistance field is set.
       */
      boolean hasInspiratoryLimbResistance();
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData InspiratoryLimbResistance = 7;</code>
       * @return The inspiratoryLimbResistance.
       */
      pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData getInspiratoryLimbResistance();
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData InspiratoryLimbResistance = 7;</code>
       */
      pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder getInspiratoryLimbResistanceOrBuilder();

      /**
       * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungResistanceData LungResistance = 8;</code>
       * @return Whether the lungResistance field is set.
       */
      boolean hasLungResistance();
      /**
       * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungResistanceData LungResistance = 8;</code>
       * @return The lungResistance.
       */
      pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData getLungResistance();
      /**
       * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungResistanceData LungResistance = 8;</code>
       */
      pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceDataOrBuilder getLungResistanceOrBuilder();

      /**
       * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.BronchiAlveoliResistanceData BronchiAlveoliResistance = 9;</code>
       * @return Whether the bronchiAlveoliResistance field is set.
       */
      boolean hasBronchiAlveoliResistance();
      /**
       * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.BronchiAlveoliResistanceData BronchiAlveoliResistance = 9;</code>
       * @return The bronchiAlveoliResistance.
       */
      pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData getBronchiAlveoliResistance();
      /**
       * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.BronchiAlveoliResistanceData BronchiAlveoliResistance = 9;</code>
       */
      pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceDataOrBuilder getBronchiAlveoliResistanceOrBuilder();

      /**
       * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.SideComplianceData SideCompliance = 10;</code>
       * @return Whether the sideCompliance field is set.
       */
      boolean hasSideCompliance();
      /**
       * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.SideComplianceData SideCompliance = 10;</code>
       * @return The sideCompliance.
       */
      pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData getSideCompliance();
      /**
       * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.SideComplianceData SideCompliance = 10;</code>
       */
      pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceDataOrBuilder getSideComplianceOrBuilder();

      /**
       * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungComplianceData LungCompliance = 11;</code>
       * @return Whether the lungCompliance field is set.
       */
      boolean hasLungCompliance();
      /**
       * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungComplianceData LungCompliance = 11;</code>
       * @return The lungCompliance.
       */
      pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData getLungCompliance();
      /**
       * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungComplianceData LungCompliance = 11;</code>
       */
      pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceDataOrBuilder getLungComplianceOrBuilder();

      public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData.ResistancesDataCase getResistancesDataCase();

      public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData.ComplianceDataCase getComplianceDataCase();
    }
    /**
     * Protobuf type {@code pulse.multiplex_ventilator.bind.MultiplexVentilatorData.PatientConfigurationData}
     */
    public  static final class PatientConfigurationData extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:pulse.multiplex_ventilator.bind.MultiplexVentilatorData.PatientConfigurationData)
        PatientConfigurationDataOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use PatientConfigurationData.newBuilder() to construct.
      private PatientConfigurationData(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private PatientConfigurationData() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new PatientConfigurationData();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private PatientConfigurationData(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {

                iD_ = input.readUInt32();
                break;
              }
              case 18: {
                pulse.cdm.bind.Engine.EngineInitializationData.Builder subBuilder = null;
                if (engineInitialization_ != null) {
                  subBuilder = engineInitialization_.toBuilder();
                }
                engineInitialization_ = input.readMessage(pulse.cdm.bind.Engine.EngineInitializationData.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(engineInitialization_);
                  engineInitialization_ = subBuilder.buildPartial();
                }

                break;
              }
              case 26: {
                pulse.cdm.bind.Properties.Scalar0To1Data.Builder subBuilder = null;
                if (dyspneaSeverity_ != null) {
                  subBuilder = dyspneaSeverity_.toBuilder();
                }
                dyspneaSeverity_ = input.readMessage(pulse.cdm.bind.Properties.Scalar0To1Data.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(dyspneaSeverity_);
                  dyspneaSeverity_ = subBuilder.buildPartial();
                }

                break;
              }
              case 34: {
                pulse.cdm.bind.Properties.Scalar0To1Data.Builder subBuilder = null;
                if (impairedAlveolarExchangeFraction_ != null) {
                  subBuilder = impairedAlveolarExchangeFraction_.toBuilder();
                }
                impairedAlveolarExchangeFraction_ = input.readMessage(pulse.cdm.bind.Properties.Scalar0To1Data.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(impairedAlveolarExchangeFraction_);
                  impairedAlveolarExchangeFraction_ = subBuilder.buildPartial();
                }

                break;
              }
              case 42: {
                pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder subBuilder = null;
                if (airwayResistance_ != null) {
                  subBuilder = airwayResistance_.toBuilder();
                }
                airwayResistance_ = input.readMessage(pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(airwayResistance_);
                  airwayResistance_ = subBuilder.buildPartial();
                }

                break;
              }
              case 50: {
                pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder subBuilder = null;
                if (expiratoryLimbResistance_ != null) {
                  subBuilder = expiratoryLimbResistance_.toBuilder();
                }
                expiratoryLimbResistance_ = input.readMessage(pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(expiratoryLimbResistance_);
                  expiratoryLimbResistance_ = subBuilder.buildPartial();
                }

                break;
              }
              case 58: {
                pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder subBuilder = null;
                if (inspiratoryLimbResistance_ != null) {
                  subBuilder = inspiratoryLimbResistance_.toBuilder();
                }
                inspiratoryLimbResistance_ = input.readMessage(pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(inspiratoryLimbResistance_);
                  inspiratoryLimbResistance_ = subBuilder.buildPartial();
                }

                break;
              }
              case 66: {
                pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData.Builder subBuilder = null;
                if (resistancesDataCase_ == 8) {
                  subBuilder = ((pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData) resistancesData_).toBuilder();
                }
                resistancesData_ =
                    input.readMessage(pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData) resistancesData_);
                  resistancesData_ = subBuilder.buildPartial();
                }
                resistancesDataCase_ = 8;
                break;
              }
              case 74: {
                pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData.Builder subBuilder = null;
                if (resistancesDataCase_ == 9) {
                  subBuilder = ((pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData) resistancesData_).toBuilder();
                }
                resistancesData_ =
                    input.readMessage(pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData) resistancesData_);
                  resistancesData_ = subBuilder.buildPartial();
                }
                resistancesDataCase_ = 9;
                break;
              }
              case 82: {
                pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData.Builder subBuilder = null;
                if (complianceDataCase_ == 10) {
                  subBuilder = ((pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData) complianceData_).toBuilder();
                }
                complianceData_ =
                    input.readMessage(pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData) complianceData_);
                  complianceData_ = subBuilder.buildPartial();
                }
                complianceDataCase_ = 10;
                break;
              }
              case 90: {
                pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData.Builder subBuilder = null;
                if (complianceDataCase_ == 11) {
                  subBuilder = ((pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData) complianceData_).toBuilder();
                }
                complianceData_ =
                    input.readMessage(pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData) complianceData_);
                  complianceData_ = subBuilder.buildPartial();
                }
                complianceDataCase_ = 11;
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pulse.multiplex_ventilator.bind.MultiplexVentilator.internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_PatientConfigurationData_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pulse.multiplex_ventilator.bind.MultiplexVentilator.internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_PatientConfigurationData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData.class, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData.Builder.class);
      }

      private int resistancesDataCase_ = 0;
      private java.lang.Object resistancesData_;
      public enum ResistancesDataCase
          implements com.google.protobuf.Internal.EnumLite,
              com.google.protobuf.AbstractMessage.InternalOneOfEnum {
        LUNGRESISTANCE(8),
        BRONCHIALVEOLIRESISTANCE(9),
        RESISTANCESDATA_NOT_SET(0);
        private final int value;
        private ResistancesDataCase(int value) {
          this.value = value;
        }
        /**
         * @param value The number of the enum to look for.
         * @return The enum associated with the given number.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static ResistancesDataCase valueOf(int value) {
          return forNumber(value);
        }

        public static ResistancesDataCase forNumber(int value) {
          switch (value) {
            case 8: return LUNGRESISTANCE;
            case 9: return BRONCHIALVEOLIRESISTANCE;
            case 0: return RESISTANCESDATA_NOT_SET;
            default: return null;
          }
        }
        public int getNumber() {
          return this.value;
        }
      };

      public ResistancesDataCase
      getResistancesDataCase() {
        return ResistancesDataCase.forNumber(
            resistancesDataCase_);
      }

      private int complianceDataCase_ = 0;
      private java.lang.Object complianceData_;
      public enum ComplianceDataCase
          implements com.google.protobuf.Internal.EnumLite,
              com.google.protobuf.AbstractMessage.InternalOneOfEnum {
        SIDECOMPLIANCE(10),
        LUNGCOMPLIANCE(11),
        COMPLIANCEDATA_NOT_SET(0);
        private final int value;
        private ComplianceDataCase(int value) {
          this.value = value;
        }
        /**
         * @param value The number of the enum to look for.
         * @return The enum associated with the given number.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static ComplianceDataCase valueOf(int value) {
          return forNumber(value);
        }

        public static ComplianceDataCase forNumber(int value) {
          switch (value) {
            case 10: return SIDECOMPLIANCE;
            case 11: return LUNGCOMPLIANCE;
            case 0: return COMPLIANCEDATA_NOT_SET;
            default: return null;
          }
        }
        public int getNumber() {
          return this.value;
        }
      };

      public ComplianceDataCase
      getComplianceDataCase() {
        return ComplianceDataCase.forNumber(
            complianceDataCase_);
      }

      public static final int ID_FIELD_NUMBER = 1;
      private int iD_;
      /**
       * <code>uint32 ID = 1;</code>
       * @return The iD.
       */
      public int getID() {
        return iD_;
      }

      public static final int ENGINEINITIALIZATION_FIELD_NUMBER = 2;
      private pulse.cdm.bind.Engine.EngineInitializationData engineInitialization_;
      /**
       * <code>.pulse.cdm.bind.EngineInitializationData EngineInitialization = 2;</code>
       * @return Whether the engineInitialization field is set.
       */
      public boolean hasEngineInitialization() {
        return engineInitialization_ != null;
      }
      /**
       * <code>.pulse.cdm.bind.EngineInitializationData EngineInitialization = 2;</code>
       * @return The engineInitialization.
       */
      public pulse.cdm.bind.Engine.EngineInitializationData getEngineInitialization() {
        return engineInitialization_ == null ? pulse.cdm.bind.Engine.EngineInitializationData.getDefaultInstance() : engineInitialization_;
      }
      /**
       * <code>.pulse.cdm.bind.EngineInitializationData EngineInitialization = 2;</code>
       */
      public pulse.cdm.bind.Engine.EngineInitializationDataOrBuilder getEngineInitializationOrBuilder() {
        return getEngineInitialization();
      }

      public static final int DYSPNEASEVERITY_FIELD_NUMBER = 3;
      private pulse.cdm.bind.Properties.Scalar0To1Data dyspneaSeverity_;
      /**
       * <code>.pulse.cdm.bind.Scalar0To1Data DyspneaSeverity = 3;</code>
       * @return Whether the dyspneaSeverity field is set.
       */
      public boolean hasDyspneaSeverity() {
        return dyspneaSeverity_ != null;
      }
      /**
       * <code>.pulse.cdm.bind.Scalar0To1Data DyspneaSeverity = 3;</code>
       * @return The dyspneaSeverity.
       */
      public pulse.cdm.bind.Properties.Scalar0To1Data getDyspneaSeverity() {
        return dyspneaSeverity_ == null ? pulse.cdm.bind.Properties.Scalar0To1Data.getDefaultInstance() : dyspneaSeverity_;
      }
      /**
       * <code>.pulse.cdm.bind.Scalar0To1Data DyspneaSeverity = 3;</code>
       */
      public pulse.cdm.bind.Properties.Scalar0To1DataOrBuilder getDyspneaSeverityOrBuilder() {
        return getDyspneaSeverity();
      }

      public static final int IMPAIREDALVEOLAREXCHANGEFRACTION_FIELD_NUMBER = 4;
      private pulse.cdm.bind.Properties.Scalar0To1Data impairedAlveolarExchangeFraction_;
      /**
       * <code>.pulse.cdm.bind.Scalar0To1Data ImpairedAlveolarExchangeFraction = 4;</code>
       * @return Whether the impairedAlveolarExchangeFraction field is set.
       */
      public boolean hasImpairedAlveolarExchangeFraction() {
        return impairedAlveolarExchangeFraction_ != null;
      }
      /**
       * <code>.pulse.cdm.bind.Scalar0To1Data ImpairedAlveolarExchangeFraction = 4;</code>
       * @return The impairedAlveolarExchangeFraction.
       */
      public pulse.cdm.bind.Properties.Scalar0To1Data getImpairedAlveolarExchangeFraction() {
        return impairedAlveolarExchangeFraction_ == null ? pulse.cdm.bind.Properties.Scalar0To1Data.getDefaultInstance() : impairedAlveolarExchangeFraction_;
      }
      /**
       * <code>.pulse.cdm.bind.Scalar0To1Data ImpairedAlveolarExchangeFraction = 4;</code>
       */
      public pulse.cdm.bind.Properties.Scalar0To1DataOrBuilder getImpairedAlveolarExchangeFractionOrBuilder() {
        return getImpairedAlveolarExchangeFraction();
      }

      public static final int AIRWAYRESISTANCE_FIELD_NUMBER = 5;
      private pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData airwayResistance_;
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData AirwayResistance = 5;</code>
       * @return Whether the airwayResistance field is set.
       */
      public boolean hasAirwayResistance() {
        return airwayResistance_ != null;
      }
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData AirwayResistance = 5;</code>
       * @return The airwayResistance.
       */
      public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData getAirwayResistance() {
        return airwayResistance_ == null ? pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.getDefaultInstance() : airwayResistance_;
      }
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData AirwayResistance = 5;</code>
       */
      public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder getAirwayResistanceOrBuilder() {
        return getAirwayResistance();
      }

      public static final int EXPIRATORYLIMBRESISTANCE_FIELD_NUMBER = 6;
      private pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData expiratoryLimbResistance_;
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData ExpiratoryLimbResistance = 6;</code>
       * @return Whether the expiratoryLimbResistance field is set.
       */
      public boolean hasExpiratoryLimbResistance() {
        return expiratoryLimbResistance_ != null;
      }
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData ExpiratoryLimbResistance = 6;</code>
       * @return The expiratoryLimbResistance.
       */
      public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData getExpiratoryLimbResistance() {
        return expiratoryLimbResistance_ == null ? pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.getDefaultInstance() : expiratoryLimbResistance_;
      }
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData ExpiratoryLimbResistance = 6;</code>
       */
      public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder getExpiratoryLimbResistanceOrBuilder() {
        return getExpiratoryLimbResistance();
      }

      public static final int INSPIRATORYLIMBRESISTANCE_FIELD_NUMBER = 7;
      private pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData inspiratoryLimbResistance_;
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData InspiratoryLimbResistance = 7;</code>
       * @return Whether the inspiratoryLimbResistance field is set.
       */
      public boolean hasInspiratoryLimbResistance() {
        return inspiratoryLimbResistance_ != null;
      }
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData InspiratoryLimbResistance = 7;</code>
       * @return The inspiratoryLimbResistance.
       */
      public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData getInspiratoryLimbResistance() {
        return inspiratoryLimbResistance_ == null ? pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.getDefaultInstance() : inspiratoryLimbResistance_;
      }
      /**
       * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData InspiratoryLimbResistance = 7;</code>
       */
      public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder getInspiratoryLimbResistanceOrBuilder() {
        return getInspiratoryLimbResistance();
      }

      public static final int LUNGRESISTANCE_FIELD_NUMBER = 8;
      /**
       * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungResistanceData LungResistance = 8;</code>
       * @return Whether the lungResistance field is set.
       */
      public boolean hasLungResistance() {
        return resistancesDataCase_ == 8;
      }
      /**
       * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungResistanceData LungResistance = 8;</code>
       * @return The lungResistance.
       */
      public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData getLungResistance() {
        if (resistancesDataCase_ == 8) {
           return (pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData) resistancesData_;
        }
        return pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData.getDefaultInstance();
      }
      /**
       * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungResistanceData LungResistance = 8;</code>
       */
      public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceDataOrBuilder getLungResistanceOrBuilder() {
        if (resistancesDataCase_ == 8) {
           return (pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData) resistancesData_;
        }
        return pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData.getDefaultInstance();
      }

      public static final int BRONCHIALVEOLIRESISTANCE_FIELD_NUMBER = 9;
      /**
       * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.BronchiAlveoliResistanceData BronchiAlveoliResistance = 9;</code>
       * @return Whether the bronchiAlveoliResistance field is set.
       */
      public boolean hasBronchiAlveoliResistance() {
        return resistancesDataCase_ == 9;
      }
      /**
       * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.BronchiAlveoliResistanceData BronchiAlveoliResistance = 9;</code>
       * @return The bronchiAlveoliResistance.
       */
      public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData getBronchiAlveoliResistance() {
        if (resistancesDataCase_ == 9) {
           return (pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData) resistancesData_;
        }
        return pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData.getDefaultInstance();
      }
      /**
       * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.BronchiAlveoliResistanceData BronchiAlveoliResistance = 9;</code>
       */
      public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceDataOrBuilder getBronchiAlveoliResistanceOrBuilder() {
        if (resistancesDataCase_ == 9) {
           return (pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData) resistancesData_;
        }
        return pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData.getDefaultInstance();
      }

      public static final int SIDECOMPLIANCE_FIELD_NUMBER = 10;
      /**
       * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.SideComplianceData SideCompliance = 10;</code>
       * @return Whether the sideCompliance field is set.
       */
      public boolean hasSideCompliance() {
        return complianceDataCase_ == 10;
      }
      /**
       * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.SideComplianceData SideCompliance = 10;</code>
       * @return The sideCompliance.
       */
      public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData getSideCompliance() {
        if (complianceDataCase_ == 10) {
           return (pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData) complianceData_;
        }
        return pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData.getDefaultInstance();
      }
      /**
       * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.SideComplianceData SideCompliance = 10;</code>
       */
      public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceDataOrBuilder getSideComplianceOrBuilder() {
        if (complianceDataCase_ == 10) {
           return (pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData) complianceData_;
        }
        return pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData.getDefaultInstance();
      }

      public static final int LUNGCOMPLIANCE_FIELD_NUMBER = 11;
      /**
       * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungComplianceData LungCompliance = 11;</code>
       * @return Whether the lungCompliance field is set.
       */
      public boolean hasLungCompliance() {
        return complianceDataCase_ == 11;
      }
      /**
       * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungComplianceData LungCompliance = 11;</code>
       * @return The lungCompliance.
       */
      public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData getLungCompliance() {
        if (complianceDataCase_ == 11) {
           return (pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData) complianceData_;
        }
        return pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData.getDefaultInstance();
      }
      /**
       * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungComplianceData LungCompliance = 11;</code>
       */
      public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceDataOrBuilder getLungComplianceOrBuilder() {
        if (complianceDataCase_ == 11) {
           return (pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData) complianceData_;
        }
        return pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData.getDefaultInstance();
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (iD_ != 0) {
          output.writeUInt32(1, iD_);
        }
        if (engineInitialization_ != null) {
          output.writeMessage(2, getEngineInitialization());
        }
        if (dyspneaSeverity_ != null) {
          output.writeMessage(3, getDyspneaSeverity());
        }
        if (impairedAlveolarExchangeFraction_ != null) {
          output.writeMessage(4, getImpairedAlveolarExchangeFraction());
        }
        if (airwayResistance_ != null) {
          output.writeMessage(5, getAirwayResistance());
        }
        if (expiratoryLimbResistance_ != null) {
          output.writeMessage(6, getExpiratoryLimbResistance());
        }
        if (inspiratoryLimbResistance_ != null) {
          output.writeMessage(7, getInspiratoryLimbResistance());
        }
        if (resistancesDataCase_ == 8) {
          output.writeMessage(8, (pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData) resistancesData_);
        }
        if (resistancesDataCase_ == 9) {
          output.writeMessage(9, (pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData) resistancesData_);
        }
        if (complianceDataCase_ == 10) {
          output.writeMessage(10, (pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData) complianceData_);
        }
        if (complianceDataCase_ == 11) {
          output.writeMessage(11, (pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData) complianceData_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (iD_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, iD_);
        }
        if (engineInitialization_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, getEngineInitialization());
        }
        if (dyspneaSeverity_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, getDyspneaSeverity());
        }
        if (impairedAlveolarExchangeFraction_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, getImpairedAlveolarExchangeFraction());
        }
        if (airwayResistance_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(5, getAirwayResistance());
        }
        if (expiratoryLimbResistance_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(6, getExpiratoryLimbResistance());
        }
        if (inspiratoryLimbResistance_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(7, getInspiratoryLimbResistance());
        }
        if (resistancesDataCase_ == 8) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(8, (pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData) resistancesData_);
        }
        if (resistancesDataCase_ == 9) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(9, (pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData) resistancesData_);
        }
        if (complianceDataCase_ == 10) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10, (pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData) complianceData_);
        }
        if (complianceDataCase_ == 11) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(11, (pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData) complianceData_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData)) {
          return super.equals(obj);
        }
        pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData other = (pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData) obj;

        if (getID()
            != other.getID()) return false;
        if (hasEngineInitialization() != other.hasEngineInitialization()) return false;
        if (hasEngineInitialization()) {
          if (!getEngineInitialization()
              .equals(other.getEngineInitialization())) return false;
        }
        if (hasDyspneaSeverity() != other.hasDyspneaSeverity()) return false;
        if (hasDyspneaSeverity()) {
          if (!getDyspneaSeverity()
              .equals(other.getDyspneaSeverity())) return false;
        }
        if (hasImpairedAlveolarExchangeFraction() != other.hasImpairedAlveolarExchangeFraction()) return false;
        if (hasImpairedAlveolarExchangeFraction()) {
          if (!getImpairedAlveolarExchangeFraction()
              .equals(other.getImpairedAlveolarExchangeFraction())) return false;
        }
        if (hasAirwayResistance() != other.hasAirwayResistance()) return false;
        if (hasAirwayResistance()) {
          if (!getAirwayResistance()
              .equals(other.getAirwayResistance())) return false;
        }
        if (hasExpiratoryLimbResistance() != other.hasExpiratoryLimbResistance()) return false;
        if (hasExpiratoryLimbResistance()) {
          if (!getExpiratoryLimbResistance()
              .equals(other.getExpiratoryLimbResistance())) return false;
        }
        if (hasInspiratoryLimbResistance() != other.hasInspiratoryLimbResistance()) return false;
        if (hasInspiratoryLimbResistance()) {
          if (!getInspiratoryLimbResistance()
              .equals(other.getInspiratoryLimbResistance())) return false;
        }
        if (!getResistancesDataCase().equals(other.getResistancesDataCase())) return false;
        switch (resistancesDataCase_) {
          case 8:
            if (!getLungResistance()
                .equals(other.getLungResistance())) return false;
            break;
          case 9:
            if (!getBronchiAlveoliResistance()
                .equals(other.getBronchiAlveoliResistance())) return false;
            break;
          case 0:
          default:
        }
        if (!getComplianceDataCase().equals(other.getComplianceDataCase())) return false;
        switch (complianceDataCase_) {
          case 10:
            if (!getSideCompliance()
                .equals(other.getSideCompliance())) return false;
            break;
          case 11:
            if (!getLungCompliance()
                .equals(other.getLungCompliance())) return false;
            break;
          case 0:
          default:
        }
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + ID_FIELD_NUMBER;
        hash = (53 * hash) + getID();
        if (hasEngineInitialization()) {
          hash = (37 * hash) + ENGINEINITIALIZATION_FIELD_NUMBER;
          hash = (53 * hash) + getEngineInitialization().hashCode();
        }
        if (hasDyspneaSeverity()) {
          hash = (37 * hash) + DYSPNEASEVERITY_FIELD_NUMBER;
          hash = (53 * hash) + getDyspneaSeverity().hashCode();
        }
        if (hasImpairedAlveolarExchangeFraction()) {
          hash = (37 * hash) + IMPAIREDALVEOLAREXCHANGEFRACTION_FIELD_NUMBER;
          hash = (53 * hash) + getImpairedAlveolarExchangeFraction().hashCode();
        }
        if (hasAirwayResistance()) {
          hash = (37 * hash) + AIRWAYRESISTANCE_FIELD_NUMBER;
          hash = (53 * hash) + getAirwayResistance().hashCode();
        }
        if (hasExpiratoryLimbResistance()) {
          hash = (37 * hash) + EXPIRATORYLIMBRESISTANCE_FIELD_NUMBER;
          hash = (53 * hash) + getExpiratoryLimbResistance().hashCode();
        }
        if (hasInspiratoryLimbResistance()) {
          hash = (37 * hash) + INSPIRATORYLIMBRESISTANCE_FIELD_NUMBER;
          hash = (53 * hash) + getInspiratoryLimbResistance().hashCode();
        }
        switch (resistancesDataCase_) {
          case 8:
            hash = (37 * hash) + LUNGRESISTANCE_FIELD_NUMBER;
            hash = (53 * hash) + getLungResistance().hashCode();
            break;
          case 9:
            hash = (37 * hash) + BRONCHIALVEOLIRESISTANCE_FIELD_NUMBER;
            hash = (53 * hash) + getBronchiAlveoliResistance().hashCode();
            break;
          case 0:
          default:
        }
        switch (complianceDataCase_) {
          case 10:
            hash = (37 * hash) + SIDECOMPLIANCE_FIELD_NUMBER;
            hash = (53 * hash) + getSideCompliance().hashCode();
            break;
          case 11:
            hash = (37 * hash) + LUNGCOMPLIANCE_FIELD_NUMBER;
            hash = (53 * hash) + getLungCompliance().hashCode();
            break;
          case 0:
          default:
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code pulse.multiplex_ventilator.bind.MultiplexVentilatorData.PatientConfigurationData}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:pulse.multiplex_ventilator.bind.MultiplexVentilatorData.PatientConfigurationData)
          pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationDataOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return pulse.multiplex_ventilator.bind.MultiplexVentilator.internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_PatientConfigurationData_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return pulse.multiplex_ventilator.bind.MultiplexVentilator.internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_PatientConfigurationData_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData.class, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData.Builder.class);
        }

        // Construct using pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          iD_ = 0;

          if (engineInitializationBuilder_ == null) {
            engineInitialization_ = null;
          } else {
            engineInitialization_ = null;
            engineInitializationBuilder_ = null;
          }
          if (dyspneaSeverityBuilder_ == null) {
            dyspneaSeverity_ = null;
          } else {
            dyspneaSeverity_ = null;
            dyspneaSeverityBuilder_ = null;
          }
          if (impairedAlveolarExchangeFractionBuilder_ == null) {
            impairedAlveolarExchangeFraction_ = null;
          } else {
            impairedAlveolarExchangeFraction_ = null;
            impairedAlveolarExchangeFractionBuilder_ = null;
          }
          if (airwayResistanceBuilder_ == null) {
            airwayResistance_ = null;
          } else {
            airwayResistance_ = null;
            airwayResistanceBuilder_ = null;
          }
          if (expiratoryLimbResistanceBuilder_ == null) {
            expiratoryLimbResistance_ = null;
          } else {
            expiratoryLimbResistance_ = null;
            expiratoryLimbResistanceBuilder_ = null;
          }
          if (inspiratoryLimbResistanceBuilder_ == null) {
            inspiratoryLimbResistance_ = null;
          } else {
            inspiratoryLimbResistance_ = null;
            inspiratoryLimbResistanceBuilder_ = null;
          }
          resistancesDataCase_ = 0;
          resistancesData_ = null;
          complianceDataCase_ = 0;
          complianceData_ = null;
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return pulse.multiplex_ventilator.bind.MultiplexVentilator.internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_PatientConfigurationData_descriptor;
        }

        @java.lang.Override
        public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData getDefaultInstanceForType() {
          return pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData.getDefaultInstance();
        }

        @java.lang.Override
        public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData build() {
          pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData buildPartial() {
          pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData result = new pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData(this);
          result.iD_ = iD_;
          if (engineInitializationBuilder_ == null) {
            result.engineInitialization_ = engineInitialization_;
          } else {
            result.engineInitialization_ = engineInitializationBuilder_.build();
          }
          if (dyspneaSeverityBuilder_ == null) {
            result.dyspneaSeverity_ = dyspneaSeverity_;
          } else {
            result.dyspneaSeverity_ = dyspneaSeverityBuilder_.build();
          }
          if (impairedAlveolarExchangeFractionBuilder_ == null) {
            result.impairedAlveolarExchangeFraction_ = impairedAlveolarExchangeFraction_;
          } else {
            result.impairedAlveolarExchangeFraction_ = impairedAlveolarExchangeFractionBuilder_.build();
          }
          if (airwayResistanceBuilder_ == null) {
            result.airwayResistance_ = airwayResistance_;
          } else {
            result.airwayResistance_ = airwayResistanceBuilder_.build();
          }
          if (expiratoryLimbResistanceBuilder_ == null) {
            result.expiratoryLimbResistance_ = expiratoryLimbResistance_;
          } else {
            result.expiratoryLimbResistance_ = expiratoryLimbResistanceBuilder_.build();
          }
          if (inspiratoryLimbResistanceBuilder_ == null) {
            result.inspiratoryLimbResistance_ = inspiratoryLimbResistance_;
          } else {
            result.inspiratoryLimbResistance_ = inspiratoryLimbResistanceBuilder_.build();
          }
          if (resistancesDataCase_ == 8) {
            if (lungResistanceBuilder_ == null) {
              result.resistancesData_ = resistancesData_;
            } else {
              result.resistancesData_ = lungResistanceBuilder_.build();
            }
          }
          if (resistancesDataCase_ == 9) {
            if (bronchiAlveoliResistanceBuilder_ == null) {
              result.resistancesData_ = resistancesData_;
            } else {
              result.resistancesData_ = bronchiAlveoliResistanceBuilder_.build();
            }
          }
          if (complianceDataCase_ == 10) {
            if (sideComplianceBuilder_ == null) {
              result.complianceData_ = complianceData_;
            } else {
              result.complianceData_ = sideComplianceBuilder_.build();
            }
          }
          if (complianceDataCase_ == 11) {
            if (lungComplianceBuilder_ == null) {
              result.complianceData_ = complianceData_;
            } else {
              result.complianceData_ = lungComplianceBuilder_.build();
            }
          }
          result.resistancesDataCase_ = resistancesDataCase_;
          result.complianceDataCase_ = complianceDataCase_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData) {
            return mergeFrom((pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData other) {
          if (other == pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData.getDefaultInstance()) return this;
          if (other.getID() != 0) {
            setID(other.getID());
          }
          if (other.hasEngineInitialization()) {
            mergeEngineInitialization(other.getEngineInitialization());
          }
          if (other.hasDyspneaSeverity()) {
            mergeDyspneaSeverity(other.getDyspneaSeverity());
          }
          if (other.hasImpairedAlveolarExchangeFraction()) {
            mergeImpairedAlveolarExchangeFraction(other.getImpairedAlveolarExchangeFraction());
          }
          if (other.hasAirwayResistance()) {
            mergeAirwayResistance(other.getAirwayResistance());
          }
          if (other.hasExpiratoryLimbResistance()) {
            mergeExpiratoryLimbResistance(other.getExpiratoryLimbResistance());
          }
          if (other.hasInspiratoryLimbResistance()) {
            mergeInspiratoryLimbResistance(other.getInspiratoryLimbResistance());
          }
          switch (other.getResistancesDataCase()) {
            case LUNGRESISTANCE: {
              mergeLungResistance(other.getLungResistance());
              break;
            }
            case BRONCHIALVEOLIRESISTANCE: {
              mergeBronchiAlveoliResistance(other.getBronchiAlveoliResistance());
              break;
            }
            case RESISTANCESDATA_NOT_SET: {
              break;
            }
          }
          switch (other.getComplianceDataCase()) {
            case SIDECOMPLIANCE: {
              mergeSideCompliance(other.getSideCompliance());
              break;
            }
            case LUNGCOMPLIANCE: {
              mergeLungCompliance(other.getLungCompliance());
              break;
            }
            case COMPLIANCEDATA_NOT_SET: {
              break;
            }
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int resistancesDataCase_ = 0;
        private java.lang.Object resistancesData_;
        public ResistancesDataCase
            getResistancesDataCase() {
          return ResistancesDataCase.forNumber(
              resistancesDataCase_);
        }

        public Builder clearResistancesData() {
          resistancesDataCase_ = 0;
          resistancesData_ = null;
          onChanged();
          return this;
        }

        private int complianceDataCase_ = 0;
        private java.lang.Object complianceData_;
        public ComplianceDataCase
            getComplianceDataCase() {
          return ComplianceDataCase.forNumber(
              complianceDataCase_);
        }

        public Builder clearComplianceData() {
          complianceDataCase_ = 0;
          complianceData_ = null;
          onChanged();
          return this;
        }


        private int iD_ ;
        /**
         * <code>uint32 ID = 1;</code>
         * @return The iD.
         */
        public int getID() {
          return iD_;
        }
        /**
         * <code>uint32 ID = 1;</code>
         * @param value The iD to set.
         * @return This builder for chaining.
         */
        public Builder setID(int value) {
          
          iD_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>uint32 ID = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearID() {
          
          iD_ = 0;
          onChanged();
          return this;
        }

        private pulse.cdm.bind.Engine.EngineInitializationData engineInitialization_;
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.cdm.bind.Engine.EngineInitializationData, pulse.cdm.bind.Engine.EngineInitializationData.Builder, pulse.cdm.bind.Engine.EngineInitializationDataOrBuilder> engineInitializationBuilder_;
        /**
         * <code>.pulse.cdm.bind.EngineInitializationData EngineInitialization = 2;</code>
         * @return Whether the engineInitialization field is set.
         */
        public boolean hasEngineInitialization() {
          return engineInitializationBuilder_ != null || engineInitialization_ != null;
        }
        /**
         * <code>.pulse.cdm.bind.EngineInitializationData EngineInitialization = 2;</code>
         * @return The engineInitialization.
         */
        public pulse.cdm.bind.Engine.EngineInitializationData getEngineInitialization() {
          if (engineInitializationBuilder_ == null) {
            return engineInitialization_ == null ? pulse.cdm.bind.Engine.EngineInitializationData.getDefaultInstance() : engineInitialization_;
          } else {
            return engineInitializationBuilder_.getMessage();
          }
        }
        /**
         * <code>.pulse.cdm.bind.EngineInitializationData EngineInitialization = 2;</code>
         */
        public Builder setEngineInitialization(pulse.cdm.bind.Engine.EngineInitializationData value) {
          if (engineInitializationBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            engineInitialization_ = value;
            onChanged();
          } else {
            engineInitializationBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.EngineInitializationData EngineInitialization = 2;</code>
         */
        public Builder setEngineInitialization(
            pulse.cdm.bind.Engine.EngineInitializationData.Builder builderForValue) {
          if (engineInitializationBuilder_ == null) {
            engineInitialization_ = builderForValue.build();
            onChanged();
          } else {
            engineInitializationBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.EngineInitializationData EngineInitialization = 2;</code>
         */
        public Builder mergeEngineInitialization(pulse.cdm.bind.Engine.EngineInitializationData value) {
          if (engineInitializationBuilder_ == null) {
            if (engineInitialization_ != null) {
              engineInitialization_ =
                pulse.cdm.bind.Engine.EngineInitializationData.newBuilder(engineInitialization_).mergeFrom(value).buildPartial();
            } else {
              engineInitialization_ = value;
            }
            onChanged();
          } else {
            engineInitializationBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.EngineInitializationData EngineInitialization = 2;</code>
         */
        public Builder clearEngineInitialization() {
          if (engineInitializationBuilder_ == null) {
            engineInitialization_ = null;
            onChanged();
          } else {
            engineInitialization_ = null;
            engineInitializationBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.EngineInitializationData EngineInitialization = 2;</code>
         */
        public pulse.cdm.bind.Engine.EngineInitializationData.Builder getEngineInitializationBuilder() {
          
          onChanged();
          return getEngineInitializationFieldBuilder().getBuilder();
        }
        /**
         * <code>.pulse.cdm.bind.EngineInitializationData EngineInitialization = 2;</code>
         */
        public pulse.cdm.bind.Engine.EngineInitializationDataOrBuilder getEngineInitializationOrBuilder() {
          if (engineInitializationBuilder_ != null) {
            return engineInitializationBuilder_.getMessageOrBuilder();
          } else {
            return engineInitialization_ == null ?
                pulse.cdm.bind.Engine.EngineInitializationData.getDefaultInstance() : engineInitialization_;
          }
        }
        /**
         * <code>.pulse.cdm.bind.EngineInitializationData EngineInitialization = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.cdm.bind.Engine.EngineInitializationData, pulse.cdm.bind.Engine.EngineInitializationData.Builder, pulse.cdm.bind.Engine.EngineInitializationDataOrBuilder> 
            getEngineInitializationFieldBuilder() {
          if (engineInitializationBuilder_ == null) {
            engineInitializationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                pulse.cdm.bind.Engine.EngineInitializationData, pulse.cdm.bind.Engine.EngineInitializationData.Builder, pulse.cdm.bind.Engine.EngineInitializationDataOrBuilder>(
                    getEngineInitialization(),
                    getParentForChildren(),
                    isClean());
            engineInitialization_ = null;
          }
          return engineInitializationBuilder_;
        }

        private pulse.cdm.bind.Properties.Scalar0To1Data dyspneaSeverity_;
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.cdm.bind.Properties.Scalar0To1Data, pulse.cdm.bind.Properties.Scalar0To1Data.Builder, pulse.cdm.bind.Properties.Scalar0To1DataOrBuilder> dyspneaSeverityBuilder_;
        /**
         * <code>.pulse.cdm.bind.Scalar0To1Data DyspneaSeverity = 3;</code>
         * @return Whether the dyspneaSeverity field is set.
         */
        public boolean hasDyspneaSeverity() {
          return dyspneaSeverityBuilder_ != null || dyspneaSeverity_ != null;
        }
        /**
         * <code>.pulse.cdm.bind.Scalar0To1Data DyspneaSeverity = 3;</code>
         * @return The dyspneaSeverity.
         */
        public pulse.cdm.bind.Properties.Scalar0To1Data getDyspneaSeverity() {
          if (dyspneaSeverityBuilder_ == null) {
            return dyspneaSeverity_ == null ? pulse.cdm.bind.Properties.Scalar0To1Data.getDefaultInstance() : dyspneaSeverity_;
          } else {
            return dyspneaSeverityBuilder_.getMessage();
          }
        }
        /**
         * <code>.pulse.cdm.bind.Scalar0To1Data DyspneaSeverity = 3;</code>
         */
        public Builder setDyspneaSeverity(pulse.cdm.bind.Properties.Scalar0To1Data value) {
          if (dyspneaSeverityBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            dyspneaSeverity_ = value;
            onChanged();
          } else {
            dyspneaSeverityBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.Scalar0To1Data DyspneaSeverity = 3;</code>
         */
        public Builder setDyspneaSeverity(
            pulse.cdm.bind.Properties.Scalar0To1Data.Builder builderForValue) {
          if (dyspneaSeverityBuilder_ == null) {
            dyspneaSeverity_ = builderForValue.build();
            onChanged();
          } else {
            dyspneaSeverityBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.Scalar0To1Data DyspneaSeverity = 3;</code>
         */
        public Builder mergeDyspneaSeverity(pulse.cdm.bind.Properties.Scalar0To1Data value) {
          if (dyspneaSeverityBuilder_ == null) {
            if (dyspneaSeverity_ != null) {
              dyspneaSeverity_ =
                pulse.cdm.bind.Properties.Scalar0To1Data.newBuilder(dyspneaSeverity_).mergeFrom(value).buildPartial();
            } else {
              dyspneaSeverity_ = value;
            }
            onChanged();
          } else {
            dyspneaSeverityBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.Scalar0To1Data DyspneaSeverity = 3;</code>
         */
        public Builder clearDyspneaSeverity() {
          if (dyspneaSeverityBuilder_ == null) {
            dyspneaSeverity_ = null;
            onChanged();
          } else {
            dyspneaSeverity_ = null;
            dyspneaSeverityBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.Scalar0To1Data DyspneaSeverity = 3;</code>
         */
        public pulse.cdm.bind.Properties.Scalar0To1Data.Builder getDyspneaSeverityBuilder() {
          
          onChanged();
          return getDyspneaSeverityFieldBuilder().getBuilder();
        }
        /**
         * <code>.pulse.cdm.bind.Scalar0To1Data DyspneaSeverity = 3;</code>
         */
        public pulse.cdm.bind.Properties.Scalar0To1DataOrBuilder getDyspneaSeverityOrBuilder() {
          if (dyspneaSeverityBuilder_ != null) {
            return dyspneaSeverityBuilder_.getMessageOrBuilder();
          } else {
            return dyspneaSeverity_ == null ?
                pulse.cdm.bind.Properties.Scalar0To1Data.getDefaultInstance() : dyspneaSeverity_;
          }
        }
        /**
         * <code>.pulse.cdm.bind.Scalar0To1Data DyspneaSeverity = 3;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.cdm.bind.Properties.Scalar0To1Data, pulse.cdm.bind.Properties.Scalar0To1Data.Builder, pulse.cdm.bind.Properties.Scalar0To1DataOrBuilder> 
            getDyspneaSeverityFieldBuilder() {
          if (dyspneaSeverityBuilder_ == null) {
            dyspneaSeverityBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                pulse.cdm.bind.Properties.Scalar0To1Data, pulse.cdm.bind.Properties.Scalar0To1Data.Builder, pulse.cdm.bind.Properties.Scalar0To1DataOrBuilder>(
                    getDyspneaSeverity(),
                    getParentForChildren(),
                    isClean());
            dyspneaSeverity_ = null;
          }
          return dyspneaSeverityBuilder_;
        }

        private pulse.cdm.bind.Properties.Scalar0To1Data impairedAlveolarExchangeFraction_;
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.cdm.bind.Properties.Scalar0To1Data, pulse.cdm.bind.Properties.Scalar0To1Data.Builder, pulse.cdm.bind.Properties.Scalar0To1DataOrBuilder> impairedAlveolarExchangeFractionBuilder_;
        /**
         * <code>.pulse.cdm.bind.Scalar0To1Data ImpairedAlveolarExchangeFraction = 4;</code>
         * @return Whether the impairedAlveolarExchangeFraction field is set.
         */
        public boolean hasImpairedAlveolarExchangeFraction() {
          return impairedAlveolarExchangeFractionBuilder_ != null || impairedAlveolarExchangeFraction_ != null;
        }
        /**
         * <code>.pulse.cdm.bind.Scalar0To1Data ImpairedAlveolarExchangeFraction = 4;</code>
         * @return The impairedAlveolarExchangeFraction.
         */
        public pulse.cdm.bind.Properties.Scalar0To1Data getImpairedAlveolarExchangeFraction() {
          if (impairedAlveolarExchangeFractionBuilder_ == null) {
            return impairedAlveolarExchangeFraction_ == null ? pulse.cdm.bind.Properties.Scalar0To1Data.getDefaultInstance() : impairedAlveolarExchangeFraction_;
          } else {
            return impairedAlveolarExchangeFractionBuilder_.getMessage();
          }
        }
        /**
         * <code>.pulse.cdm.bind.Scalar0To1Data ImpairedAlveolarExchangeFraction = 4;</code>
         */
        public Builder setImpairedAlveolarExchangeFraction(pulse.cdm.bind.Properties.Scalar0To1Data value) {
          if (impairedAlveolarExchangeFractionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            impairedAlveolarExchangeFraction_ = value;
            onChanged();
          } else {
            impairedAlveolarExchangeFractionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.Scalar0To1Data ImpairedAlveolarExchangeFraction = 4;</code>
         */
        public Builder setImpairedAlveolarExchangeFraction(
            pulse.cdm.bind.Properties.Scalar0To1Data.Builder builderForValue) {
          if (impairedAlveolarExchangeFractionBuilder_ == null) {
            impairedAlveolarExchangeFraction_ = builderForValue.build();
            onChanged();
          } else {
            impairedAlveolarExchangeFractionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.Scalar0To1Data ImpairedAlveolarExchangeFraction = 4;</code>
         */
        public Builder mergeImpairedAlveolarExchangeFraction(pulse.cdm.bind.Properties.Scalar0To1Data value) {
          if (impairedAlveolarExchangeFractionBuilder_ == null) {
            if (impairedAlveolarExchangeFraction_ != null) {
              impairedAlveolarExchangeFraction_ =
                pulse.cdm.bind.Properties.Scalar0To1Data.newBuilder(impairedAlveolarExchangeFraction_).mergeFrom(value).buildPartial();
            } else {
              impairedAlveolarExchangeFraction_ = value;
            }
            onChanged();
          } else {
            impairedAlveolarExchangeFractionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.Scalar0To1Data ImpairedAlveolarExchangeFraction = 4;</code>
         */
        public Builder clearImpairedAlveolarExchangeFraction() {
          if (impairedAlveolarExchangeFractionBuilder_ == null) {
            impairedAlveolarExchangeFraction_ = null;
            onChanged();
          } else {
            impairedAlveolarExchangeFraction_ = null;
            impairedAlveolarExchangeFractionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.Scalar0To1Data ImpairedAlveolarExchangeFraction = 4;</code>
         */
        public pulse.cdm.bind.Properties.Scalar0To1Data.Builder getImpairedAlveolarExchangeFractionBuilder() {
          
          onChanged();
          return getImpairedAlveolarExchangeFractionFieldBuilder().getBuilder();
        }
        /**
         * <code>.pulse.cdm.bind.Scalar0To1Data ImpairedAlveolarExchangeFraction = 4;</code>
         */
        public pulse.cdm.bind.Properties.Scalar0To1DataOrBuilder getImpairedAlveolarExchangeFractionOrBuilder() {
          if (impairedAlveolarExchangeFractionBuilder_ != null) {
            return impairedAlveolarExchangeFractionBuilder_.getMessageOrBuilder();
          } else {
            return impairedAlveolarExchangeFraction_ == null ?
                pulse.cdm.bind.Properties.Scalar0To1Data.getDefaultInstance() : impairedAlveolarExchangeFraction_;
          }
        }
        /**
         * <code>.pulse.cdm.bind.Scalar0To1Data ImpairedAlveolarExchangeFraction = 4;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.cdm.bind.Properties.Scalar0To1Data, pulse.cdm.bind.Properties.Scalar0To1Data.Builder, pulse.cdm.bind.Properties.Scalar0To1DataOrBuilder> 
            getImpairedAlveolarExchangeFractionFieldBuilder() {
          if (impairedAlveolarExchangeFractionBuilder_ == null) {
            impairedAlveolarExchangeFractionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                pulse.cdm.bind.Properties.Scalar0To1Data, pulse.cdm.bind.Properties.Scalar0To1Data.Builder, pulse.cdm.bind.Properties.Scalar0To1DataOrBuilder>(
                    getImpairedAlveolarExchangeFraction(),
                    getParentForChildren(),
                    isClean());
            impairedAlveolarExchangeFraction_ = null;
          }
          return impairedAlveolarExchangeFractionBuilder_;
        }

        private pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData airwayResistance_;
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder> airwayResistanceBuilder_;
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData AirwayResistance = 5;</code>
         * @return Whether the airwayResistance field is set.
         */
        public boolean hasAirwayResistance() {
          return airwayResistanceBuilder_ != null || airwayResistance_ != null;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData AirwayResistance = 5;</code>
         * @return The airwayResistance.
         */
        public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData getAirwayResistance() {
          if (airwayResistanceBuilder_ == null) {
            return airwayResistance_ == null ? pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.getDefaultInstance() : airwayResistance_;
          } else {
            return airwayResistanceBuilder_.getMessage();
          }
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData AirwayResistance = 5;</code>
         */
        public Builder setAirwayResistance(pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData value) {
          if (airwayResistanceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            airwayResistance_ = value;
            onChanged();
          } else {
            airwayResistanceBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData AirwayResistance = 5;</code>
         */
        public Builder setAirwayResistance(
            pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder builderForValue) {
          if (airwayResistanceBuilder_ == null) {
            airwayResistance_ = builderForValue.build();
            onChanged();
          } else {
            airwayResistanceBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData AirwayResistance = 5;</code>
         */
        public Builder mergeAirwayResistance(pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData value) {
          if (airwayResistanceBuilder_ == null) {
            if (airwayResistance_ != null) {
              airwayResistance_ =
                pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.newBuilder(airwayResistance_).mergeFrom(value).buildPartial();
            } else {
              airwayResistance_ = value;
            }
            onChanged();
          } else {
            airwayResistanceBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData AirwayResistance = 5;</code>
         */
        public Builder clearAirwayResistance() {
          if (airwayResistanceBuilder_ == null) {
            airwayResistance_ = null;
            onChanged();
          } else {
            airwayResistance_ = null;
            airwayResistanceBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData AirwayResistance = 5;</code>
         */
        public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder getAirwayResistanceBuilder() {
          
          onChanged();
          return getAirwayResistanceFieldBuilder().getBuilder();
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData AirwayResistance = 5;</code>
         */
        public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder getAirwayResistanceOrBuilder() {
          if (airwayResistanceBuilder_ != null) {
            return airwayResistanceBuilder_.getMessageOrBuilder();
          } else {
            return airwayResistance_ == null ?
                pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.getDefaultInstance() : airwayResistance_;
          }
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData AirwayResistance = 5;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder> 
            getAirwayResistanceFieldBuilder() {
          if (airwayResistanceBuilder_ == null) {
            airwayResistanceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder>(
                    getAirwayResistance(),
                    getParentForChildren(),
                    isClean());
            airwayResistance_ = null;
          }
          return airwayResistanceBuilder_;
        }

        private pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData expiratoryLimbResistance_;
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder> expiratoryLimbResistanceBuilder_;
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData ExpiratoryLimbResistance = 6;</code>
         * @return Whether the expiratoryLimbResistance field is set.
         */
        public boolean hasExpiratoryLimbResistance() {
          return expiratoryLimbResistanceBuilder_ != null || expiratoryLimbResistance_ != null;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData ExpiratoryLimbResistance = 6;</code>
         * @return The expiratoryLimbResistance.
         */
        public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData getExpiratoryLimbResistance() {
          if (expiratoryLimbResistanceBuilder_ == null) {
            return expiratoryLimbResistance_ == null ? pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.getDefaultInstance() : expiratoryLimbResistance_;
          } else {
            return expiratoryLimbResistanceBuilder_.getMessage();
          }
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData ExpiratoryLimbResistance = 6;</code>
         */
        public Builder setExpiratoryLimbResistance(pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData value) {
          if (expiratoryLimbResistanceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            expiratoryLimbResistance_ = value;
            onChanged();
          } else {
            expiratoryLimbResistanceBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData ExpiratoryLimbResistance = 6;</code>
         */
        public Builder setExpiratoryLimbResistance(
            pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder builderForValue) {
          if (expiratoryLimbResistanceBuilder_ == null) {
            expiratoryLimbResistance_ = builderForValue.build();
            onChanged();
          } else {
            expiratoryLimbResistanceBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData ExpiratoryLimbResistance = 6;</code>
         */
        public Builder mergeExpiratoryLimbResistance(pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData value) {
          if (expiratoryLimbResistanceBuilder_ == null) {
            if (expiratoryLimbResistance_ != null) {
              expiratoryLimbResistance_ =
                pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.newBuilder(expiratoryLimbResistance_).mergeFrom(value).buildPartial();
            } else {
              expiratoryLimbResistance_ = value;
            }
            onChanged();
          } else {
            expiratoryLimbResistanceBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData ExpiratoryLimbResistance = 6;</code>
         */
        public Builder clearExpiratoryLimbResistance() {
          if (expiratoryLimbResistanceBuilder_ == null) {
            expiratoryLimbResistance_ = null;
            onChanged();
          } else {
            expiratoryLimbResistance_ = null;
            expiratoryLimbResistanceBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData ExpiratoryLimbResistance = 6;</code>
         */
        public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder getExpiratoryLimbResistanceBuilder() {
          
          onChanged();
          return getExpiratoryLimbResistanceFieldBuilder().getBuilder();
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData ExpiratoryLimbResistance = 6;</code>
         */
        public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder getExpiratoryLimbResistanceOrBuilder() {
          if (expiratoryLimbResistanceBuilder_ != null) {
            return expiratoryLimbResistanceBuilder_.getMessageOrBuilder();
          } else {
            return expiratoryLimbResistance_ == null ?
                pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.getDefaultInstance() : expiratoryLimbResistance_;
          }
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData ExpiratoryLimbResistance = 6;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder> 
            getExpiratoryLimbResistanceFieldBuilder() {
          if (expiratoryLimbResistanceBuilder_ == null) {
            expiratoryLimbResistanceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder>(
                    getExpiratoryLimbResistance(),
                    getParentForChildren(),
                    isClean());
            expiratoryLimbResistance_ = null;
          }
          return expiratoryLimbResistanceBuilder_;
        }

        private pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData inspiratoryLimbResistance_;
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder> inspiratoryLimbResistanceBuilder_;
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData InspiratoryLimbResistance = 7;</code>
         * @return Whether the inspiratoryLimbResistance field is set.
         */
        public boolean hasInspiratoryLimbResistance() {
          return inspiratoryLimbResistanceBuilder_ != null || inspiratoryLimbResistance_ != null;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData InspiratoryLimbResistance = 7;</code>
         * @return The inspiratoryLimbResistance.
         */
        public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData getInspiratoryLimbResistance() {
          if (inspiratoryLimbResistanceBuilder_ == null) {
            return inspiratoryLimbResistance_ == null ? pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.getDefaultInstance() : inspiratoryLimbResistance_;
          } else {
            return inspiratoryLimbResistanceBuilder_.getMessage();
          }
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData InspiratoryLimbResistance = 7;</code>
         */
        public Builder setInspiratoryLimbResistance(pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData value) {
          if (inspiratoryLimbResistanceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            inspiratoryLimbResistance_ = value;
            onChanged();
          } else {
            inspiratoryLimbResistanceBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData InspiratoryLimbResistance = 7;</code>
         */
        public Builder setInspiratoryLimbResistance(
            pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder builderForValue) {
          if (inspiratoryLimbResistanceBuilder_ == null) {
            inspiratoryLimbResistance_ = builderForValue.build();
            onChanged();
          } else {
            inspiratoryLimbResistanceBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData InspiratoryLimbResistance = 7;</code>
         */
        public Builder mergeInspiratoryLimbResistance(pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData value) {
          if (inspiratoryLimbResistanceBuilder_ == null) {
            if (inspiratoryLimbResistance_ != null) {
              inspiratoryLimbResistance_ =
                pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.newBuilder(inspiratoryLimbResistance_).mergeFrom(value).buildPartial();
            } else {
              inspiratoryLimbResistance_ = value;
            }
            onChanged();
          } else {
            inspiratoryLimbResistanceBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData InspiratoryLimbResistance = 7;</code>
         */
        public Builder clearInspiratoryLimbResistance() {
          if (inspiratoryLimbResistanceBuilder_ == null) {
            inspiratoryLimbResistance_ = null;
            onChanged();
          } else {
            inspiratoryLimbResistance_ = null;
            inspiratoryLimbResistanceBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData InspiratoryLimbResistance = 7;</code>
         */
        public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder getInspiratoryLimbResistanceBuilder() {
          
          onChanged();
          return getInspiratoryLimbResistanceFieldBuilder().getBuilder();
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData InspiratoryLimbResistance = 7;</code>
         */
        public pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder getInspiratoryLimbResistanceOrBuilder() {
          if (inspiratoryLimbResistanceBuilder_ != null) {
            return inspiratoryLimbResistanceBuilder_.getMessageOrBuilder();
          } else {
            return inspiratoryLimbResistance_ == null ?
                pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.getDefaultInstance() : inspiratoryLimbResistance_;
          }
        }
        /**
         * <code>.pulse.cdm.bind.ScalarPressureTimePerVolumeData InspiratoryLimbResistance = 7;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder> 
            getInspiratoryLimbResistanceFieldBuilder() {
          if (inspiratoryLimbResistanceBuilder_ == null) {
            inspiratoryLimbResistanceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeData.Builder, pulse.cdm.bind.Properties.ScalarPressureTimePerVolumeDataOrBuilder>(
                    getInspiratoryLimbResistance(),
                    getParentForChildren(),
                    isClean());
            inspiratoryLimbResistance_ = null;
          }
          return inspiratoryLimbResistanceBuilder_;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData.Builder, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceDataOrBuilder> lungResistanceBuilder_;
        /**
         * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungResistanceData LungResistance = 8;</code>
         * @return Whether the lungResistance field is set.
         */
        public boolean hasLungResistance() {
          return resistancesDataCase_ == 8;
        }
        /**
         * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungResistanceData LungResistance = 8;</code>
         * @return The lungResistance.
         */
        public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData getLungResistance() {
          if (lungResistanceBuilder_ == null) {
            if (resistancesDataCase_ == 8) {
              return (pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData) resistancesData_;
            }
            return pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData.getDefaultInstance();
          } else {
            if (resistancesDataCase_ == 8) {
              return lungResistanceBuilder_.getMessage();
            }
            return pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData.getDefaultInstance();
          }
        }
        /**
         * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungResistanceData LungResistance = 8;</code>
         */
        public Builder setLungResistance(pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData value) {
          if (lungResistanceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            resistancesData_ = value;
            onChanged();
          } else {
            lungResistanceBuilder_.setMessage(value);
          }
          resistancesDataCase_ = 8;
          return this;
        }
        /**
         * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungResistanceData LungResistance = 8;</code>
         */
        public Builder setLungResistance(
            pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData.Builder builderForValue) {
          if (lungResistanceBuilder_ == null) {
            resistancesData_ = builderForValue.build();
            onChanged();
          } else {
            lungResistanceBuilder_.setMessage(builderForValue.build());
          }
          resistancesDataCase_ = 8;
          return this;
        }
        /**
         * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungResistanceData LungResistance = 8;</code>
         */
        public Builder mergeLungResistance(pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData value) {
          if (lungResistanceBuilder_ == null) {
            if (resistancesDataCase_ == 8 &&
                resistancesData_ != pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData.getDefaultInstance()) {
              resistancesData_ = pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData.newBuilder((pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData) resistancesData_)
                  .mergeFrom(value).buildPartial();
            } else {
              resistancesData_ = value;
            }
            onChanged();
          } else {
            if (resistancesDataCase_ == 8) {
              lungResistanceBuilder_.mergeFrom(value);
            }
            lungResistanceBuilder_.setMessage(value);
          }
          resistancesDataCase_ = 8;
          return this;
        }
        /**
         * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungResistanceData LungResistance = 8;</code>
         */
        public Builder clearLungResistance() {
          if (lungResistanceBuilder_ == null) {
            if (resistancesDataCase_ == 8) {
              resistancesDataCase_ = 0;
              resistancesData_ = null;
              onChanged();
            }
          } else {
            if (resistancesDataCase_ == 8) {
              resistancesDataCase_ = 0;
              resistancesData_ = null;
            }
            lungResistanceBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungResistanceData LungResistance = 8;</code>
         */
        public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData.Builder getLungResistanceBuilder() {
          return getLungResistanceFieldBuilder().getBuilder();
        }
        /**
         * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungResistanceData LungResistance = 8;</code>
         */
        public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceDataOrBuilder getLungResistanceOrBuilder() {
          if ((resistancesDataCase_ == 8) && (lungResistanceBuilder_ != null)) {
            return lungResistanceBuilder_.getMessageOrBuilder();
          } else {
            if (resistancesDataCase_ == 8) {
              return (pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData) resistancesData_;
            }
            return pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData.getDefaultInstance();
          }
        }
        /**
         * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungResistanceData LungResistance = 8;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData.Builder, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceDataOrBuilder> 
            getLungResistanceFieldBuilder() {
          if (lungResistanceBuilder_ == null) {
            if (!(resistancesDataCase_ == 8)) {
              resistancesData_ = pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData.getDefaultInstance();
            }
            lungResistanceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData.Builder, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceDataOrBuilder>(
                    (pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungResistanceData) resistancesData_,
                    getParentForChildren(),
                    isClean());
            resistancesData_ = null;
          }
          resistancesDataCase_ = 8;
          onChanged();;
          return lungResistanceBuilder_;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData.Builder, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceDataOrBuilder> bronchiAlveoliResistanceBuilder_;
        /**
         * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.BronchiAlveoliResistanceData BronchiAlveoliResistance = 9;</code>
         * @return Whether the bronchiAlveoliResistance field is set.
         */
        public boolean hasBronchiAlveoliResistance() {
          return resistancesDataCase_ == 9;
        }
        /**
         * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.BronchiAlveoliResistanceData BronchiAlveoliResistance = 9;</code>
         * @return The bronchiAlveoliResistance.
         */
        public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData getBronchiAlveoliResistance() {
          if (bronchiAlveoliResistanceBuilder_ == null) {
            if (resistancesDataCase_ == 9) {
              return (pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData) resistancesData_;
            }
            return pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData.getDefaultInstance();
          } else {
            if (resistancesDataCase_ == 9) {
              return bronchiAlveoliResistanceBuilder_.getMessage();
            }
            return pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData.getDefaultInstance();
          }
        }
        /**
         * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.BronchiAlveoliResistanceData BronchiAlveoliResistance = 9;</code>
         */
        public Builder setBronchiAlveoliResistance(pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData value) {
          if (bronchiAlveoliResistanceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            resistancesData_ = value;
            onChanged();
          } else {
            bronchiAlveoliResistanceBuilder_.setMessage(value);
          }
          resistancesDataCase_ = 9;
          return this;
        }
        /**
         * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.BronchiAlveoliResistanceData BronchiAlveoliResistance = 9;</code>
         */
        public Builder setBronchiAlveoliResistance(
            pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData.Builder builderForValue) {
          if (bronchiAlveoliResistanceBuilder_ == null) {
            resistancesData_ = builderForValue.build();
            onChanged();
          } else {
            bronchiAlveoliResistanceBuilder_.setMessage(builderForValue.build());
          }
          resistancesDataCase_ = 9;
          return this;
        }
        /**
         * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.BronchiAlveoliResistanceData BronchiAlveoliResistance = 9;</code>
         */
        public Builder mergeBronchiAlveoliResistance(pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData value) {
          if (bronchiAlveoliResistanceBuilder_ == null) {
            if (resistancesDataCase_ == 9 &&
                resistancesData_ != pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData.getDefaultInstance()) {
              resistancesData_ = pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData.newBuilder((pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData) resistancesData_)
                  .mergeFrom(value).buildPartial();
            } else {
              resistancesData_ = value;
            }
            onChanged();
          } else {
            if (resistancesDataCase_ == 9) {
              bronchiAlveoliResistanceBuilder_.mergeFrom(value);
            }
            bronchiAlveoliResistanceBuilder_.setMessage(value);
          }
          resistancesDataCase_ = 9;
          return this;
        }
        /**
         * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.BronchiAlveoliResistanceData BronchiAlveoliResistance = 9;</code>
         */
        public Builder clearBronchiAlveoliResistance() {
          if (bronchiAlveoliResistanceBuilder_ == null) {
            if (resistancesDataCase_ == 9) {
              resistancesDataCase_ = 0;
              resistancesData_ = null;
              onChanged();
            }
          } else {
            if (resistancesDataCase_ == 9) {
              resistancesDataCase_ = 0;
              resistancesData_ = null;
            }
            bronchiAlveoliResistanceBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.BronchiAlveoliResistanceData BronchiAlveoliResistance = 9;</code>
         */
        public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData.Builder getBronchiAlveoliResistanceBuilder() {
          return getBronchiAlveoliResistanceFieldBuilder().getBuilder();
        }
        /**
         * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.BronchiAlveoliResistanceData BronchiAlveoliResistance = 9;</code>
         */
        public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceDataOrBuilder getBronchiAlveoliResistanceOrBuilder() {
          if ((resistancesDataCase_ == 9) && (bronchiAlveoliResistanceBuilder_ != null)) {
            return bronchiAlveoliResistanceBuilder_.getMessageOrBuilder();
          } else {
            if (resistancesDataCase_ == 9) {
              return (pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData) resistancesData_;
            }
            return pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData.getDefaultInstance();
          }
        }
        /**
         * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.BronchiAlveoliResistanceData BronchiAlveoliResistance = 9;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData.Builder, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceDataOrBuilder> 
            getBronchiAlveoliResistanceFieldBuilder() {
          if (bronchiAlveoliResistanceBuilder_ == null) {
            if (!(resistancesDataCase_ == 9)) {
              resistancesData_ = pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData.getDefaultInstance();
            }
            bronchiAlveoliResistanceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData.Builder, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceDataOrBuilder>(
                    (pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.BronchiAlveoliResistanceData) resistancesData_,
                    getParentForChildren(),
                    isClean());
            resistancesData_ = null;
          }
          resistancesDataCase_ = 9;
          onChanged();;
          return bronchiAlveoliResistanceBuilder_;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData.Builder, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceDataOrBuilder> sideComplianceBuilder_;
        /**
         * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.SideComplianceData SideCompliance = 10;</code>
         * @return Whether the sideCompliance field is set.
         */
        public boolean hasSideCompliance() {
          return complianceDataCase_ == 10;
        }
        /**
         * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.SideComplianceData SideCompliance = 10;</code>
         * @return The sideCompliance.
         */
        public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData getSideCompliance() {
          if (sideComplianceBuilder_ == null) {
            if (complianceDataCase_ == 10) {
              return (pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData) complianceData_;
            }
            return pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData.getDefaultInstance();
          } else {
            if (complianceDataCase_ == 10) {
              return sideComplianceBuilder_.getMessage();
            }
            return pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData.getDefaultInstance();
          }
        }
        /**
         * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.SideComplianceData SideCompliance = 10;</code>
         */
        public Builder setSideCompliance(pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData value) {
          if (sideComplianceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            complianceData_ = value;
            onChanged();
          } else {
            sideComplianceBuilder_.setMessage(value);
          }
          complianceDataCase_ = 10;
          return this;
        }
        /**
         * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.SideComplianceData SideCompliance = 10;</code>
         */
        public Builder setSideCompliance(
            pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData.Builder builderForValue) {
          if (sideComplianceBuilder_ == null) {
            complianceData_ = builderForValue.build();
            onChanged();
          } else {
            sideComplianceBuilder_.setMessage(builderForValue.build());
          }
          complianceDataCase_ = 10;
          return this;
        }
        /**
         * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.SideComplianceData SideCompliance = 10;</code>
         */
        public Builder mergeSideCompliance(pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData value) {
          if (sideComplianceBuilder_ == null) {
            if (complianceDataCase_ == 10 &&
                complianceData_ != pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData.getDefaultInstance()) {
              complianceData_ = pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData.newBuilder((pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData) complianceData_)
                  .mergeFrom(value).buildPartial();
            } else {
              complianceData_ = value;
            }
            onChanged();
          } else {
            if (complianceDataCase_ == 10) {
              sideComplianceBuilder_.mergeFrom(value);
            }
            sideComplianceBuilder_.setMessage(value);
          }
          complianceDataCase_ = 10;
          return this;
        }
        /**
         * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.SideComplianceData SideCompliance = 10;</code>
         */
        public Builder clearSideCompliance() {
          if (sideComplianceBuilder_ == null) {
            if (complianceDataCase_ == 10) {
              complianceDataCase_ = 0;
              complianceData_ = null;
              onChanged();
            }
          } else {
            if (complianceDataCase_ == 10) {
              complianceDataCase_ = 0;
              complianceData_ = null;
            }
            sideComplianceBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.SideComplianceData SideCompliance = 10;</code>
         */
        public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData.Builder getSideComplianceBuilder() {
          return getSideComplianceFieldBuilder().getBuilder();
        }
        /**
         * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.SideComplianceData SideCompliance = 10;</code>
         */
        public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceDataOrBuilder getSideComplianceOrBuilder() {
          if ((complianceDataCase_ == 10) && (sideComplianceBuilder_ != null)) {
            return sideComplianceBuilder_.getMessageOrBuilder();
          } else {
            if (complianceDataCase_ == 10) {
              return (pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData) complianceData_;
            }
            return pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData.getDefaultInstance();
          }
        }
        /**
         * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.SideComplianceData SideCompliance = 10;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData.Builder, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceDataOrBuilder> 
            getSideComplianceFieldBuilder() {
          if (sideComplianceBuilder_ == null) {
            if (!(complianceDataCase_ == 10)) {
              complianceData_ = pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData.getDefaultInstance();
            }
            sideComplianceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData.Builder, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceDataOrBuilder>(
                    (pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.SideComplianceData) complianceData_,
                    getParentForChildren(),
                    isClean());
            complianceData_ = null;
          }
          complianceDataCase_ = 10;
          onChanged();;
          return sideComplianceBuilder_;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData.Builder, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceDataOrBuilder> lungComplianceBuilder_;
        /**
         * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungComplianceData LungCompliance = 11;</code>
         * @return Whether the lungCompliance field is set.
         */
        public boolean hasLungCompliance() {
          return complianceDataCase_ == 11;
        }
        /**
         * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungComplianceData LungCompliance = 11;</code>
         * @return The lungCompliance.
         */
        public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData getLungCompliance() {
          if (lungComplianceBuilder_ == null) {
            if (complianceDataCase_ == 11) {
              return (pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData) complianceData_;
            }
            return pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData.getDefaultInstance();
          } else {
            if (complianceDataCase_ == 11) {
              return lungComplianceBuilder_.getMessage();
            }
            return pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData.getDefaultInstance();
          }
        }
        /**
         * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungComplianceData LungCompliance = 11;</code>
         */
        public Builder setLungCompliance(pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData value) {
          if (lungComplianceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            complianceData_ = value;
            onChanged();
          } else {
            lungComplianceBuilder_.setMessage(value);
          }
          complianceDataCase_ = 11;
          return this;
        }
        /**
         * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungComplianceData LungCompliance = 11;</code>
         */
        public Builder setLungCompliance(
            pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData.Builder builderForValue) {
          if (lungComplianceBuilder_ == null) {
            complianceData_ = builderForValue.build();
            onChanged();
          } else {
            lungComplianceBuilder_.setMessage(builderForValue.build());
          }
          complianceDataCase_ = 11;
          return this;
        }
        /**
         * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungComplianceData LungCompliance = 11;</code>
         */
        public Builder mergeLungCompliance(pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData value) {
          if (lungComplianceBuilder_ == null) {
            if (complianceDataCase_ == 11 &&
                complianceData_ != pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData.getDefaultInstance()) {
              complianceData_ = pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData.newBuilder((pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData) complianceData_)
                  .mergeFrom(value).buildPartial();
            } else {
              complianceData_ = value;
            }
            onChanged();
          } else {
            if (complianceDataCase_ == 11) {
              lungComplianceBuilder_.mergeFrom(value);
            }
            lungComplianceBuilder_.setMessage(value);
          }
          complianceDataCase_ = 11;
          return this;
        }
        /**
         * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungComplianceData LungCompliance = 11;</code>
         */
        public Builder clearLungCompliance() {
          if (lungComplianceBuilder_ == null) {
            if (complianceDataCase_ == 11) {
              complianceDataCase_ = 0;
              complianceData_ = null;
              onChanged();
            }
          } else {
            if (complianceDataCase_ == 11) {
              complianceDataCase_ = 0;
              complianceData_ = null;
            }
            lungComplianceBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungComplianceData LungCompliance = 11;</code>
         */
        public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData.Builder getLungComplianceBuilder() {
          return getLungComplianceFieldBuilder().getBuilder();
        }
        /**
         * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungComplianceData LungCompliance = 11;</code>
         */
        public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceDataOrBuilder getLungComplianceOrBuilder() {
          if ((complianceDataCase_ == 11) && (lungComplianceBuilder_ != null)) {
            return lungComplianceBuilder_.getMessageOrBuilder();
          } else {
            if (complianceDataCase_ == 11) {
              return (pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData) complianceData_;
            }
            return pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData.getDefaultInstance();
          }
        }
        /**
         * <code>.pulse.multiplex_ventilator.bind.MultiplexVentilatorData.LungComplianceData LungCompliance = 11;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData.Builder, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceDataOrBuilder> 
            getLungComplianceFieldBuilder() {
          if (lungComplianceBuilder_ == null) {
            if (!(complianceDataCase_ == 11)) {
              complianceData_ = pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData.getDefaultInstance();
            }
            lungComplianceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData.Builder, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceDataOrBuilder>(
                    (pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.LungComplianceData) complianceData_,
                    getParentForChildren(),
                    isClean());
            complianceData_ = null;
          }
          complianceDataCase_ = 11;
          onChanged();;
          return lungComplianceBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:pulse.multiplex_ventilator.bind.MultiplexVentilatorData.PatientConfigurationData)
      }

      // @@protoc_insertion_point(class_scope:pulse.multiplex_ventilator.bind.MultiplexVentilatorData.PatientConfigurationData)
      private static final pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData();
      }

      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<PatientConfigurationData>
          PARSER = new com.google.protobuf.AbstractParser<PatientConfigurationData>() {
        @java.lang.Override
        public PatientConfigurationData parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new PatientConfigurationData(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<PatientConfigurationData> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<PatientConfigurationData> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface ScenarioDataOrBuilder extends
        // @@protoc_insertion_point(interface_extends:pulse.multiplex_ventilator.bind.MultiplexVentilatorData.ScenarioData)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>repeated .pulse.multiplex_ventilator.bind.MultiplexVentilatorData.PatientConfigurationData PatientConfiguration = 1;</code>
       */
      java.util.List<pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData> 
          getPatientConfigurationList();
      /**
       * <code>repeated .pulse.multiplex_ventilator.bind.MultiplexVentilatorData.PatientConfigurationData PatientConfiguration = 1;</code>
       */
      pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData getPatientConfiguration(int index);
      /**
       * <code>repeated .pulse.multiplex_ventilator.bind.MultiplexVentilatorData.PatientConfigurationData PatientConfiguration = 1;</code>
       */
      int getPatientConfigurationCount();
      /**
       * <code>repeated .pulse.multiplex_ventilator.bind.MultiplexVentilatorData.PatientConfigurationData PatientConfiguration = 1;</code>
       */
      java.util.List<? extends pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationDataOrBuilder> 
          getPatientConfigurationOrBuilderList();
      /**
       * <code>repeated .pulse.multiplex_ventilator.bind.MultiplexVentilatorData.PatientConfigurationData PatientConfiguration = 1;</code>
       */
      pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationDataOrBuilder getPatientConfigurationOrBuilder(
          int index);

      /**
       * <code>.pulse.cdm.bind.DataRequestManagerData DataRequestManager = 2;</code>
       * @return Whether the dataRequestManager field is set.
       */
      boolean hasDataRequestManager();
      /**
       * <code>.pulse.cdm.bind.DataRequestManagerData DataRequestManager = 2;</code>
       * @return The dataRequestManager.
       */
      pulse.cdm.bind.Engine.DataRequestManagerData getDataRequestManager();
      /**
       * <code>.pulse.cdm.bind.DataRequestManagerData DataRequestManager = 2;</code>
       */
      pulse.cdm.bind.Engine.DataRequestManagerDataOrBuilder getDataRequestManagerOrBuilder();

      /**
       * <code>.pulse.cpm.bind.ConfigurationData Configuration = 3;</code>
       * @return Whether the configuration field is set.
       */
      boolean hasConfiguration();
      /**
       * <code>.pulse.cpm.bind.ConfigurationData Configuration = 3;</code>
       * @return The configuration.
       */
      pulse.cpm.bind.PulseConfiguration.ConfigurationData getConfiguration();
      /**
       * <code>.pulse.cpm.bind.ConfigurationData Configuration = 3;</code>
       */
      pulse.cpm.bind.PulseConfiguration.ConfigurationDataOrBuilder getConfigurationOrBuilder();
    }
    /**
     * Protobuf type {@code pulse.multiplex_ventilator.bind.MultiplexVentilatorData.ScenarioData}
     */
    public  static final class ScenarioData extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:pulse.multiplex_ventilator.bind.MultiplexVentilatorData.ScenarioData)
        ScenarioDataOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use ScenarioData.newBuilder() to construct.
      private ScenarioData(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private ScenarioData() {
        patientConfiguration_ = java.util.Collections.emptyList();
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new ScenarioData();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private ScenarioData(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                  patientConfiguration_ = new java.util.ArrayList<pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData>();
                  mutable_bitField0_ |= 0x00000001;
                }
                patientConfiguration_.add(
                    input.readMessage(pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData.parser(), extensionRegistry));
                break;
              }
              case 18: {
                pulse.cdm.bind.Engine.DataRequestManagerData.Builder subBuilder = null;
                if (dataRequestManager_ != null) {
                  subBuilder = dataRequestManager_.toBuilder();
                }
                dataRequestManager_ = input.readMessage(pulse.cdm.bind.Engine.DataRequestManagerData.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(dataRequestManager_);
                  dataRequestManager_ = subBuilder.buildPartial();
                }

                break;
              }
              case 26: {
                pulse.cpm.bind.PulseConfiguration.ConfigurationData.Builder subBuilder = null;
                if (configuration_ != null) {
                  subBuilder = configuration_.toBuilder();
                }
                configuration_ = input.readMessage(pulse.cpm.bind.PulseConfiguration.ConfigurationData.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(configuration_);
                  configuration_ = subBuilder.buildPartial();
                }

                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000001) != 0)) {
            patientConfiguration_ = java.util.Collections.unmodifiableList(patientConfiguration_);
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pulse.multiplex_ventilator.bind.MultiplexVentilator.internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_ScenarioData_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pulse.multiplex_ventilator.bind.MultiplexVentilator.internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_ScenarioData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.ScenarioData.class, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.ScenarioData.Builder.class);
      }

      public static final int PATIENTCONFIGURATION_FIELD_NUMBER = 1;
      private java.util.List<pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData> patientConfiguration_;
      /**
       * <code>repeated .pulse.multiplex_ventilator.bind.MultiplexVentilatorData.PatientConfigurationData PatientConfiguration = 1;</code>
       */
      public java.util.List<pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData> getPatientConfigurationList() {
        return patientConfiguration_;
      }
      /**
       * <code>repeated .pulse.multiplex_ventilator.bind.MultiplexVentilatorData.PatientConfigurationData PatientConfiguration = 1;</code>
       */
      public java.util.List<? extends pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationDataOrBuilder> 
          getPatientConfigurationOrBuilderList() {
        return patientConfiguration_;
      }
      /**
       * <code>repeated .pulse.multiplex_ventilator.bind.MultiplexVentilatorData.PatientConfigurationData PatientConfiguration = 1;</code>
       */
      public int getPatientConfigurationCount() {
        return patientConfiguration_.size();
      }
      /**
       * <code>repeated .pulse.multiplex_ventilator.bind.MultiplexVentilatorData.PatientConfigurationData PatientConfiguration = 1;</code>
       */
      public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData getPatientConfiguration(int index) {
        return patientConfiguration_.get(index);
      }
      /**
       * <code>repeated .pulse.multiplex_ventilator.bind.MultiplexVentilatorData.PatientConfigurationData PatientConfiguration = 1;</code>
       */
      public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationDataOrBuilder getPatientConfigurationOrBuilder(
          int index) {
        return patientConfiguration_.get(index);
      }

      public static final int DATAREQUESTMANAGER_FIELD_NUMBER = 2;
      private pulse.cdm.bind.Engine.DataRequestManagerData dataRequestManager_;
      /**
       * <code>.pulse.cdm.bind.DataRequestManagerData DataRequestManager = 2;</code>
       * @return Whether the dataRequestManager field is set.
       */
      public boolean hasDataRequestManager() {
        return dataRequestManager_ != null;
      }
      /**
       * <code>.pulse.cdm.bind.DataRequestManagerData DataRequestManager = 2;</code>
       * @return The dataRequestManager.
       */
      public pulse.cdm.bind.Engine.DataRequestManagerData getDataRequestManager() {
        return dataRequestManager_ == null ? pulse.cdm.bind.Engine.DataRequestManagerData.getDefaultInstance() : dataRequestManager_;
      }
      /**
       * <code>.pulse.cdm.bind.DataRequestManagerData DataRequestManager = 2;</code>
       */
      public pulse.cdm.bind.Engine.DataRequestManagerDataOrBuilder getDataRequestManagerOrBuilder() {
        return getDataRequestManager();
      }

      public static final int CONFIGURATION_FIELD_NUMBER = 3;
      private pulse.cpm.bind.PulseConfiguration.ConfigurationData configuration_;
      /**
       * <code>.pulse.cpm.bind.ConfigurationData Configuration = 3;</code>
       * @return Whether the configuration field is set.
       */
      public boolean hasConfiguration() {
        return configuration_ != null;
      }
      /**
       * <code>.pulse.cpm.bind.ConfigurationData Configuration = 3;</code>
       * @return The configuration.
       */
      public pulse.cpm.bind.PulseConfiguration.ConfigurationData getConfiguration() {
        return configuration_ == null ? pulse.cpm.bind.PulseConfiguration.ConfigurationData.getDefaultInstance() : configuration_;
      }
      /**
       * <code>.pulse.cpm.bind.ConfigurationData Configuration = 3;</code>
       */
      public pulse.cpm.bind.PulseConfiguration.ConfigurationDataOrBuilder getConfigurationOrBuilder() {
        return getConfiguration();
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        for (int i = 0; i < patientConfiguration_.size(); i++) {
          output.writeMessage(1, patientConfiguration_.get(i));
        }
        if (dataRequestManager_ != null) {
          output.writeMessage(2, getDataRequestManager());
        }
        if (configuration_ != null) {
          output.writeMessage(3, getConfiguration());
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        for (int i = 0; i < patientConfiguration_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, patientConfiguration_.get(i));
        }
        if (dataRequestManager_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, getDataRequestManager());
        }
        if (configuration_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, getConfiguration());
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.ScenarioData)) {
          return super.equals(obj);
        }
        pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.ScenarioData other = (pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.ScenarioData) obj;

        if (!getPatientConfigurationList()
            .equals(other.getPatientConfigurationList())) return false;
        if (hasDataRequestManager() != other.hasDataRequestManager()) return false;
        if (hasDataRequestManager()) {
          if (!getDataRequestManager()
              .equals(other.getDataRequestManager())) return false;
        }
        if (hasConfiguration() != other.hasConfiguration()) return false;
        if (hasConfiguration()) {
          if (!getConfiguration()
              .equals(other.getConfiguration())) return false;
        }
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (getPatientConfigurationCount() > 0) {
          hash = (37 * hash) + PATIENTCONFIGURATION_FIELD_NUMBER;
          hash = (53 * hash) + getPatientConfigurationList().hashCode();
        }
        if (hasDataRequestManager()) {
          hash = (37 * hash) + DATAREQUESTMANAGER_FIELD_NUMBER;
          hash = (53 * hash) + getDataRequestManager().hashCode();
        }
        if (hasConfiguration()) {
          hash = (37 * hash) + CONFIGURATION_FIELD_NUMBER;
          hash = (53 * hash) + getConfiguration().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.ScenarioData parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.ScenarioData parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.ScenarioData parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.ScenarioData parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.ScenarioData parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.ScenarioData parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.ScenarioData parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.ScenarioData parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.ScenarioData parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.ScenarioData parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.ScenarioData parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.ScenarioData parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.ScenarioData prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code pulse.multiplex_ventilator.bind.MultiplexVentilatorData.ScenarioData}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:pulse.multiplex_ventilator.bind.MultiplexVentilatorData.ScenarioData)
          pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.ScenarioDataOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return pulse.multiplex_ventilator.bind.MultiplexVentilator.internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_ScenarioData_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return pulse.multiplex_ventilator.bind.MultiplexVentilator.internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_ScenarioData_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.ScenarioData.class, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.ScenarioData.Builder.class);
        }

        // Construct using pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.ScenarioData.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
            getPatientConfigurationFieldBuilder();
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          if (patientConfigurationBuilder_ == null) {
            patientConfiguration_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            patientConfigurationBuilder_.clear();
          }
          if (dataRequestManagerBuilder_ == null) {
            dataRequestManager_ = null;
          } else {
            dataRequestManager_ = null;
            dataRequestManagerBuilder_ = null;
          }
          if (configurationBuilder_ == null) {
            configuration_ = null;
          } else {
            configuration_ = null;
            configurationBuilder_ = null;
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return pulse.multiplex_ventilator.bind.MultiplexVentilator.internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_ScenarioData_descriptor;
        }

        @java.lang.Override
        public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.ScenarioData getDefaultInstanceForType() {
          return pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.ScenarioData.getDefaultInstance();
        }

        @java.lang.Override
        public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.ScenarioData build() {
          pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.ScenarioData result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.ScenarioData buildPartial() {
          pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.ScenarioData result = new pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.ScenarioData(this);
          int from_bitField0_ = bitField0_;
          if (patientConfigurationBuilder_ == null) {
            if (((bitField0_ & 0x00000001) != 0)) {
              patientConfiguration_ = java.util.Collections.unmodifiableList(patientConfiguration_);
              bitField0_ = (bitField0_ & ~0x00000001);
            }
            result.patientConfiguration_ = patientConfiguration_;
          } else {
            result.patientConfiguration_ = patientConfigurationBuilder_.build();
          }
          if (dataRequestManagerBuilder_ == null) {
            result.dataRequestManager_ = dataRequestManager_;
          } else {
            result.dataRequestManager_ = dataRequestManagerBuilder_.build();
          }
          if (configurationBuilder_ == null) {
            result.configuration_ = configuration_;
          } else {
            result.configuration_ = configurationBuilder_.build();
          }
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.ScenarioData) {
            return mergeFrom((pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.ScenarioData)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.ScenarioData other) {
          if (other == pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.ScenarioData.getDefaultInstance()) return this;
          if (patientConfigurationBuilder_ == null) {
            if (!other.patientConfiguration_.isEmpty()) {
              if (patientConfiguration_.isEmpty()) {
                patientConfiguration_ = other.patientConfiguration_;
                bitField0_ = (bitField0_ & ~0x00000001);
              } else {
                ensurePatientConfigurationIsMutable();
                patientConfiguration_.addAll(other.patientConfiguration_);
              }
              onChanged();
            }
          } else {
            if (!other.patientConfiguration_.isEmpty()) {
              if (patientConfigurationBuilder_.isEmpty()) {
                patientConfigurationBuilder_.dispose();
                patientConfigurationBuilder_ = null;
                patientConfiguration_ = other.patientConfiguration_;
                bitField0_ = (bitField0_ & ~0x00000001);
                patientConfigurationBuilder_ = 
                  com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                     getPatientConfigurationFieldBuilder() : null;
              } else {
                patientConfigurationBuilder_.addAllMessages(other.patientConfiguration_);
              }
            }
          }
          if (other.hasDataRequestManager()) {
            mergeDataRequestManager(other.getDataRequestManager());
          }
          if (other.hasConfiguration()) {
            mergeConfiguration(other.getConfiguration());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.ScenarioData parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.ScenarioData) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private java.util.List<pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData> patientConfiguration_ =
          java.util.Collections.emptyList();
        private void ensurePatientConfigurationIsMutable() {
          if (!((bitField0_ & 0x00000001) != 0)) {
            patientConfiguration_ = new java.util.ArrayList<pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData>(patientConfiguration_);
            bitField0_ |= 0x00000001;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
            pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData.Builder, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationDataOrBuilder> patientConfigurationBuilder_;

        /**
         * <code>repeated .pulse.multiplex_ventilator.bind.MultiplexVentilatorData.PatientConfigurationData PatientConfiguration = 1;</code>
         */
        public java.util.List<pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData> getPatientConfigurationList() {
          if (patientConfigurationBuilder_ == null) {
            return java.util.Collections.unmodifiableList(patientConfiguration_);
          } else {
            return patientConfigurationBuilder_.getMessageList();
          }
        }
        /**
         * <code>repeated .pulse.multiplex_ventilator.bind.MultiplexVentilatorData.PatientConfigurationData PatientConfiguration = 1;</code>
         */
        public int getPatientConfigurationCount() {
          if (patientConfigurationBuilder_ == null) {
            return patientConfiguration_.size();
          } else {
            return patientConfigurationBuilder_.getCount();
          }
        }
        /**
         * <code>repeated .pulse.multiplex_ventilator.bind.MultiplexVentilatorData.PatientConfigurationData PatientConfiguration = 1;</code>
         */
        public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData getPatientConfiguration(int index) {
          if (patientConfigurationBuilder_ == null) {
            return patientConfiguration_.get(index);
          } else {
            return patientConfigurationBuilder_.getMessage(index);
          }
        }
        /**
         * <code>repeated .pulse.multiplex_ventilator.bind.MultiplexVentilatorData.PatientConfigurationData PatientConfiguration = 1;</code>
         */
        public Builder setPatientConfiguration(
            int index, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData value) {
          if (patientConfigurationBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensurePatientConfigurationIsMutable();
            patientConfiguration_.set(index, value);
            onChanged();
          } else {
            patientConfigurationBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .pulse.multiplex_ventilator.bind.MultiplexVentilatorData.PatientConfigurationData PatientConfiguration = 1;</code>
         */
        public Builder setPatientConfiguration(
            int index, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData.Builder builderForValue) {
          if (patientConfigurationBuilder_ == null) {
            ensurePatientConfigurationIsMutable();
            patientConfiguration_.set(index, builderForValue.build());
            onChanged();
          } else {
            patientConfigurationBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .pulse.multiplex_ventilator.bind.MultiplexVentilatorData.PatientConfigurationData PatientConfiguration = 1;</code>
         */
        public Builder addPatientConfiguration(pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData value) {
          if (patientConfigurationBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensurePatientConfigurationIsMutable();
            patientConfiguration_.add(value);
            onChanged();
          } else {
            patientConfigurationBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <code>repeated .pulse.multiplex_ventilator.bind.MultiplexVentilatorData.PatientConfigurationData PatientConfiguration = 1;</code>
         */
        public Builder addPatientConfiguration(
            int index, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData value) {
          if (patientConfigurationBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensurePatientConfigurationIsMutable();
            patientConfiguration_.add(index, value);
            onChanged();
          } else {
            patientConfigurationBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .pulse.multiplex_ventilator.bind.MultiplexVentilatorData.PatientConfigurationData PatientConfiguration = 1;</code>
         */
        public Builder addPatientConfiguration(
            pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData.Builder builderForValue) {
          if (patientConfigurationBuilder_ == null) {
            ensurePatientConfigurationIsMutable();
            patientConfiguration_.add(builderForValue.build());
            onChanged();
          } else {
            patientConfigurationBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .pulse.multiplex_ventilator.bind.MultiplexVentilatorData.PatientConfigurationData PatientConfiguration = 1;</code>
         */
        public Builder addPatientConfiguration(
            int index, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData.Builder builderForValue) {
          if (patientConfigurationBuilder_ == null) {
            ensurePatientConfigurationIsMutable();
            patientConfiguration_.add(index, builderForValue.build());
            onChanged();
          } else {
            patientConfigurationBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .pulse.multiplex_ventilator.bind.MultiplexVentilatorData.PatientConfigurationData PatientConfiguration = 1;</code>
         */
        public Builder addAllPatientConfiguration(
            java.lang.Iterable<? extends pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData> values) {
          if (patientConfigurationBuilder_ == null) {
            ensurePatientConfigurationIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, patientConfiguration_);
            onChanged();
          } else {
            patientConfigurationBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <code>repeated .pulse.multiplex_ventilator.bind.MultiplexVentilatorData.PatientConfigurationData PatientConfiguration = 1;</code>
         */
        public Builder clearPatientConfiguration() {
          if (patientConfigurationBuilder_ == null) {
            patientConfiguration_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000001);
            onChanged();
          } else {
            patientConfigurationBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>repeated .pulse.multiplex_ventilator.bind.MultiplexVentilatorData.PatientConfigurationData PatientConfiguration = 1;</code>
         */
        public Builder removePatientConfiguration(int index) {
          if (patientConfigurationBuilder_ == null) {
            ensurePatientConfigurationIsMutable();
            patientConfiguration_.remove(index);
            onChanged();
          } else {
            patientConfigurationBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <code>repeated .pulse.multiplex_ventilator.bind.MultiplexVentilatorData.PatientConfigurationData PatientConfiguration = 1;</code>
         */
        public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData.Builder getPatientConfigurationBuilder(
            int index) {
          return getPatientConfigurationFieldBuilder().getBuilder(index);
        }
        /**
         * <code>repeated .pulse.multiplex_ventilator.bind.MultiplexVentilatorData.PatientConfigurationData PatientConfiguration = 1;</code>
         */
        public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationDataOrBuilder getPatientConfigurationOrBuilder(
            int index) {
          if (patientConfigurationBuilder_ == null) {
            return patientConfiguration_.get(index);  } else {
            return patientConfigurationBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <code>repeated .pulse.multiplex_ventilator.bind.MultiplexVentilatorData.PatientConfigurationData PatientConfiguration = 1;</code>
         */
        public java.util.List<? extends pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationDataOrBuilder> 
             getPatientConfigurationOrBuilderList() {
          if (patientConfigurationBuilder_ != null) {
            return patientConfigurationBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(patientConfiguration_);
          }
        }
        /**
         * <code>repeated .pulse.multiplex_ventilator.bind.MultiplexVentilatorData.PatientConfigurationData PatientConfiguration = 1;</code>
         */
        public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData.Builder addPatientConfigurationBuilder() {
          return getPatientConfigurationFieldBuilder().addBuilder(
              pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData.getDefaultInstance());
        }
        /**
         * <code>repeated .pulse.multiplex_ventilator.bind.MultiplexVentilatorData.PatientConfigurationData PatientConfiguration = 1;</code>
         */
        public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData.Builder addPatientConfigurationBuilder(
            int index) {
          return getPatientConfigurationFieldBuilder().addBuilder(
              index, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData.getDefaultInstance());
        }
        /**
         * <code>repeated .pulse.multiplex_ventilator.bind.MultiplexVentilatorData.PatientConfigurationData PatientConfiguration = 1;</code>
         */
        public java.util.List<pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData.Builder> 
             getPatientConfigurationBuilderList() {
          return getPatientConfigurationFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilderV3<
            pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData.Builder, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationDataOrBuilder> 
            getPatientConfigurationFieldBuilder() {
          if (patientConfigurationBuilder_ == null) {
            patientConfigurationBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationData.Builder, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.PatientConfigurationDataOrBuilder>(
                    patientConfiguration_,
                    ((bitField0_ & 0x00000001) != 0),
                    getParentForChildren(),
                    isClean());
            patientConfiguration_ = null;
          }
          return patientConfigurationBuilder_;
        }

        private pulse.cdm.bind.Engine.DataRequestManagerData dataRequestManager_;
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.cdm.bind.Engine.DataRequestManagerData, pulse.cdm.bind.Engine.DataRequestManagerData.Builder, pulse.cdm.bind.Engine.DataRequestManagerDataOrBuilder> dataRequestManagerBuilder_;
        /**
         * <code>.pulse.cdm.bind.DataRequestManagerData DataRequestManager = 2;</code>
         * @return Whether the dataRequestManager field is set.
         */
        public boolean hasDataRequestManager() {
          return dataRequestManagerBuilder_ != null || dataRequestManager_ != null;
        }
        /**
         * <code>.pulse.cdm.bind.DataRequestManagerData DataRequestManager = 2;</code>
         * @return The dataRequestManager.
         */
        public pulse.cdm.bind.Engine.DataRequestManagerData getDataRequestManager() {
          if (dataRequestManagerBuilder_ == null) {
            return dataRequestManager_ == null ? pulse.cdm.bind.Engine.DataRequestManagerData.getDefaultInstance() : dataRequestManager_;
          } else {
            return dataRequestManagerBuilder_.getMessage();
          }
        }
        /**
         * <code>.pulse.cdm.bind.DataRequestManagerData DataRequestManager = 2;</code>
         */
        public Builder setDataRequestManager(pulse.cdm.bind.Engine.DataRequestManagerData value) {
          if (dataRequestManagerBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            dataRequestManager_ = value;
            onChanged();
          } else {
            dataRequestManagerBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.DataRequestManagerData DataRequestManager = 2;</code>
         */
        public Builder setDataRequestManager(
            pulse.cdm.bind.Engine.DataRequestManagerData.Builder builderForValue) {
          if (dataRequestManagerBuilder_ == null) {
            dataRequestManager_ = builderForValue.build();
            onChanged();
          } else {
            dataRequestManagerBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.DataRequestManagerData DataRequestManager = 2;</code>
         */
        public Builder mergeDataRequestManager(pulse.cdm.bind.Engine.DataRequestManagerData value) {
          if (dataRequestManagerBuilder_ == null) {
            if (dataRequestManager_ != null) {
              dataRequestManager_ =
                pulse.cdm.bind.Engine.DataRequestManagerData.newBuilder(dataRequestManager_).mergeFrom(value).buildPartial();
            } else {
              dataRequestManager_ = value;
            }
            onChanged();
          } else {
            dataRequestManagerBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.DataRequestManagerData DataRequestManager = 2;</code>
         */
        public Builder clearDataRequestManager() {
          if (dataRequestManagerBuilder_ == null) {
            dataRequestManager_ = null;
            onChanged();
          } else {
            dataRequestManager_ = null;
            dataRequestManagerBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.pulse.cdm.bind.DataRequestManagerData DataRequestManager = 2;</code>
         */
        public pulse.cdm.bind.Engine.DataRequestManagerData.Builder getDataRequestManagerBuilder() {
          
          onChanged();
          return getDataRequestManagerFieldBuilder().getBuilder();
        }
        /**
         * <code>.pulse.cdm.bind.DataRequestManagerData DataRequestManager = 2;</code>
         */
        public pulse.cdm.bind.Engine.DataRequestManagerDataOrBuilder getDataRequestManagerOrBuilder() {
          if (dataRequestManagerBuilder_ != null) {
            return dataRequestManagerBuilder_.getMessageOrBuilder();
          } else {
            return dataRequestManager_ == null ?
                pulse.cdm.bind.Engine.DataRequestManagerData.getDefaultInstance() : dataRequestManager_;
          }
        }
        /**
         * <code>.pulse.cdm.bind.DataRequestManagerData DataRequestManager = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.cdm.bind.Engine.DataRequestManagerData, pulse.cdm.bind.Engine.DataRequestManagerData.Builder, pulse.cdm.bind.Engine.DataRequestManagerDataOrBuilder> 
            getDataRequestManagerFieldBuilder() {
          if (dataRequestManagerBuilder_ == null) {
            dataRequestManagerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                pulse.cdm.bind.Engine.DataRequestManagerData, pulse.cdm.bind.Engine.DataRequestManagerData.Builder, pulse.cdm.bind.Engine.DataRequestManagerDataOrBuilder>(
                    getDataRequestManager(),
                    getParentForChildren(),
                    isClean());
            dataRequestManager_ = null;
          }
          return dataRequestManagerBuilder_;
        }

        private pulse.cpm.bind.PulseConfiguration.ConfigurationData configuration_;
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.cpm.bind.PulseConfiguration.ConfigurationData, pulse.cpm.bind.PulseConfiguration.ConfigurationData.Builder, pulse.cpm.bind.PulseConfiguration.ConfigurationDataOrBuilder> configurationBuilder_;
        /**
         * <code>.pulse.cpm.bind.ConfigurationData Configuration = 3;</code>
         * @return Whether the configuration field is set.
         */
        public boolean hasConfiguration() {
          return configurationBuilder_ != null || configuration_ != null;
        }
        /**
         * <code>.pulse.cpm.bind.ConfigurationData Configuration = 3;</code>
         * @return The configuration.
         */
        public pulse.cpm.bind.PulseConfiguration.ConfigurationData getConfiguration() {
          if (configurationBuilder_ == null) {
            return configuration_ == null ? pulse.cpm.bind.PulseConfiguration.ConfigurationData.getDefaultInstance() : configuration_;
          } else {
            return configurationBuilder_.getMessage();
          }
        }
        /**
         * <code>.pulse.cpm.bind.ConfigurationData Configuration = 3;</code>
         */
        public Builder setConfiguration(pulse.cpm.bind.PulseConfiguration.ConfigurationData value) {
          if (configurationBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            configuration_ = value;
            onChanged();
          } else {
            configurationBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.pulse.cpm.bind.ConfigurationData Configuration = 3;</code>
         */
        public Builder setConfiguration(
            pulse.cpm.bind.PulseConfiguration.ConfigurationData.Builder builderForValue) {
          if (configurationBuilder_ == null) {
            configuration_ = builderForValue.build();
            onChanged();
          } else {
            configurationBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.pulse.cpm.bind.ConfigurationData Configuration = 3;</code>
         */
        public Builder mergeConfiguration(pulse.cpm.bind.PulseConfiguration.ConfigurationData value) {
          if (configurationBuilder_ == null) {
            if (configuration_ != null) {
              configuration_ =
                pulse.cpm.bind.PulseConfiguration.ConfigurationData.newBuilder(configuration_).mergeFrom(value).buildPartial();
            } else {
              configuration_ = value;
            }
            onChanged();
          } else {
            configurationBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.pulse.cpm.bind.ConfigurationData Configuration = 3;</code>
         */
        public Builder clearConfiguration() {
          if (configurationBuilder_ == null) {
            configuration_ = null;
            onChanged();
          } else {
            configuration_ = null;
            configurationBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.pulse.cpm.bind.ConfigurationData Configuration = 3;</code>
         */
        public pulse.cpm.bind.PulseConfiguration.ConfigurationData.Builder getConfigurationBuilder() {
          
          onChanged();
          return getConfigurationFieldBuilder().getBuilder();
        }
        /**
         * <code>.pulse.cpm.bind.ConfigurationData Configuration = 3;</code>
         */
        public pulse.cpm.bind.PulseConfiguration.ConfigurationDataOrBuilder getConfigurationOrBuilder() {
          if (configurationBuilder_ != null) {
            return configurationBuilder_.getMessageOrBuilder();
          } else {
            return configuration_ == null ?
                pulse.cpm.bind.PulseConfiguration.ConfigurationData.getDefaultInstance() : configuration_;
          }
        }
        /**
         * <code>.pulse.cpm.bind.ConfigurationData Configuration = 3;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            pulse.cpm.bind.PulseConfiguration.ConfigurationData, pulse.cpm.bind.PulseConfiguration.ConfigurationData.Builder, pulse.cpm.bind.PulseConfiguration.ConfigurationDataOrBuilder> 
            getConfigurationFieldBuilder() {
          if (configurationBuilder_ == null) {
            configurationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                pulse.cpm.bind.PulseConfiguration.ConfigurationData, pulse.cpm.bind.PulseConfiguration.ConfigurationData.Builder, pulse.cpm.bind.PulseConfiguration.ConfigurationDataOrBuilder>(
                    getConfiguration(),
                    getParentForChildren(),
                    isClean());
            configuration_ = null;
          }
          return configurationBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:pulse.multiplex_ventilator.bind.MultiplexVentilatorData.ScenarioData)
      }

      // @@protoc_insertion_point(class_scope:pulse.multiplex_ventilator.bind.MultiplexVentilatorData.ScenarioData)
      private static final pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.ScenarioData DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.ScenarioData();
      }

      public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.ScenarioData getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<ScenarioData>
          PARSER = new com.google.protobuf.AbstractParser<ScenarioData>() {
        @java.lang.Override
        public ScenarioData parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new ScenarioData(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<ScenarioData> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<ScenarioData> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.ScenarioData getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData)) {
        return super.equals(obj);
      }
      pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData other = (pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData) obj;

      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pulse.multiplex_ventilator.bind.MultiplexVentilatorData}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:pulse.multiplex_ventilator.bind.MultiplexVentilatorData)
        pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pulse.multiplex_ventilator.bind.MultiplexVentilator.internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pulse.multiplex_ventilator.bind.MultiplexVentilator.internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.class, pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.Builder.class);
      }

      // Construct using pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return pulse.multiplex_ventilator.bind.MultiplexVentilator.internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_descriptor;
      }

      @java.lang.Override
      public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData getDefaultInstanceForType() {
        return pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.getDefaultInstance();
      }

      @java.lang.Override
      public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData build() {
        pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData buildPartial() {
        pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData result = new pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData) {
          return mergeFrom((pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData other) {
        if (other == pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:pulse.multiplex_ventilator.bind.MultiplexVentilatorData)
    }

    // @@protoc_insertion_point(class_scope:pulse.multiplex_ventilator.bind.MultiplexVentilatorData)
    private static final pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData();
    }

    public static pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MultiplexVentilatorData>
        PARSER = new com.google.protobuf.AbstractParser<MultiplexVentilatorData>() {
      @java.lang.Override
      public MultiplexVentilatorData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MultiplexVentilatorData(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<MultiplexVentilatorData> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MultiplexVentilatorData> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public pulse.multiplex_ventilator.bind.MultiplexVentilator.MultiplexVentilatorData getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_LungResistanceData_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_LungResistanceData_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_BronchiAlveoliResistanceData_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_BronchiAlveoliResistanceData_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_SideComplianceData_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_SideComplianceData_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_LungComplianceData_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_LungComplianceData_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_PatientConfigurationData_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_PatientConfigurationData_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_ScenarioData_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_ScenarioData_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n)pulse/impl/bind/MultiplexVentilator.pr" +
      "oto\022\037pulse.multiplex_ventilator.bind\032\033pu" +
      "lse/cdm/bind/Engine.proto\032\037pulse/cdm/bin" +
      "d/Properties.proto\032\'pulse/cpm/bind/Pulse" +
      "Configuration.proto\"\332\021\n\027MultiplexVentila" +
      "torData\032\257\001\n\022LungResistanceData\022K\n\022LeftLu" +
      "ngResistance\030\001 \001(\0132/.pulse.cdm.bind.Scal" +
      "arPressureTimePerVolumeData\022L\n\023RightLung" +
      "Resistance\030\002 \001(\0132/.pulse.cdm.bind.Scalar" +
      "PressureTimePerVolumeData\032\340\002\n\034BronchiAlv" +
      "eoliResistanceData\022N\n\025LeftBronchiResista" +
      "nce\030\001 \001(\0132/.pulse.cdm.bind.ScalarPressur" +
      "eTimePerVolumeData\022N\n\025LeftAlveoliResista" +
      "nce\030\002 \001(\0132/.pulse.cdm.bind.ScalarPressur" +
      "eTimePerVolumeData\022O\n\026RightBronchiResist" +
      "ance\030\003 \001(\0132/.pulse.cdm.bind.ScalarPressu" +
      "reTimePerVolumeData\022O\n\026RightAlveoliResis" +
      "tance\030\004 \001(\0132/.pulse.cdm.bind.ScalarPress" +
      "ureTimePerVolumeData\032\247\001\n\022SideComplianceD" +
      "ata\022G\n\022LeftSideCompliance\030\001 \001(\0132+.pulse." +
      "cdm.bind.ScalarVolumePerPressureData\022H\n\023" +
      "RightSideCompliance\030\002 \001(\0132+.pulse.cdm.bi" +
      "nd.ScalarVolumePerPressureData\032\304\002\n\022LungC" +
      "omplianceData\022L\n\027LeftChestWallCompliance" +
      "\030\001 \001(\0132+.pulse.cdm.bind.ScalarVolumePerP" +
      "ressureData\022G\n\022LeftLungCompliance\030\002 \001(\0132" +
      "+.pulse.cdm.bind.ScalarVolumePerPressure" +
      "Data\022H\n\023RightLungCompliance\030\003 \001(\0132+.puls" +
      "e.cdm.bind.ScalarVolumePerPressureData\022M" +
      "\n\030RightChestWallCompliance\030\004 \001(\0132+.pulse" +
      ".cdm.bind.ScalarVolumePerPressureData\032\270\007" +
      "\n\030PatientConfigurationData\022\n\n\002ID\030\001 \001(\r\022F" +
      "\n\024EngineInitialization\030\002 \001(\0132(.pulse.cdm" +
      ".bind.EngineInitializationData\0227\n\017Dyspne" +
      "aSeverity\030\003 \001(\0132\036.pulse.cdm.bind.Scalar0" +
      "To1Data\022H\n ImpairedAlveolarExchangeFract" +
      "ion\030\004 \001(\0132\036.pulse.cdm.bind.Scalar0To1Dat" +
      "a\022I\n\020AirwayResistance\030\005 \001(\0132/.pulse.cdm." +
      "bind.ScalarPressureTimePerVolumeData\022Q\n\030" +
      "ExpiratoryLimbResistance\030\006 \001(\0132/.pulse.c" +
      "dm.bind.ScalarPressureTimePerVolumeData\022" +
      "R\n\031InspiratoryLimbResistance\030\007 \001(\0132/.pul" +
      "se.cdm.bind.ScalarPressureTimePerVolumeD" +
      "ata\022e\n\016LungResistance\030\010 \001(\0132K.pulse.mult" +
      "iplex_ventilator.bind.MultiplexVentilato" +
      "rData.LungResistanceDataH\000\022y\n\030BronchiAlv" +
      "eoliResistance\030\t \001(\0132U.pulse.multiplex_v" +
      "entilator.bind.MultiplexVentilatorData.B" +
      "ronchiAlveoliResistanceDataH\000\022e\n\016SideCom" +
      "pliance\030\n \001(\0132K.pulse.multiplex_ventilat" +
      "or.bind.MultiplexVentilatorData.SideComp" +
      "lianceDataH\001\022e\n\016LungCompliance\030\013 \001(\0132K.p" +
      "ulse.multiplex_ventilator.bind.Multiplex" +
      "VentilatorData.LungComplianceDataH\001B\021\n\017R" +
      "esistancesDataB\020\n\016ComplianceData\032\375\001\n\014Sce" +
      "narioData\022o\n\024PatientConfiguration\030\001 \003(\0132" +
      "Q.pulse.multiplex_ventilator.bind.Multip" +
      "lexVentilatorData.PatientConfigurationDa" +
      "ta\022B\n\022DataRequestManager\030\002 \001(\0132&.pulse.c" +
      "dm.bind.DataRequestManagerData\0228\n\rConfig" +
      "uration\030\003 \001(\0132!.pulse.cpm.bind.Configura" +
      "tionDataBE\n\037pulse.multiplex_ventilator.b" +
      "indH\001\252\002\037pulse.multiplex_ventilator.bindb" +
      "\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          pulse.cdm.bind.Engine.getDescriptor(),
          pulse.cdm.bind.Properties.getDescriptor(),
          pulse.cpm.bind.PulseConfiguration.getDescriptor(),
        });
    internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_descriptor,
        new java.lang.String[] { });
    internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_LungResistanceData_descriptor =
      internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_descriptor.getNestedTypes().get(0);
    internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_LungResistanceData_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_LungResistanceData_descriptor,
        new java.lang.String[] { "LeftLungResistance", "RightLungResistance", });
    internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_BronchiAlveoliResistanceData_descriptor =
      internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_descriptor.getNestedTypes().get(1);
    internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_BronchiAlveoliResistanceData_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_BronchiAlveoliResistanceData_descriptor,
        new java.lang.String[] { "LeftBronchiResistance", "LeftAlveoliResistance", "RightBronchiResistance", "RightAlveoliResistance", });
    internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_SideComplianceData_descriptor =
      internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_descriptor.getNestedTypes().get(2);
    internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_SideComplianceData_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_SideComplianceData_descriptor,
        new java.lang.String[] { "LeftSideCompliance", "RightSideCompliance", });
    internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_LungComplianceData_descriptor =
      internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_descriptor.getNestedTypes().get(3);
    internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_LungComplianceData_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_LungComplianceData_descriptor,
        new java.lang.String[] { "LeftChestWallCompliance", "LeftLungCompliance", "RightLungCompliance", "RightChestWallCompliance", });
    internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_PatientConfigurationData_descriptor =
      internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_descriptor.getNestedTypes().get(4);
    internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_PatientConfigurationData_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_PatientConfigurationData_descriptor,
        new java.lang.String[] { "ID", "EngineInitialization", "DyspneaSeverity", "ImpairedAlveolarExchangeFraction", "AirwayResistance", "ExpiratoryLimbResistance", "InspiratoryLimbResistance", "LungResistance", "BronchiAlveoliResistance", "SideCompliance", "LungCompliance", "ResistancesData", "ComplianceData", });
    internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_ScenarioData_descriptor =
      internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_descriptor.getNestedTypes().get(5);
    internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_ScenarioData_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_pulse_multiplex_ventilator_bind_MultiplexVentilatorData_ScenarioData_descriptor,
        new java.lang.String[] { "PatientConfiguration", "DataRequestManager", "Configuration", });
    pulse.cdm.bind.Engine.getDescriptor();
    pulse.cdm.bind.Properties.getDescriptor();
    pulse.cpm.bind.PulseConfiguration.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
